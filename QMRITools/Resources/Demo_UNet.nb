(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Wolfram 14.1' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       154,          7]
NotebookDataLength[   1494151,      27792]
NotebookOptionsPosition[   1483220,      27612]
NotebookOutlinePosition[   1483622,      27628]
CellTagsIndexPosition[   1483579,      27625]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{
Cell[BoxData[{
 RowBox[{
  RowBox[{"<<", "QMRITools`"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"netIm", "=", 
   RowBox[{
    RowBox[{"Information", "[", 
     RowBox[{"#", ",", "\"\<SummaryGraphic\>\""}], "]"}], "&"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"makeNetIm", "=", 
   RowBox[{
    RowBox[{"With", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"im", "=", 
        RowBox[{"Information", "[", 
         RowBox[{"#", ",", "\"\<SummaryGraphic\>\""}], "]"}]}], "}"}], ",", 
      RowBox[{"Show", "[", 
       RowBox[{"im", ",", 
        RowBox[{"AspectRatio", "->", "0.5"}], ",", 
        RowBox[{"ImageSize", "->", 
         RowBox[{"Max", "[", 
          RowBox[{
           RowBox[{"AbsoluteOptions", "[", 
            RowBox[{"im", ",", "ImageSize"}], "]"}], "[", 
           RowBox[{"[", 
            RowBox[{"1", ",", "2"}], "]"}], "]"}], "]"}]}]}], "]"}]}], "]"}], 
    "&"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"netSumIm", "=", 
   RowBox[{
    RowBox[{"Row", "[", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"NetSummary", "[", "#", "]"}], ",", 
       RowBox[{"netIm", "[", "#", "]"}]}], "}"}], "]"}], "&"}]}], 
  ";"}]}], "Input",ExpressionUUID->"44cc6656-9017-924b-8f9c-96d457b68db2"],

Cell[CellGroupData[{

Cell["MakeUnet Function", "Subsection",ExpressionUUID->"01e9f8f5-d481-9c42-848d-a9c83d2e5e8f"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"Echo", "[", " ", 
   RowBox[{
    RowBox[{"Grid", "@", 
     RowBox[{"Transpose", "@", 
      RowBox[{"{", 
       RowBox[{"Options", "@", "MakeUnet"}], "}"}]}]}], ",", " ", 
    "\"\<MakeUnet options\>\""}], "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Echo", "[", 
   RowBox[{
    RowBox[{"Show", "[", 
     RowBox[{
      RowBox[{"MakeFunctionGraph", "[", 
       RowBox[{"MakeUnet", ",", 
        RowBox[{"LabelPlacement", "->", "Automatic"}], ",", 
        RowBox[{"AllowSelfDependencies", "->", "True"}]}], "]"}], ",", 
      RowBox[{"ImageSize", "->", "600"}]}], "]"}], ",", 
    "\"\<Function graph\>\""}], "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Echo", "[", 
   RowBox[{
    RowBox[{"Row", "[", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"Darker", "@", "Green"}], ",", " ", 
       "\"\<Public function  \>\"", ",", "Blue", ",", " ", 
       "\"\<Private function\>\""}], " ", "}"}], "]"}], ",", 
    "\"\<Legend\>\""}], "]"}], ";"}]}], "Input",
 CellLabel->
  "In[111]:=",ExpressionUUID->"31a694be-fb85-7842-bf1b-bcf772921799"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  TagBox["\<\"MakeUnet options\"\>",
   "EchoLabel"], "  ", 
  TagBox[GridBox[{
     {
      RowBox[{"NetworkArchitecture", "\[Rule]", "\<\"UNet\"\>"}]},
     {
      RowBox[{"BlockType", "\[Rule]", "\<\"ResNet\"\>"}]},
     {
      RowBox[{"ActivationType", "\[Rule]", "\<\"GELU\"\>"}]},
     {
      RowBox[{"RescaleMethod", "\[Rule]", "\<\"Conv\"\>"}]},
     {
      RowBox[{"NetworkDepth", "\[Rule]", "5"}]},
     {
      RowBox[{"DownsampleSchedule", "\[Rule]", "Automatic"}]},
     {
      RowBox[{"SettingSchedule", "\[Rule]", "Automatic"}]},
     {
      RowBox[{"FeatureSchedule", "\[Rule]", "32"}]},
     {
      RowBox[{"DropoutRate", "\[Rule]", "0.2`"}]},
     {
      RowBox[{"MonitorCalc", "\[Rule]", "False"}]}
    },
    AutoDelete->False,
    GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
   "Grid"]}]], "Echo",ExpressionUUID->"86286d76-b593-c44f-9c5d-2857f39c9368"],

Cell[BoxData[
 RowBox[{
  TagBox["\<\"Function graph\"\>",
   "EchoLabel"], "  ", 
  GraphicsBox[{
    {GrayLevel[0], Thickness[Large], Opacity[0.7], Arrowheads[Medium], 
     ArrowBox[BezierCurveBox[{{2.0449526217233456`, 0.8918782419995357}, {
       2.1966209263677254`, 0.6030239005001771}, {2.147982514791646, 
       0.47531076819386464`}, {2.0753456875384733`, 0.418813916968668}, {
       1.8223625664676408`, 0.47334836090642257`}, {1.7794525757806685`, 
       0.554753124716738}, {1.7877498576332296`, 0.6911624145689798}, {
       2.0449526217233456`, 0.8918782419995357}},
       SplineDegree->7], 0.04068283461587047], 
     ArrowBox[{{2.0449526217233456`, 0.8918782419995357}, {3.172555468324269, 
      1.3757618217300802`}}, 0.04068283461587047], 
     ArrowBox[{{2.0449526217233456`, 0.8918782419995357}, {0.8983652506234951,
       0.512222754198409}}, 0.04068283461587047], 
     ArrowBox[{{2.0449526217233456`, 0.8918782419995357}, {
      1.4535973060188836`, 1.598507615276383}}, 0.04068283461587047], 
     ArrowBox[{{2.0449526217233456`, 0.8918782419995357}, {
      2.8271220449871994`, 0.17136770171955074`}}, 0.04068283461587047], 
     ArrowBox[BezierCurveBox[{{3.172555468324269, 1.3757618217300802`}, {
       3.7139735007578643`, 1.184663472532286}, {4.0362719173564, 
       0.7095047668681166}}], 0.04068283461587047], 
     ArrowBox[{{3.172555468324269, 1.3757618217300802`}, {3.517432440387282, 
      2.2799635094168726`}}, 0.04068283461587047], 
     ArrowBox[BezierCurveBox[{{0.8983652506234951, 0.512222754198409}, {
       1.1451509236796498`, 0.44305702793617174`}, {1.218861055726529, 
       0.273865640315219}, {1.1898359559639025`, 0.1525207772845562}, {
       0.8636513114429277, 0.05055661217158}, {0.7706830340225475, 
       0.13376677737780912`}, {0.734908930750859, 0.31481683329212923`}, {
       0.8983652506234951, 0.512222754198409}},
       SplineDegree->7], 0.04068283461587047], 
     ArrowBox[{{0.8983652506234951, 0.512222754198409}, {0., 
      0.24786219985895508`}}, 0.04068283461587047], 
     ArrowBox[BezierCurveBox[{{1.4535973060188836`, 1.598507615276383}, {
       1.2505107900766566`, 1.5438925886174972`}, {1.0796139717506619`, 
       1.6602228734857731`}, {1.0432092204649335`, 1.7955943006305224`}, {
       1.331917954283997, 2.037205321755338}, {1.4587550706249026`, 
       1.9775138221787198`}, {1.5431475082740462`, 1.7887908130910157`}, {
       1.4535973060188836`, 1.598507615276383}},
       SplineDegree->7], 0.04068283461587047], 
     ArrowBox[{{2.8271220449871994`, 0.17136770171955074`}, {
      3.8221851576180192`, 0.}}, 0.04068283461587047], 
     ArrowBox[BezierCurveBox[{{4.0362719173564, 0.7095047668681166}, {
       3.494853884922795, 0.9006031160659107}, {3.172555468324269, 
       1.3757618217300802`}}], 0.04068283461587047], 
     ArrowBox[BezierCurveBox[{{4.0362719173564, 0.7095047668681166}, {
       3.967121140663469, 0.9470930891753182}, {4.07451965519102, 
       1.1031940799078184`}, {4.196586406988333, 1.1422768052617096`}, {
       4.454077438053289, 0.9055428235726614}, {4.425367702966545, 
       0.7806288434636143}, {4.278821861481837, 0.6605194076397314}, {
       4.0362719173564, 0.7095047668681166}},
       SplineDegree->7], 0.04068283461587047], 
     ArrowBox[{{4.0362719173564, 0.7095047668681166}, {3.8221851576180192`, 
      0.}}, 0.04068283461587047], 
     ArrowBox[{{4.0362719173564, 0.7095047668681166}, {4.595388404668206, 
      0.09839350346422293}}, 0.04068283461587047], 
     ArrowBox[BezierCurveBox[{{3.8221851576180192`, 0.}, {
       4.027726202802669, -0.12292748383306057`}, {
       4.056319989714573, -0.3144501933756656}, {
       3.991040766544619, -0.4280916507196229}, {
       3.6346752435122647`, -0.42025552964104707`}, {
       3.574454425380409, -0.30385445203237094`}, {
       3.6114392892431493`, -0.11377375136668264`}, {3.8221851576180192`, 0.}},
       SplineDegree->7], 0.04068283461587047], 
     ArrowBox[{{3.8221851576180192`, 0.}, {4.595388404668206, 
      0.09839350346422293}}, 0.04068283461587047], 
     ArrowBox[BezierCurveBox[{{4.595388404668206, 0.09839350346422293}, {
       4.7441626198158575`, 0.24703120993449673`}, {4.950296966359497, 
       0.23148077050755203`}, {5.049381518616876, 0.13233160827788545`}, {
       4.919728956308978, -0.2210822374497198}, {
       4.78003327431586, -0.23263305124648886`}, {
       4.612746088567295, -0.11119095609135171`}, {4.595388404668206, 
       0.09839350346422293}},
       SplineDegree->7], 0.04068283461587047]}, 
    {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[0.7]}], {
      {RGBColor[
        NCache[{
          Rational[13, 64], 
          Rational[21, 32], 
          Rational[83, 256]}, {0.203125, 0.65625, 0.32421875}]], EdgeForm[
       None], DiskBox[{2.0449526217233456`, 0.8918782419995357}, 
        0.04068283461587047]}, InsetBox[
       StyleBox["\<\"MakeUnet\"\>",
        StripOnInput->False,
        LineColor->GrayLevel[0],
        FrontFaceColor->GrayLevel[0],
        BackFaceColor->GrayLevel[0],
        GraphicsColor->GrayLevel[0],
        FontWeight->Bold,
        FontColor->GrayLevel[0]], 
       Offset[{2, 2}, {2.085635456339216, 0.9325610766154062}], ImageScaled[{0, 0}],
       BaseStyle->"Graphics"]}, {
      {RGBColor[
        NCache[{
          Rational[13, 64], 
          Rational[21, 32], 
          Rational[83, 256]}, {0.203125, 0.65625, 0.32421875}]], EdgeForm[
       None], DiskBox[{3.172555468324269, 1.3757618217300802`}, 
        0.04068283461587047]}, InsetBox[
       StyleBox["\<\"MakeNode\"\>",
        StripOnInput->False,
        LineColor->GrayLevel[0],
        FrontFaceColor->GrayLevel[0],
        BackFaceColor->GrayLevel[0],
        GraphicsColor->GrayLevel[0],
        FontWeight->Bold,
        FontColor->GrayLevel[0]], 
       Offset[{2, 2}, {3.2132383029401397, 1.4164446563459507}], ImageScaled[{0, 0}],
       BaseStyle->"Graphics"]}, {
      {RGBColor[
        NCache[{
          Rational[13, 64], 
          Rational[21, 32], 
          Rational[83, 256]}, {0.203125, 0.65625, 0.32421875}]], EdgeForm[
       None], DiskBox[{0.8983652506234951, 0.512222754198409}, 
        0.04068283461587047]}, InsetBox[
       StyleBox["\<\"NetSummary\"\>",
        StripOnInput->False,
        LineColor->GrayLevel[0],
        FrontFaceColor->GrayLevel[0],
        BackFaceColor->GrayLevel[0],
        GraphicsColor->GrayLevel[0],
        FontWeight->Bold,
        FontColor->GrayLevel[0]], 
       Offset[{2, 2}, {0.9390480852393657, 0.5529055888142795}], ImageScaled[{0, 0}],
       BaseStyle->"Graphics"]}, {
      {RGBColor[
        NCache[{
          Rational[33, 128], 
          Rational[133, 256], 
          Rational[61, 64]}, {0.2578125, 0.51953125, 0.953125}]], EdgeForm[
       None], DiskBox[{1.4535973060188836`, 1.598507615276383}, 
        0.04068283461587047]}, InsetBox[
       StyleBox["\<\"UNetMap\"\>",
        StripOnInput->False,
        LineColor->GrayLevel[0],
        FrontFaceColor->GrayLevel[0],
        BackFaceColor->GrayLevel[0],
        GraphicsColor->GrayLevel[0],
        FontWeight->Bold,
        FontColor->GrayLevel[0]], 
       Offset[{2, 2}, {1.4942801406347541, 1.6391904498922536}], ImageScaled[{0, 0}],
       BaseStyle->"Graphics"]}, {
      {RGBColor[
        NCache[{
          Rational[33, 128], 
          Rational[133, 256], 
          Rational[61, 64]}, {0.2578125, 0.51953125, 0.953125}]], EdgeForm[
       None], DiskBox[{2.8271220449871994`, 0.17136770171955074`}, 
        0.04068283461587047]}, InsetBox[
       StyleBox["\<\"UNetStart\"\>",
        StripOnInput->False,
        LineColor->GrayLevel[0],
        FrontFaceColor->GrayLevel[0],
        BackFaceColor->GrayLevel[0],
        GraphicsColor->GrayLevel[0],
        FontWeight->Bold,
        FontColor->GrayLevel[0]], 
       Offset[{2, 2}, {2.86780487960307, 0.2120505363354212}], ImageScaled[{0, 0}],
       BaseStyle->"Graphics"]}, {
      {RGBColor[
        NCache[{
          Rational[33, 128], 
          Rational[133, 256], 
          Rational[61, 64]}, {0.2578125, 0.51953125, 0.953125}]], EdgeForm[
       None], DiskBox[{4.0362719173564, 0.7095047668681166}, 
        0.04068283461587047]}, InsetBox[
       StyleBox["\<\"ConvBlock\"\>",
        StripOnInput->False,
        LineColor->GrayLevel[0],
        FrontFaceColor->GrayLevel[0],
        BackFaceColor->GrayLevel[0],
        GraphicsColor->GrayLevel[0],
        FontWeight->Bold,
        FontColor->GrayLevel[0]], 
       Offset[{2, 2}, {4.07695475197227, 0.750187601483987}], ImageScaled[{0, 0}],
       BaseStyle->"Graphics"]}, {
      {RGBColor[
        NCache[{
          Rational[33, 128], 
          Rational[133, 256], 
          Rational[61, 64]}, {0.2578125, 0.51953125, 0.953125}]], EdgeForm[
       None], DiskBox[{3.517432440387282, 2.2799635094168726`}, 
        0.04068283461587047]}, InsetBox[
       StyleBox["\<\"ConvScale\"\>",
        StripOnInput->False,
        LineColor->GrayLevel[0],
        FrontFaceColor->GrayLevel[0],
        BackFaceColor->GrayLevel[0],
        GraphicsColor->GrayLevel[0],
        FontWeight->Bold,
        FontColor->GrayLevel[0]], 
       Offset[{2, 2}, {3.5581152750031526, 2.320646344032743}], ImageScaled[{0, 0}],
       BaseStyle->"Graphics"]}, {
      {RGBColor[
        NCache[{
          Rational[33, 128], 
          Rational[133, 256], 
          Rational[61, 64]}, {0.2578125, 0.51953125, 0.953125}]], EdgeForm[
       None], PolygonBox[{{0., 0.293544954849116}, {-0.04546917010842763, 
        0.21479026926018704`}, {0.04546917010842763, 0.21479026926018704`}, {
        0., 0.293544954849116}}]}, InsetBox[
       StyleBox["\<\"makeNetIm\"\>",
        StripOnInput->False,
        LineColor->GrayLevel[0],
        FrontFaceColor->GrayLevel[0],
        BackFaceColor->GrayLevel[0],
        GraphicsColor->GrayLevel[0],
        FontWeight->Bold,
        FontColor->GrayLevel[0]], 
       Offset[{2, 2}, {0.04068283461587047, 0.28854503447482555}], 
       ImageScaled[{0, 0}],
       BaseStyle->"Graphics"]}, {
      {RGBColor[
        NCache[{
          Rational[33, 128], 
          Rational[133, 256], 
          Rational[61, 64]}, {0.2578125, 0.51953125, 0.953125}]], EdgeForm[
       None], DiskBox[{3.8221851576180192`, 0.}, 0.04068283461587047]}, 
      InsetBox[
       StyleBox["\<\"Conv\"\>",
        StripOnInput->False,
        LineColor->GrayLevel[0],
        FrontFaceColor->GrayLevel[0],
        BackFaceColor->GrayLevel[0],
        GraphicsColor->GrayLevel[0],
        FontWeight->Bold,
        FontColor->GrayLevel[0]], 
       Offset[{2, 2}, {3.8628679922338898, 0.04068283461587047}], 
       ImageScaled[{0, 0}],
       BaseStyle->"Graphics"]}, {
      {RGBColor[
        NCache[{
          Rational[33, 128], 
          Rational[133, 256], 
          Rational[61, 64]}, {0.2578125, 0.51953125, 0.953125}]], EdgeForm[
       None], DiskBox[{4.595388404668206, 0.09839350346422293}, 
        0.04068283461587047]}, InsetBox[
       StyleBox["\<\"ActivationLayer\"\>",
        StripOnInput->False,
        LineColor->GrayLevel[0],
        FrontFaceColor->GrayLevel[0],
        BackFaceColor->GrayLevel[0],
        GraphicsColor->GrayLevel[0],
        FontWeight->Bold,
        FontColor->GrayLevel[0]], 
       Offset[{2, 2}, {4.636071239284076, 0.1390763380800934}], ImageScaled[{0, 0}],
       BaseStyle->"Graphics"]}}},
   FormatType->TraditionalForm,
   FrameTicks->None,
   ImageSize->600]}]], "Echo",ExpressionUUID->"7604b2a5-e435-bc42-ba41-\
4ff14493b66e"],

Cell[BoxData[
 RowBox[{
  TagBox["\<\"Legend\"\>",
   "EchoLabel"], "  ", 
  TemplateBox[{
    TemplateBox[<|"color" -> RGBColor[0, 
        Rational[2, 3], 0]|>, "RGBColorSwatchTemplate"], 
    "\"Public function  \"", 
    TemplateBox[<|"color" -> RGBColor[0, 0, 1]|>, "RGBColorSwatchTemplate"], 
    "\"Private function\""},
   "RowDefault"]}]], "Echo",ExpressionUUID->"737a3962-b046-2346-b7ee-\
0dcd5fe5a30c"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["The internal Make node function", "Subsection",ExpressionUUID->"f546921e-67fd-8344-93df-03e1c9ae057f"],

Cell[CellGroupData[{

Cell["MakeNode with options ", "Subsubsection",ExpressionUUID->"71ecf511-d365-8645-843d-ecda7c304f9a"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"scale", "=", 
    RowBox[{"{", 
     RowBox[{"2", ",", "2"}], "}"}]}], ";"}], 
  RowBox[{"(*", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"input", " ", "scaling"}], ",", " ", 
     RowBox[{"output", " ", "scaling"}]}], "}"}], 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"skipConn", "=", 
    RowBox[{"{", 
     RowBox[{"1", ",", "True"}], "}"}]}], ";"}], 
  RowBox[{"(*", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{
     "number", " ", "of", " ", "input", " ", "skip", " ", "connetions"}], ",",
      " ", 
     RowBox[{"output", " ", "skip", " ", "connnection", " ", 
      RowBox[{"yes", "/", "no"}]}]}], "}"}], "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"conf", "=", 
    RowBox[{"{", 
     RowBox[{"\"\<Conv\>\"", ",", 
      RowBox[{"{", 
       RowBox[{"32", ",", "16"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"\"\<GELU\>\"", ",", "3"}], "}"}]}], "}"}]}], ";"}], " ", 
  RowBox[{"(*", 
   RowBox[{"node", " ", "configuration"}], "*)"}]}]}], "Input",
 CellLabel->"In[28]:=",ExpressionUUID->"b656f018-13fc-8240-a769-918c5e196f44"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"netIm", "@", 
  RowBox[{"MakeNode", "[", 
   RowBox[{"scale", ",", "skipConn", ",", "conf"}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"netIm", "@", 
  RowBox[{"MakeNode", "[", 
   RowBox[{"scale", ",", "skipConn", ",", "conf", ",", 
    RowBox[{"DropoutRate", "->", ".5"}], ",", 
    RowBox[{"RescaleMethod", "->", "\"\<Conv\>\""}]}], "]"}]}]}], "Input",
 CellLabel->"In[31]:=",ExpressionUUID->"8b019094-cd8b-b84c-9464-c55558279efe"],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1: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
    "], {{0, 105.75}, {342., 0}}, {0, 255},
    ColorFunction->RGBColor,
    ImageResolution->{96., 96.},
    RasterInterpolation->"High"],
   BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSize->Automatic,
  ImageSizeRaw->{342., 105.75},
  PlotRange->{{0, 342.}, {0, 105.75}}]], "Output",
 CellLabel->"Out[31]=",ExpressionUUID->"2bafef5f-a808-854b-9038-a6445b2018a4"],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1: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
vazemze9OrDNZktISKitrY2LiyMHjo+PLy0tVeTAeuWkLLmXF6XXm841lFDE
tLsgvXt8KMpzUpE8OT+JJfPmbw1wPbqxaQv7VJ08GVTcvuTpat+Nb53eTa9G
FLc6eWKJYvnHdr+F2q0OUr3i+sZLufkFtfW0rddpTYRU6UKOJSEr90KWpfy6
Dg8BptwuqW+kE6bkF/jK/4AOfH2oXzoQrVqhfA3ucSNTrYV1bTdGXZOexwR5
rdyrAxcXF6enp9fX15MbkwMnJydXVlYqcuAgjVTUFFCWVvV3ke7HFmcVrD2u
k43p1Q06kZPByFP1PzzV8YdtJEM1T/xkLDOb7ed6VPY3P5wsr1InT0YUty95
6pgc++tLB7fV5BtU3Frk6Z30U1TT78xMonaroOVmD2nT1415jqUpIq5DUdxE
PyfEaUvSaaW1TJ1CxdjS6X+pMzI/5v+CceB7s7Ptb/+x8he/5qnh9Hny3kOH
DpHTbt26lRx4165d1OPy5cDOI8fpfxmdk2xMb/TuNDUIA9MTFEMNzU7Stv8x
vejJyYBGSuWp4u/+sfV370ijJ9IjCqBoZ0B5Ck1x+5In14L7qcz4Z7LOuJeX
DCpuRUbK5ImN7wWM5aPEJ7Wk9IIis7VFB76OnrK+jp4Ssi0lDde1n5D3ChIt
+RSODQyP3H/wQHaMuk6gp0K1DA9Q8vOVgP2rSzl5RXUNzsHbnrGwopnG5KXl
5eWNjY01NTUU9VPPiry3qamJon7+ker+lR8jg8zJXtcoH9MjPdqRn0IxVGV/
Z5DaFA05qWhw727XTYqVenbtlcrTzHUHbfQf+kxj9KS9uP3I04u25O8nHh6Y
mzKuuLVET68mxlEdD3J2RMT7pFIyCoq5PF2OiMnn7oUFEpEki5W0ac49r/Fs
lOcVTQ5fqsRRPR1aplAb0uIpKXVgMpIsDOgSSh34zTffzMrK2rNnT1xcHEX9
1LMi73355Zf5R0pHp4MxMpicHJ2b2WvPJCXKbKtne1zzc6RWwU+RioacVCRP
S2PjFEA5Xn79wZ9ebKLoqe6pZ9Vde9KruP3I05Yqy3cS9leP+uvRaS9u1fJE
QdOjH65/4tgH8El1NHV1X8zJS/h6cC+vsb1Tr9NGDEvLy35UiaPlxj2pQvEJ
fooceJFi9iBcQqkDB0SRAwdpZMCcLHK2U4+UsovkifLqXEMJu94UfNwUJTkZ
jDzV/+QXJEaDJ0+RMJEGDcR9KZMnemVXKJTKk17F7UeePm6wf/tszOWeFqOL
W6k8/VXMxlN1xTttqY/tfusvdvw2+LufIt4nlULntFbVXMrNp9f5xUXdzx8l
aLyvnCuUOnkKEqUOvGXLltzc3MOHD8fHxycnJ+/atYuifupZ8Y+Uhv/ac7Ju
0MnmkFOiTmnryMC/no5lkZTSPI/4nAxGnvj1cQqR+h6uZCe72EQRlrrBvWBQ
V3GuZGZuq8kPXps0FrdSeaK6TIm06bmv9gUzSyd6fBKYgvbHnjCF+pcTH4eP
PJGL1tbW2u12ivorKyttNltjYyNF/fyj0MvT0yd38/pOCtV426notseoykkR
HwlLYRGlw5fOvRF3YMfpE58nXSQlYjtZore0/3u/+eVfbl2/88xJ6UdeU+jl
SUuKeJ8EpqDagVuGB/hT+Eibvhvz3+EjT+zuvPPnz1++fFn7jXu65OTjB7e4
lxfZNhvTU/fowmjISRHliaUznY2Pp3z6rdO7WaLtp6+dei7n3DNZZ757IZaC
pmf37+hTuHYt5CkcfBKYgi7yxJK6mXvBoNSB2d155L3Up9J+454uObnp6tnj
VbaltZl7Kq43RVVOiitPPJEG5dzqjGut/rjBzhIpF+3EghqeCOGTwBQiz4FH
hoZu9ff7T76eymVce0UREyn4D2I3/+jIe36ep4ecVGpkeMqTrwR58kQInwSm
EHkOLFZ7hZwU1EghilsII4UobmAKtu6WDyzJIXDg3QXpaS216oycLCl37j0Y
AgfuO/TZWHYectLcnBTCSCGKWwgjhShuYAq9rrEXEo6EwIH/K+2LluEBdUYu
3BpsW78xBA7cufm9uzdU3kOHnNQrJ4UwUojiFsJIIYo7SjhjLdp+NomlnqGR
gMfTMXuTMww16fmzB+4onE2kNE0vuH8Wv2d+eUm1kS2vbVgcHjHUe+/NzDS/
uO6BhmfFIyf1ykkhjBSiuIUwUojilpFSWsVb8iAb8zCn6kb3sasWth2k7oRA
nnZaU40eoP68yvq+JUmLkX2xR40eoL595oIz5gByMhxyUggjhShuIYwUorhl
kDxRYtvUSpNC6XhyU/CqNeynUWLKxd+y38u/QtImPUxHxu7O/OrcobK+DoO8
t37QSV244dkpLUYuT7haX39rem3VOSPSTFMLdeGWRseQk+GQk0IYKURxC2Gk
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
RwXOYg==
    "], {{0, 105.75}, {423.75, 0}}, {0, 255},
    ColorFunction->RGBColor,
    ImageResolution->{96., 96.},
    RasterInterpolation->"High"],
   BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSize->Automatic,
  ImageSizeRaw->{423.75, 105.75},
  PlotRange->{{0, 423.75}, {0, 105.75}}]], "Output",
 CellLabel->"Out[32]=",ExpressionUUID->"7c8e4921-4709-9741-b84f-a1b82674e9bb"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Node configurations ", "Subsubsection",ExpressionUUID->"e47652d1-d9a1-6a4a-bca0-83e8154e7169"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{"turn", " ", "scaling", " ", "on", " ", "or", " ", "off"}], "*)"}],
   "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"netIm", "@", 
     RowBox[{"MakeNode", "[", 
      RowBox[{"#", ",", "skipConn", ",", "conf"}], "]"}]}], "&"}], "/@", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"2", ",", "2"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"2", ",", "1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"False", ",", "False"}], "}"}]}], "}"}]}]}]], "Input",
 CellLabel->
  "In[102]:=",ExpressionUUID->"ab20fa92-fdd3-284e-8bbe-939756d05964"],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1:eJztnXdwHNed51W7t1fnutu68x9btz677LpVlffs9ZZqy67S1bpO65XLsrj2
WmfJkixZwZJo6iDTJE1JJimRlMwgM2eCBANAEASRiEDknAYZg5zTIGcMgSGI
MIj3I5741O5JPR1mpme+n3pETfc0Br/he+/bv2+/16//59vbn9/yF4899tj7
/4l+PP/Wrn/dufOtPS/8N9p4cdv7Qe9u+83mTds++M27v9n5v9/+S9p5kv61
/YfHHnv4eh0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwKiurq11TY6lttWHGIhnlZo3B
0Ns+en9a0yDXVlbmTX3mnPzR6Dsyylhs4kxFtXV8AkHqorp1ESQASph4YKFW
Sm1VXiO/22JsnxixrixrGuTSlJlEiaRJnqZNZebOdfesLS0hSF1UN/BNqN6p
9hOaq+Q1nsi60rL+TvPcrKZBUg+ifjSZliWvG47H37VU1y5Pa5xJ6iFIXVQ3
AMrpn57akXLzmWt/ejXq4r7suM/yk+SVrXfDNoUe/WnY8bMlmfNLVnWDXBwa
7t53sOGlN9uCdpiOnOo/GyyvdO35tPGVt5te2zx09cbqwkIABqmL6tZFkADI
ZmV1lfKE58JPUvukViq7hVPvoD7yw6uHf3f3RtfUmLpBrq2sUMbV/Oa7JEck
SrIFjcSQJLHhF693ffTHeVNfAAapi+oGPkvL+NC7Cdeo3n8dd+nTnHjZ7WdL
wlU6q1I7jG4opzapbpBzHV2dH+ylHtS+7cPe42dl98TO9z+mJIp69ERSKvXu
AAxSF9UNgHKoWVLjpNNiWHWReX7WurKsvLRODG9PDv/l7fN1w+qcx6mDUzen
BGM06s7SvelVq1V5edDR1bX3QOu722ebWgMnSF1Uty6CBEAJZB8237kSlHC9
aWxQlRZOPSWyrvRhrzEWqZVskBHr2Lmn8w/7ZtvaVRE0Esbx+LsPRTL6jlpp
my6C1EV1A9+EqvtSec5Pw47HN1XNLMwpbzzzS9aa4d537oS8lxjaPz2lSpBr
S0vDNyKbXts8mZq5bLEo74Yr8/P3G5o6fr+7c9f+xaHhwAlSF9UNgFrQKezX
cZcoRVflzCgscY0Vz1z7U8v4kPIgKRlo3/YhOTJVcgxhmUhOb3jpzbmOrgAJ
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
lykwu9zHBJmkeGHo4UguO3eM3op2YkJlBylvYSJHWeXuquwvh3/Wdm/CUXXL
C1L2YUBr5LmSD9Nvd06OUJJGqdqrURdpDynGd899zA2pbSFRSik1sD9qd2Ei
0TluXdrCRNTxF2ZnmQmlLiZK0lpi4221YnBgwNHEtsbNW9ntlqx9OloARxiq
xIWJmAiQmtU8/ZPir36TXpsOH2dvkYDQJr+8Rpt0mBPZURKkvIWJ7MpF09QY
aQUpht1f+UXEGTbwLSNI2YeBwMEq7VGSMkzo+bJsNguXMiJyo6R1OV1NT10+
IJwhZlvsLgIjMUiXM10dmdDq46djYmJu3LiRl5d34sQJsiQHDx6sqKiwOFhD
w+6aP6oEyXIe7jRJ5WiTXVijnZQLkejN9w9IMaFKglRxJPSZtPDHo0/bXo1X
Xt0eGwlVEiQAtqysrlJxeZgME8ruAyWNpUIOtHNq9GfhJ0mKyYQ6+S27K9VI
DNLlIKMjE1r6o5+RxpLSUu8j1SXtJQUmHe7v63Pk72zX/FErSKGcsgS4//QF
Lsil3/wnNqIhxYTKDlLFkdB4U7OjcQ2F1Q08j8RzjQwTSlkZUwZSiYyO+pci
z7VODJEDJRlx8lt2V6qRGKTLma6OTGhNxG2mD6mpqcHBwVw6Fh48sPs5dtf8
USVIJgLMaS7fv1/+nSdJH7jrpCSNNpc3ni/j0oQqCVKtkVCLdeGJOxcpT5tb
sqpe3cD/WFtbq2/viErPpmJsaaNNhR84v7iYV1ld19ZhtlicHOauKyERY0Of
Dxv54nxcY8WJorSIWoNzcbM6SPglBunShE5PTQ309to1ocnJyaRvRUVFISEh
pGznzp2rrKx0y4SqEqTIhNZter7sW9/jaRIJWsMLr3V99EfZJlSj6nakb3ur
c78c/lndlMMlDpRUt3dNqMQg3UL13g3UQvWqoZZjqK0fGB1zkvnLcCWvRl2s
epSZFPe21430kw47WWOEFUfLpUoJUsrtlmwlIlsTShpLSku9j1SXtJcUmHTY
LROqVpBCOZ1ITKHXY1F3uCC3Bu2gxNI6MSnPhGpX3XZVt+3exFduHfugIlOL
6naXANQ01b/yzOxsbkVVQ2fX/QfOHtforisp6+9kQ5/WjVvIU9pqyJCSaLhM
0uy6EolBujSh4yMjo8PDdk0o04fs7Ozw8HAuHW6ZUFWCFJrQlbn5iif+ufZH
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
Jygp9GpVwdtxIdaN0Q2Js3B5setKJAbprgl1qbpumVC1gmTqSqo7fC285Te/
o9dNb2wRmVBKLEu/+U8yTKha1e0kq0zqbf3rsEM7ytK1rm53CUBNU/0rU8Iv
5TCXroSUIaq+7N/CjjWPDjx5YR+pB6VnJCDSx0BZceRKpATplgmVkqS5a0KV
B8lMKOkD6cDDWwye+Gfym+yJTsKbQNkNU/JMqJQgZZtQMp7/knz9H+6clzJM
oLC63SIAtQJIx3nCH2YsZLNwy/o7n75yuLi3nd104K4DtTqe+igFd03oO++8
YzAY9u/fHxUVFRIScuLEibS0tB07dvC33J2OqzxIlvN8cTP+0z8Zj0sUpkns
NZsbJm86rhTkmdBb8XHPpIV/5daxghGTB6rbuyYUAK1x7krM87P8Kh+pbk5X
E3sq6Ifpt93tuU7mZ7rEXRNKMktiS5JLwksay2aekOqS9rK3ZEzHVR4kU1dW
yr71vY4PPhYuTMRHPeiF7Om4LpFtQsM7ar8UekCiA1VY3cBnce5KPs2JZ7Nw
4xor3ogJjqg1nChKC0oKddeBWh3Pz5SCWybUrj6IpMPd6bjKgxSubFn81W/W
bXrenFfI3hKa0IWhYcPXvy1vOq4U5JnQ6zG3v5tw6fHo070WsweqGwC1cJ7w
f/WzrXwmWO1IX2JzNSVCTh527KR40oQmJyfX1NRkZ2eXlpYWFRXl5eVVVlaS
1vG3PG9CVSwqmlDKc6jsuXZxy4UT+0MvX4q6xfbwcjv+TlDwyf/6/DNf3bXl
wu0I0bu2RZXqhgkF/o1zV7InM5rf9UmGlIT3yQv75KmuJ00oySyJLUkuCS9p
LFubmlSXtJe95RUTqlZR0YQyqbwSHfmrM599cOXcqVs3SGZFQnriVtjf/+rn
/3H7r946d1S66sKE+iVOXAk5zX84+SHfJK0g6Thfli1PLjxmQu3qg0g6PG9C
VSwqmlDWx7ddPkOZ2B/DQshsirp/eFwMqcR//r8//M6+bWFx0dLlAiYU+AJO
Ev5hyz3hjZ8kd98P/lTG5TXPm9CDBw9WVFQEBwenpqbGxMTcuHGDVO7EiRP8
LZhQYdlRlv61yBN/de1TKn8ddujx6NNPp4ZR+f7dq7RJ5eVThyzWBY9Vt0sT
Smcrkdmk01ZtbW10dLRwZ2xsLEwo8EGcm1DhI0GtG3PtDuUlylNdT5pQu0+c
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
a2skjGQYSSSHrt5QOK9DX0Hqorpd4gsdx8OQJtP3YsO+fFxAmEsLD9MoBqpr
quXnwk9mdTaoNa+7e2p8e3I4tcn2iRFVglx5MEf9pfnNd+8VFKs1Q36+t69r
7wHq3XPdPYETpC6q2yW+0HGAXfjAx7rAhApdp4dHQhldU2NBCdefvnLo7djL
B/MSP8tPklc+yoyhPP+Za386UpBMXUndIOdNfZ279jf84vWO3+/uO3Wh/2yw
vGL67ATZuoaX3hw4f5lEKQCDpOp+LzH0h1cPv3MnRGF1v3Dz9I+ufqZFdasY
pHZtkmH3nlDRSCjbw+wnm3jPZ+fChGoNmyvIN4W3tnF19fyADuUGl8pznr1+
5Pmbp6mVym7h1Duoj1BPoRxD9VH+taWl4RuRja+8TXJEoiRb0EgMSRJJGClb
U2VSh+6CZNW9KfQoyZHPVrcI3+w4WsOXYFoX5NLC5NkrAzpU169HX6Sz7W/i
r8puPFR2p0eRwaF2SK2R2qS6QVKvob5DeUvn+x/L7oZUeg4dI6tIPZr6NfXu
AAySqps6OOUtWxJ8t7pF+GbHAbaIFtLkos0uGghNKJs17RlJL6tvLKyvMw6Z
ohvKw4xF8kpqWy15h5XVVe3iJEd2v6FpIil1NPqOvGLOySeruLayEuBBkiNT
Xt3t4yNxOXmDY+O+HKTWbdLR6riiVSVJbNlr/mIdJtRTCBf55LMK2Qt2uU+Y
S3vs1jazxRKblds6Mpjd2Si7hVPvoD4ys6DypSoRC/2D9woNsgWNxJAkcdly
H0GazBO+X90c3+w4miKcgSycVbi+oeFsHIHn0p68tS27vLKirbWsvzOyrlR2
+6G2Ry1Q0zipB1mqa8fj78ruidSLqS8jSOrmvl/dHJ/tOEAewul8WkMmIiGv
YHlZQ8sD/JWJe9Nx2XmLVjx2E+geD0w74aysrt4tKO4bGfXMnwNAOzzZcXwH
T64m12bqyygpW1tb89hfBEAjsAyjLvCYCSX7QCaCrIQH/hbwS4wtbYXVNY7e
HRwdyywu6TD1ei4gAGThyVyaek1RDca+gT8AE6opM7OzsVm5s3PznvlzAGgK
TCgQQvahplWTBd5BgLC2tpZSaOgZHHJ0QEN7R0JWDrlRT0YFgM8yOjUVn5tv
VftOIgCAn0Gn13RDaUdfv7cDAQAAlSHjQPbB/+Z48Gc1+jL+FKTZYonOzJn7
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
AEf8fxD587I=
    "], {{0, 105.75}, {929.25, 0}}, {0, 255},
    ColorFunction->RGBColor,
    ImageResolution->{96., 96.},
    RasterInterpolation->"High"],
   BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSize->Automatic,
  ImageSizeRaw->{929.25, 105.75},
  PlotRange->{{0, 929.25}, {0, 105.75}}]], "Output",
 CellLabel->
  "Out[102]=",ExpressionUUID->"63606ceb-e20a-3e4f-bb94-751adc7db8d7"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{
   "change", " ", "number", " ", "of", " ", "input", " ", "skip", " ", 
    "conncetions", " ", "and", " ", "change", " ", "names", " ", "of", " ", 
    "output", " ", "conncetions"}], "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"netIm", "@", 
     RowBox[{"MakeNode", "[", 
      RowBox[{"scale", ",", "#", ",", "conf"}], "]"}]}], "&"}], "/@", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "True"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "False"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"2", ",", "True"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"3", ",", "2"}], "}"}]}], "}"}]}]}]], "Input",
 CellLabel->
  "In[103]:=",ExpressionUUID->"86b2de4e-cab3-df46-ba34-1f1cb2b38195"],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1:eJzs3QlsW/edL/q8mTsPt8AbvDfAG8ydO4MW7wbofZ3p3GLQArmY4mY6GTRN
ppkGTZq0SbM0sZs8p07iOsnYTuLEtZ3UjvclsuVFsqzVkrVYC7UvFLWL1C5R
1L7vtETRWqiFer/43/x7crgfnsPDI34/+CMgqSP6pxyeH7/88yz/z6tvP/Xa
nzzwwAPv/Gf6z1Ov7PuXvXtfOfD0/0V3nnnrnV2vv/XrnY+/9e6vX//13v/5
6p/Sg+b/7YEHUunGF7e3AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAgsm1sbvbOTeWam2KNegnjpslgGOyeXJxXtEjnxsbywJC1uGwy
5baEMZWauVDX6JieQZGaWN2aKBIgGDP3bPQqpdeqtBf5nU5j98yEY2Nd0SLX
5qzUlKg1SetpcwUlS339zrU1FKmJ1a2JIgGCNzw/tyfn5qPXfv988ucHi9I+
LcuSNnbfiX085vgTsSfOVRUsrznkLXJ1bLzv4JHWZ18279ozcOz08LkoaaP3
wKG2515tf2Hn2NUbmysrEVikJla3JooEkIw+2VFOeDLuFL0+6VUq+RVOWwdt
I/969ZM379ygj4ryFkkf5CkWdrz8OrUjakqSGxo1Q2qJrT97sff93y0PDEVg
kZpY3ZooEkAW9GpPaa2ll3pso966bKcPa8GPrpnxt7PjfpF0oXlcngZCzW0m
K5c622Ty7bW785sOR/DjnqW398PDXa+/bW/vipwiNbG6NVEkQDAoEuy8fWVX
xvX2qVFZXuG0pSQ2V3+x1Rj1tAXJUiQlQMveAz3/cdBu7paloVFjnE6/80WT
TLlNDTNyitTE6tZEkQByoZflr9IuUTaQ5dUuHGltdY9e+33n9FjwRVIX6n7r
PYqCsjQ34ZjJ1rU++/KSpTdCitTE6tZEkQCSTS7OPxF7goLB8ppD3ld439z0
axlXz1UVBF+kY3qm/YWdlAM3lpflbWjLg0M973wwdvVGhBSpidWtiSIB5EKf
9ehzGb04ZY8ZbNCm9NKtKEdwO//QR3v6GE69SPZUyQZ1TvPud4Pc10sTRWpi
dWuiSIBg7Mm5ebGmUKFX+LjNSjGmfqQvyCL7Dh4Zu35ToYa2OjlFqXWxqSUS
itTE6tZEkQBy2Xn7CoUBhV7wNOhT5K6M61fqS4Mp0rL3AGU/hfobjY3l5Z7/
ODgRn7Lti9TE6tZEkQCS3ek0vngryu5YUe5FXtLb/kzCuWD2cp8rKDH/5p2N
e/eU62nzldWdO3cHc1CDJorUxOrWRJEAchm7/3FM9q85RKNupPeVtMuSi1yd
+OLTt+zfaomGzdTc/fZ/bO8iNbG6NVEkQDAO5KfoupsVfYXT+FXaJePYgOQi
Bz45YS0pV7Sh0eh+673F1vbtXaQmVrcmigSQS0V/196ceKVf8NZl+w+ijzik
ftG8UFPf99EnSve3tbvzLT99XvJ+BZooUhOrWxNFAgTjqfgzltlJpV/kxyuy
U1prJRfZ8cobS30DSve04QvRM1m527tITaxuTRQJIJdLtcXK7ecjHM8nf949
MyGtyPEbiZ5261qwWvssFj7objAtzrxrz1Jfv+xFyjuCKVITq1sTRQJItrCy
9HjM8RC8wtPa6j4uvi2tyHXbYttzr3pMgwMDvOvS7WAa2ky2bvCzs0oUKeMI
pkhNrG5NFAkgo2Pl2TnmphC85t/OjuOnmcooLE68k1NlNBVUVrHbbmvjizV+
fHSusNRtUyotKUlNTS0uKmKjrrY2mBbX++Fh4VnFzsTE0b9ONYxOTrHbbutk
P6o68LGnIuUdwRT5RmJ06Ff3tixSrsUgAtGr7udJF0LwCqftaE/OTfaPtnZb
6HVIr8YrKan8tmtt/EfJ56M6fv2mp+iblJSUl5vLG+/d2VnJDY3aZt/BI7yA
gN4datPvtHsoUt4RTJHx5cXPJJwL8erelkXKtRjAlhzplz7KfefsfhpHSzP9
TxoBGblw2VOwpMbb3dVFNxbn5/lYsdtlCZZyFalo+g2ItNWdeScr0F8JZnV7
L3JpdWVmbs7PcXdhXqEiASQLPv2O2+4+m3j+70+99+i1Yz2zE34mjYBQk+l6
7S23LajPYqHou7G6Sp1W2HhlCZZyFalo+g2ItNUtoesGs7p9Fkm91P/Gu+L5
qI1gigSQUZDp96Q+7ydxpwas09Zl+6tp0cW97Z6W3J0V+8G1K+wfbe22CGtg
d+nzGp+UEC3mPf1SK+4xm5MEMtLTpQXgrn0HyxJT6TMjDU91EvpEyT5aChcL
WfoNpkgl0u9hU3nvwqzowV3p167k5ypR5MjoSGtra2lddX5NJR8NTSZ6sKmp
ySjQ3NxMDy6tLHt6qmCKlLwYQJDpd2R+9uHLh3PMpqW1VWq5FIO9JI3nb5xh
3zuIXoGjk1Ns7pf6Lf2Ieq9oMe/plxov9VjqtMLGS31YWrCseWMP7/yeNhzR
GwR7PJTpV3KRSqTf2umRzzvr3a5uJYqkLkq9tNbUKOy61IRb7zN+FT0yPDri
/TUprUjJiwG4Cib9xjcZnoo/Qx2Y3e2ZnWDnUPWUNHzOs7Em7Pq4z/Tb2txM
NzZWV4Nscb0fHtbFxlOG8fn/jRKOaLFQzv1KLlL29Hu+vfZrMYdLxvpEj7+d
HXf+TroSRQ4ND90oyfvT/S88sO95Ph65eIiib2pqqvC9OD09nfrwveUlT08V
TJHBLAYRLpj0O223fT/qUNvkH9PFT+JO0YOeksZrqdE+62H5QfSgz/S7OD9P
W9nU+HjwwbLt3ffddn4R1zeIUKZfyUXKnn7H79n+NvHkMyW33K5uJYqkLkq9
9H+ceFfYdWlQAC4qKkr6qurqaurSnp4qmCKDWQxARHL6pdD78OXD5pkx2+of
5taSW2ro2Twt/5vMmJNpyewf9fQBjc0/8H11/Jn7LS0pYem3tqZmeXjE+PBj
9d99mA26Heg117oPfEzBku045KVOusH3L+KPe0+/q5NT5t3v0rC8+8HgsdPW
0gr+o4kbifQ4L5XdVahIedNv+cQARd/TbW5OzLs7K5aCpRJFUl89nJkgasLf
O7XPaDQmufCefoMpUvJiAJLTL3XdCzVFJ/V5A9ZpYR/2kjR+HnOKzfF6mvul
z2v0iuW7Afsz9zs8MMDTL93t/90x3nVpUH8LNFjWvLGHd34vG47wDcLPuV/W
TmkMfHJi7Eos9WFhQx6/Fsfu2rvMdPeuoUaJIuVNv0trjkdyY7+bccm6Iu5s
fKpf9iJZ+v2vh3eJGu8Xk8D5+aKuW1FR4T39Si4ymMUARKTFobOG/Pgmw0MX
D5b1dz5y5RPqwG2TI985u3/cdtfTr7ydHRdfXsz+Ube7ptNd1n758UH+HPVm
X1hYWlxk6deqr9L/1YPC0XY+qq+3VzSGBgfXV1bcPpt5/0dsl1pWg6cDl/j8
nnAx70e9LfUPUD21336o6YdPGr7+d3S7a9eeP/yju9+luzzxsrte+nkwRUo7
oMxtHx6xz38j+fRzpWluf+WNzOtsql/2ImVMv8EUKXkxAGlxaGR+dldWzNHS
zLS2uu9HHaLeSw++mX2DwrCXpPFGxnWWATwd9cZet3RbtJiXo95o3J2d5emX
Eq+w69Y99lPXrkvD0wl5qG127fto68sNx9OBS6I3CD+PemPttOXJX1DvZR2Y
zTOwhkyteGXsi7lr9t4xmZDiJf1KLlLaAWWe0u/+hqK/iPvUfHfG0+pWokh5
06/kIiUvBhHF4d8pYSWk3ws1RWyHB2rFFIPf0yUV97Y/fPmw8Ms41+H2CCM/
i/S5U4Gn9Nt44sytW7du3LhRWlp68uRJ2n6PHDlSV1dn83CAhtsDymQpkjVb
HnFNj/yY7jpmZll/piZc+TffXB4e8Sf9BlOkjHO/j+bFPZhyxnX+IfjVHbK5
32CKBHC1sblJw+diEtIv29eXeiwNir49c5M/iTtFrZjSr5ffcnuEkZ9F+pxW
9ZR+q3/4E+qx1Glp66OuS72XOjD14eEh95eAd3tAmVxFCtsphVu6PXzmIm/I
1d/8x76PjvqZfiUXKePcb/pAx59dO0T/lX11h3LuV3KRsC05nc6WbkuyroiG
sdNMd4N8wuXV1dL6xmazxWqzeVks0DhETZhN9tJt2+pyWlvdSX1efJOBHvf+
i26Thp9F+ky/83NzI4ODbtNvdnY2NV69Xh8dHU3b7/nz5+vr6wNKv7IUKUq/
zY8/VfOt7/H+TG8frU+/0Pv+7ySnX4VWt6c+/GFjyV/Efdo85/Fg82BWt7rp
188iAyL71g1ykX3V0CvH0NQyMjnl5d1cQhx6PvnzhtF+drtysLt5Ypj6sJez
PXhJGn4W6c8utewwN9f0Sz2WOi1tfdR1qfdSB6Y+HFD6latIYTudycyh21PJ
t3lD7tq1hwKwY2ZWWvpVbnW77brmuzN/nfDZu3UFSqxuddOvn0UGCo1XE2gd
JeTlx2Xn0UjMK2jokHhKKyF6H88q09MTZpSWe3o3DygO5ZhNFHfpV97MvsFm
eum/3z3/gXXZ7vN3PZ1dyp8i/TygzG36LSoqys3Nra6uTk5Opu03Li6usbEx
oPQrS5Gs2TY89C/UjU2P/Nj48GNULe/Phq//3Wy2jv7L9kaTkH6VWN2e+nDu
cPefXTsU3dWo0Or2mX5TK4q/fvQ31Ir5eC7mVHNzc1ZWVpoAveFKSL9+FhkQ
JbZukIUSq4ae5Itn0xV4ejcPKA6NzM+W9Xd+P+pQvqWF7+SwKyvmQk2RHx3b
49mlfBbp/wFlrumXeix1Wtr6qOtS76UOTH040PQrS5F8v7L2l16joDvwyYm1
u/O8IVPcpZ48dOLcQqNJWvqVfXV76ro2x8p3My7RWJJ0MrEgi2Tp96krx4Vd
l5qwvqGOsq6w66anp9NnHwnp158iA4XGqwn02YStoxCPXUn+7ghKjff55M8p
7v5b7Gf0X3aeye+c3e99hwc+dmVcO552S1qRBv8uJLE8PNLy1C+p97JR8/hT
TboCasJRUVHUez/66CPafvfu3Uvd2FP67dx3MD06Vokihem3+fGnqv7bP/S+
/7v1xUXh7ARF4sFjp+lx7+k3mCL9X92e+nDvwuxf3jz260of56IMZnV7L5L6
amsgvKTfYIoMZiTmFardb+APVGm89Kr7WfxZfzY9tsND1/T4T+JO0X+fij9T
M9zz29x4Gv78Om1Hv7x5TlqR1GTad+72J/1S16p77Ke88Ta8/zH1WOq0tPVR
16XeSx2Y+rCX9Fu7e69CRQrTb823vtfy78+yQ9tYQ6bKJ24k1n77IXuX2Wf6
lVyk/6vbU9el8UpFxl8nfDZi93YC82BWt/ciWfr1n/f0K7nIIAcab3gSNWFZ
VtP6+kZ+VQ09W0pBcU1L28TMrOvMv5+TgcW97fzkZvQrmR2N1JObJob8jL4O
z/Ns/hTp/8nEVu7do01Pr9c3NzdTB25sbKTPoXV1dSaTyWAw8B8FOvcbfJGi
PR+m0zL5d3A8/VLvpf7c/7tj0uZ+ZVzdnvqwdWXpO7c//+fs655295Vldfuc
+6V1mp6eLpxwoHdYWq2ZmZnCB7OysqTN/fpTZECU2LpBFkqsmq7+AXqqmzk6
ehXR7aWVFdEC/k8G8pOb0X8pAF9tKKdx1pDv55brZZ7NZ5EBnUysr7eX2ixt
mNRyqfHSxkidlrY+6rrUe9mPJMz9Bl+k8Ku0jaXluu/8U9MPnxSm3/XFRUq/
I+cvS577lXF1u+26NE63VX8t5nDBaI9yq9ufud/c3FzRNG9TU1NZWVnaV9XW
1kqb+/VZZKDQeDXB2GnmU/QJufk1La1BPiG9g5c1GH2+d/sTh6zL9mcTzzeP
D1cOdrNHuqbHH7nySUDbstuk4WeRgabfp59+mnrv3r174+Lizp8/f+TIkezs
7B07dvAfBZR+ZSlSlH7vGmroLjvggvdnas71332YmrOE9Cvj6vbUh5fWHD8p
TPxG8mnv8w/Br26f6beiokK0pxkFXbn2+/WzyIDIvnWDXGRfNeaBoaLa+p7h
kVWHw9My/sShabuN+u1vc+PzLS38rJLUh3kT9md4Shr+FBlo+qU2S82WWi41
Xuqx1Glp66OuS72X/SjQ9CtLkaIdyUyP/Njw9b8Tpl+6PRp11fjwY9LSr1yr
21PXpXGrr42ir+u1LeRd3f6kX0q2ogZLXVeu/X79KTJQaLyaQO+zDe2d9NmE
Bq2j4N926SXkz5P4jEMn9Xm0zEu3ooxjA2y+lx99HNC27DZp+FlkoOnXp4DS
ryxFsmbb8u/PUoMdPnORNds5XaGoP1MfZvvOBZp+5VrdnvowRd9nSm79beLJ
9rkppVe3uunXzyIDIvvWDXKRd9XQr/vz3u0zDrEe2zDavysr5mpD+atp0Y77
Jzfzc4cH70nDzyIDTb8+u25A6VeuIll3pa47fi2u89dv0u32l14TpV/HzGz1
N/9RQvqVa3V76rr036zBrj+PPbqnRqf06lY3/fpZZKDQeMEL70kj1ljBdnio
Ge555MonlYPd1IEPFKQEGn09JQ0/BZp+d+zYYTAYPvroo+Tk5Ojo6JMnT+bl
5e3Zs4f/KNA9H4IvkjVbPkyP/Hg6LdN1doJ9DSdtzwd/SEu/Celpj+bF/XXC
Z+UTAyFY3eqmXwCleU8a1mU7n16grlvc287O7vueLinQLdfLt8w+BZp+qc1S
s6WWS42Xeiz7ro26LvVe9iMJez4EXyTrrmzUfOt7lnc/EB71xi/MQTck7/ng
k+T0G2dp+lrMYT+jb5CrW/W5X4AQ8540/ubT3fxLt6aJocyORurA/NLGAY1Q
pt/s7GyTyVRUVFRdXa3X60tLS+vr66kJ8x+FPv3KOGRMv9RgaRy49vlrF09+
FHP5UnICe4SPpPTbu6JO/Z9PPfo3+167mBQv+qnrQPoF8Ml70jhQkML37KUk
TI33oYsHpXXdUKZfarPUbKnlUuOlHsvOuEJdl3ov+5Eq6VeuIWP6Za3ySkri
L89++u6V86cTblCbFTXSkwmx//2XP/3f3/7lK+eP+991kX4B/OclaYzb7gp3
7h2Zn/1+1CGf5/UNh/TLLmkRFRWVm5sb/NUuZC8yfNIvG3tqdH+bePLPrh2i
8eexRx9MOfNIbiyN79+5Sndp/Pz0UZtjJWSr22f6pXdYUb+lt9qmpqaUlBTh
g6mpqUi/EIa8Jw3hqX0d93d4OFqaKa3rhjL9sktaUMulxhv81S6UKDJM0i8b
jTNj37n9+ddiDrPGSx34ocxo1ni/kXyaHvn2wbdqpwP7jlXp9JuVleWafunD
juhB6s9IvxD+vCeNhy4eZAdZNE0MSdjXV66kEWj6ZZe0iIuLow0z+KtdyF5k
uKVfNpbWHO1zU1mDXZ+1GD42ltI4bCq/1dc2fs/m6ZqbCq1u76/J4ZFhWo/G
r2pubqYHKQALH6S7SL8QhrwnjeSWmpduRdlWl63L9l1ZMd6v5qZcHAo0/bJL
WlDLpcYry9UuZC8yrNIvH9RgyycGorsaWdelcb69tnluQkLXVTr9UpsVNV62
R7frg0i/EP68J40B6/QjVz75xrG3+Il3JI/QpN+N1dXR4WFqs14GLbC+soL0
6/8Iq/R7b3l5Zm7O7zG7ur6mRJEAkvncEZQ2Aeq6NOhGMF03ZOl3wWr13nVp
0DJIv4p2XeXSL41Zq/9dd86+5HHOAekXwoS0OCRhhCb9qhgsNVGkJla3JooE
kExaHJIwQpZ+1QqWmihSE6tbE0UCyOhiTeGVhtIQvOZ/lXapc3pMWpHj129O
xCeHoMV1v/XekqV3GxepidWtiSIBJJu5Z3s85ngIXuHp7Q0fFqZKK3Jtztr2
3KshaGizuQWDx05v4yI1sbo1USSAjIp62vbrkpV+wS+sLP0g+sjymsQT+t2t
MPQf/Uzp/rZus7X89PlNqdeX0USRmljdmigSIBhPxp2yzE4q/SI/bdDdNBkk
F9nx8utLfQNK97TRy9enUjO3d5GaWN2aKBK2gX0xSWyczdLR3b6JqaPJGfyn
orvKGbDO0Gte6Re8aXzwlbTLkotcGR6lFqd0f1tsbe9++z+2d5GaWN2aKNIV
bch8ow7NxguBul5YxtcR9dit+2utpquHLyC6q5wD+Sm67malX+SvZVytGZb+
5wx8csJaUq50T+t55wNbY9P2LlITq1sTRYrQ1sq3aBq6xma5nhkUQk2Yr6YU
fQ2NkMVdVy/dikpvb1D0Bf92dtyl2uJgijTvfnc2t0DR/tb74eHxG4nbvkhN
rG5NFCkiDE60dbNPtRA+aO3wlcL7bcjirkhaW/2O29HLaw7lXuGVg2b6FBnM
txszOfmW3+7fWF5WrqEt1DZ8MWkg9cssrRSpidWtiSJFhBs1oY1alc0Z/McS
r/AR3o0pGNMNfpf+y+YrlMvGndNj9IIct1kVesGntdX9IulCkC/4JUsv9Z/V
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
yc6+k5XFRl5urn1hQXKwnCss7f/4U15ARmFx4p2cKqOpoLKK3Xb7/5D9qCYn
r+2VXUpH3yCLvKUv+2nc6RCv7m1ZpFyLwbZU395R1dyqdhUAAOBe8/jQz5Mu
BJkiyvo7j5Vn51tavCeNt3Mkzlja27u6XnvLbRTss1jS09NHh4Ymx8fZWLHb
gwmWfR8elr1I2dOv5CKlre7MO1kSgqXk1S3La1LpIgG8WF/fyCrTj05Nq10I
AAC4EXzSeE+X9NDFgyf1eT+JO0W3vSSNF26erzJ+cRnl1m6LsIbRySk293sm
Jo5+dCUlVbSY9/RbXFS0sbrabDLV1tTwMT83Jy1Y1u/ey+acXevkd6k8PmvN
Hw9l+pVcpBLp17qyNO2ylwJb3UoUubLm6Onp6TJ3+TkmJie9vyalFSl5MYgQ
M3fnUwtLVh0OtQsBAACxINMvxd03s2/wu39/6r0B67SnpPF62lWf9bD8IHrQ
Z/pdnJ9PSkqqMhham5vZmBwflxYs29/7gGrwWSdL6X4WKXv6lVykEun3udK0
hzKj3a5uJYq8t7zU2tq6PzXme6f28fHDz39Xa2o0GAxZAjk5OSaTaWh4yEv6
lVxkMItBhGg2WyoaTWpXAQAAYsGk35rhnqfizwgf+bfYzxpG+z0ljedvnGVz
vJ7mfgsqq6qMJr4bsP9zvyz90l1bU+tkQgof9yy9EqZVqQa2l6aX6Ts2QS1c
zGf6XZ2cWuofoLGxtCx8nO7Sg46ZWbd35S1S9vR7vr32azGHC0Z7XFc3m+qX
vUiWfv/r4V0P7HteOPJrKvPz85O+qqKiwnv6lVxkMItBhHA6nTkVhr4R6ecn
BAAAJUhOvzlm04dFqfTfN7NvsMPz2yZHvnv+g6W1VU9J442M6ywDeDrqjdLv
1v0wLFos+XxUx6/fdBsFF6xWU2MjT78ND/2L/q8e5KPpp8/b5uddx/rKiqdg
2bX/o63732JveT5wiR5hBQsXq02/07Zzt5f0a979Li+s5lvf633/dywGU9al
R0yP/Jgtxu4OHjvtJf1KLjK+vPhn8WflSr+GySGKvp+1GDytbiWKlDf9Si5S
8mIQUeYXF1MLS5ZWVtQuBAAA/kha+qXEe6AgJa2tjv4b32R4Lf0qRd+HLx8e
mZ/1kjSUOOqNDZ5+67/7sDD9Vv/wJ83NzXq9nvKSwWAwmUx1dXX19fWjw8Oe
gqVyR72x9GvVV81k5rQ9v4NuT9xI5HGXxmy2zs/0Gw5HvU0v27+RfPqnRcmy
r+5Qzv3iqDdQWkdff2F1HbttX1pWtxgAgHDjdDpbui3JuiIaxk4z3Q3y2SxD
w9PWu94XkxCHLtWV7MqKYbdfuhVVM9xDuZcysJfo6ylp+Fmkz2C5YrdnpKe7
Tb8UfZ9++mnKSzt27MjOzj5y5Mj58+eHh4b8D5ZyFcnSL7tta2ql2yPnL/O4
2/Lvzzb98EnJ6Ve51e02/S6tOX5SmPhgyhnX492CX93qpl8/iwyUvFs3aAit
a0q/5oEhul3b2q52OQAA4YXeHBPy8uOy82gk5hU0dHQF+YTLq6tZZfq0olJ6
Kk/v5oHGIeuynbKueXq0Z3aCPULp99U08UFP/s+z+VOk/weUuabfVncCSr9y
FcnSL4Vbq76q89dv1n77IXuXmcfd4TMXDV//O/qR5LlfJVa3p/T7aZP+z2OP
Ns9NKLG6/Um/Xz/6G3/Sb2VlpYS5X3+KDJTsWzdoiH1pOaWgeHZ+PiE3f2Nz
U+1yAADCSLKuiL05shGfm9/S3RPkaOzsulVQzJ4wSVeYZ6ipbm4TLnC7rsr/
q128mX0juaWG0m/75Mh3zu6fttva7t/wPuvLk8braVelFdmiK/K0369oGB9+
7Cvp9yc/NxgMO3bsoLy0Z8+evLy8kydPRkdHe0m/7e99oFCRwv1+K//mm6NR
V4X7/dJdWqDlyV/4k34lFxnQ6vaUfnOHu78Wczi6q1Gh1e29SJZ+UyuKD2cm
8HE8O4UebGhoqBCg6EsP+jzng8TVHeCg2CPcuhPzcI25iOB0OvtHx0anprv6
B7LKKmjVj03PqF0UAEAYUTr9JucXFVTV1ra2S4tDHxalspObXagpohtnDflX
G8ofvXaMArA/v+5n0nBbpP/pd3l4pDM13RSfxEaLocpkMmVnZ1MKouhbX19f
Wlqq1+uDTL/SiuR7PlC+nUq+TQGYHhHu6nDP0ksPzukKZUm/Qa5uT+nXfHfm
rxM++3Wlj+tfBLO6/Um/1dXVxQJlZWUs/QofpHXtzxnPJK5upF/wj2NtrbS+
kVb6zRwd/be+vUPtigAAwoix08y/G6X3ypqWYC+Uyb7AzSgtbzZbrDab22X8
/Cp8ZH6Wgi4/n0NZf+dJfV58k8HqYbdPt0nDy7fM3osM6FS6fb29N27cuHXr
Vm5ublRUVF1d3ZEjRyganTx5kuIQ+5G0PR+CLFK43y+Ntud3VP23f9j86o6+
Ha/san/ptWD2fJBldXtKv9aVpb+/feGfs68vrTmUW93+7PmQlpYm2snBaDTK
ddSbP0UGSvatG7SlvbePpd+04lK1awEACCNOp7OhvTMxr5AGvTkGf9Rb/+iY
z/duf+LQgYIUirv03zezb2R2fPF9NzvDg2112f8E5ekII3+KDDT9Ur7Nzs4u
KiqKi4urr68/f/485aXo6Gi9Xs9+FOhRb7IUKUy/i20d1d/8x7rv/JMo/bKj
4aQd9SbX6vaUfin6Uu6l9Dtin1d0daubfv0sMlDybt2gRdPWuyn5X3zBt2C/
p3YtAAARzWcc+m1uPIXeabvtoYsHRxbmvh91aMA67f3kZgHNs/kj0PSbm5tL
0be8vDw9Pb2xsZEyMOWl5OTk6upq9qNA535lKZKl3/rvPlz77YfohuHrfzeT
mbPpcpKHtp+/HIZnPKPES9H3G8mn2+emlF7dqs/9Aihk1eFILSoprq1XuxAA
gIjmPWmktdXxq7nlW1quNpRT7u2aHg80+oY4/UZFRVHipeh74sQJSrx79+6l
vPTRRx9R7mU/UiX9zmbrKNPSGDpxbir59urkFHvcMTNLD1r1VeyuralVeDcc
0u/RG1ceTDnz31PP+Rl9kX4BPKEAfKugZHJuTu1CAAAil/ek8WpadFl/J7/b
NDH06LVjgWan0KdfdkmLxsZGir5ur3ahSvqVa8iYfjPvZNE4mRD7n956/v9+
99VvH3zr344ffOX88bcun/0o5vK+Kxfo9rc+fPNP//2fH/5kf0J6Glvey0D6
BfBpYmY2vaRsfX1D7UIAACKU96Txni7pUl0Ju+3zam7hk37ZJS3i4uL27t0b
/NUulCgyTNIvG+P3bLnD3afbqvc3FD1Tcuu7GZf+PPbon107ROMbyadfqcg4
fvN6KFe3P+mXYm3+V9HHnKqqKtGDPs/5gPQLqqhv76hqxpGPAADq8J40xm13
vx916M3sGzTohuToG8r0OzQ46PYKF0ITY2NIv/4Pt1c6Viv9rq6vWSyWLnOX
n2NichLpF8LN+vpGVpl+dGpa7UIAACKRzzhkXbYnt9TQ8P/kZuqm343V1ZV7
97wPWgbpV9GhXPoNkyIBgjRzdz61sGTV4VC7EACAiNM9MyHh8gfSksY7uQnS
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
WQBjJ1BlxbAriWwJAhL7LX5X+OQsFPHnR5FBFvl5Vl5SfqFwXxqKvhR6eeJt
aG2j4VqwcAdjeiq3hbG77IIRrAbX8+W6Tb+iGWykXwgfl2qL386Oo0igRNKg
MW6zPhF7onl8KJgix28k9n54mBKgEsGSxurkVPsLO+3tvne303qRmljdmigS
QAL70nJqYcn8/X0yXWWUlrPDl9jlWYU/Eu5UuaVM+uVPKMxswh04WX4T7sbJ
5jNpeR7V+Ey1MC4K06PwyV2XRJHBFHmnsqqquZUvXFBZlZqXn1FYTCPxTg6N
BQ8vPOF1XlyPtuNzvywMs/QrfJDNcotek/Sc2bVG0VMh/UKYsDtWHr32+5H5
WYViBhvp7Q3v5CZILnLj3lLrsy+vjI0rlCrZmM0t6P/40+1dpCZWtyaKBJCm
sLquo6/f7Y/m5hf4bg+iyV5hGFYu/bKg4v+MJd2obDezu2xWkNfMpyjZH+J2
xpItGWiwRJFeiqzusGSV6UenpnkxXhKvW/xywPxudq1JOMfrdu6XFyDa75fv
9Ct8fv+LAVCOcWxgx+1oRWMGjcG7M0/EnpBc5GJru+W3+xVNlTSWh0fbX9i5
vYvUxOrWRJEAEnT1D1D69XRtgoaOrtaeXn5XuN8v32WUXXOZJZAQ7/fLU5bb
vVXZrsjCr7k97a0qfPKtL4Mln28UTpyiSAlFljW1xWXrVh0OVuTo5FRuWbmn
UhnhpcDd7vcrfO2xXTJE+/2yOWHXcz6w16rw30L6hTCR1lZ/vCJb6aRBg5LG
mM0qrciZnPzhC9FKB0saFCxXJ9wfFLA9itTE6tZEkQCBWrDbUwqK7UvLnhZI
KypdvLcUypJgW2o2Wyoa3Z/iLDUvP8TFAISnE/rctLa6ECSN3Xdi+W6WbB+k
KqOpoLKK3XZbG1+s/uNPZ7J1bqNga3PznawsPupqa4MJlr0HDgn3qj0TE0f/
OtVAH5/Zbbd1sh/pDxzyVKS8I5gi30iMDv3q3pZFyrUYRAin05lbWdUzPOJp
gWnr3ZwKQyhLgu2KXmz0WuobGRU+SO+2NG6kZ3o67QNARDlWnp1jbgomQthW
ly/VlZzU5w1Yp70s9nZ2nOSDjEYuXJ4rLHUbBYuLivQVFZPj42xMT0wEFSw/
PCz5mDIvRcqcfoMoUtrqzryTFeivBLO6g39NhqBIgIC0dPeU1jd6WaC+vUO4
2wNAMOYXF1MLS5a+eobMhtY2+jyeW1be2v3FeUUC2h8YYJsJMmmMzM9+9/wH
r6VfPVqa+fen3muaGPI4z5YV+8G1K+wfZZsex+5WGU1XUlLp9pmYONFi3tNv
n8UyPzdXW1PDR7PJtLG6KiFYdu07WJaYyo6Q9VTn1v3jCNistXCxkKXfYIpU
Iv0OursIxa70a1fyc5Uo8u7CfJe5y89h7jbfW17y9FTBFCl5MYhAc/MLFEWW
V1c9LeB0OlMKipfkOJs3ANPR119YXSd8RHjGs9HJKbqNeWCIWMGkXxZ9y/o7
2d18S8tT8We8JA2f82yUECgAuz7uM/22Njenpqa2NDXRDTZW7HZp06q62HjK
MD7/v1HCES0WyrlfyUXKnn7Nd2f+8uax690m0eNvZ8edv5OuRJHjkxOlddUP
nz/4vVP7+PgwPa61tTUvLy9LoLi4mB6cty14eqpgigxmMYgoG5ubWWX6oYlJ
L8tMzMzmV7m5eBaAZPSRitKvecDN2y7PwJj+hYgVTPp9NS2aEi+/2zM78ciV
Tzwt/JvMmJNpyewf9TQtRtGX7Sopetyf9FtbU0N3ZzJzJhNS2JhKvr2xFNip
d7sPfEzBku1s7KVOusH3Sd7yb+6XKlnqH6Dhekq01ckpepyXyu4qVKS86de6
svRQZvQ/Z19fcjkx7+6sWAqWShRJ6fdwZsID+54XDgrARqMxyYX39BtMkZIX
g0hTYWyuNPo4NVlNS1tX/0Bo6oHIYV9aTikoXrDb+SPCi18wmP6VUX9//wP3
qV0I+CYtDo3Mz1YOdj98+XBmR+PVhnIehi/VlXiZZ4svL2b/qNuj3ugu2wz5
8UF8scaPj3oKlj1m8/jICEu/dw01+r96UDiG4pJs8/Oicc9m8xQszfs/YrvU
sho8HbjE5/eEi1Ud+NhL+qVAKyzM9MiPqdo//KO736VHKK4L73pJv8EU+UZi
tIzp99eVWX+d8JnbPR/eyLzOpvplL1LG9BtMkZIXg4hS09oWn5PvWFvzsszG
5iZ2ewCF9AyP6AzV/CR7Da1tovley8AgArDsdu3apXYJ4IOE9Mt2eGgY7f+3
2M9678/3tk2O/DY3/s3sG15+S6Gj3thg6deqrxKl38YTZ+rr6+vq6kwmk8Fg
oCyk1+ubm5s9BWDljnpj6bft5y9TkWNXYqu/+Y80hHG34aF/YdO/PtNvmBz1
Ft3V+LWYwyVjfbKv7pDN/eKoN1DOqsNRVFsfl52nb2zyvuTI5BQtGZqqIAKV
1je2dP/xvNCirEvpl0aIS9r2jh8/rnYJmkEfzVq6Lcm6IhrGTrOn06H7z760
bB4Y8jmfEGgcWlpbfejiQbavLwXg55M/v1RXcrWh/KQ+z/svuk0afhbpM/0O
9vV5Sr/nz58/cuRIdnb2jh07KAs9/fTTFIBt8/P+B0tZimTpl5ItT7yVf/NN
x8wsu133nX+q/fZD02mZktOvQqvbU/ptnpv4i7hPPzaWKrG61U2/fhYZENm3
bghzc/ML6SVlFH1pTMzMel/Y0NTi5UxoAEFaXl1NLSxhV9BevLe0sLjIp3+R
exWC9Os/enNMyMtn3TIxr6ChQ+LkntDQxOTNHF1+VQ29m686HG6XCSgOTdtt
xb3th4rThbv7PhV/xsupHnzOs/lTpJ8HlLlNv63uBJR+ZSmSpd+OV3bZu8yT
CSmUdbt27eFJmO4OHjtteuTHwcz9yr66PaVf68rSgylnflKYqNDq9pl+T+ak
itLv/zzzvslkEkXflJQUaXO//hQZECW2bghbXf0D9PpJ0hXS6k7Izd/Y3PSy
MP00Ob9IlpcZgCfU07LK9PRioxfngt1Oobe124JD3pSD9Ou/ZF0Re3NkIz43
v6W7J/hRYWziz5leWl5abzR1moUL7M9O8jMOsR0eKPe+p0s6a8g/UJBCD76Z
fcP7Dg987M6KvV1XJa3I9k9P+pN+FxpNovRrvHg5Ojr65MmTeXl5e/bsoSy0
Y8cOg8HgKf12HzjUoitSokjRfr/Ghx+79/+3d6+xbZ13nsezwMwCne2LLbDA
vligBfbFvhhgsS8Gi8WiQDDYAikKeDc7u5uZop1Op222QQedpk0mk2SbpG4u
jQM3bpykrm+xI1uyZMmSZV0okRKpqyWRkixKoq4WZYmyRV2t+82SqP3HT/P0
lLpR5Dk8pPT94IFxztER82fIw/PTw+c8p++uceTDyv0HdV/+88kix+A7J/dO
v4kUGfvLvUf6/StX9leyTz1YnLPo5d67SEm/8jpKAH7zZqZu+bVu2VhfX19t
4PV6973qLe4iD9QkAhmP7qxSp92fN7DK9NxcKDymZlu96a6ubPLtvb/EEoY9
IAnq7vhbunrq29oDA8GtP57tYSQ8RhI2F+k3dhal38rHA88Sj0N6crOlR6tf
PXNcFv7Lx69X3O2MMfrunTT2LTLG9CttqtHbevXa71tWjhro63a7JQhJAJbV
oqKi1tbWONJvgkXqkQ/r8/Mzjb7A935U++/+w9yddmNn793/90v/f//reydO
xZ1+zXq590i/rzVXfinjV3XhfXr7E3m5902/bW1t8ppWGDQ2NsqLK4nXuLG2
tjbu9LtvkaRf7MHja2nr6Wvwd+w431TUnsGR+8mpCkfT1MysvMfGpqfzXO6C
yqrtf22VeKq48M1cpN/YyR9l+rtROVc2+NsTf0z1BZy81fuHQwl+Ff5qeU5h
V/Pv48fcwzujQ5J+p5cXYk9Qu33LHEuRsU+lu7K4KIHnrbfeampqOnPmTElJ
yfXr1z/99FMJS7/+9a/1jw468iHxIqPG/arVgTfeNqZf2SiRuPPvfhjfyAcT
X+7d0u/1gY4/vXh8++y+5r7c+458kFgbNcihsLDQxKveYinyQKw4upGyBkIj
xdV1kUhEou/84tIee66vb2SXueTfpNWGo0nek1mO8qvFjqjROPUtrQXOio+v
ZnkamxgDbCLSb+zko9LX2ZVV6pQmJ8fEr4uZnpuL5dy9bxwKzUz+uqb0f2S8
HwiHnjz75tzq8trjAQ/HK/IPlKB2TBoxFnnQ9Pvhhx96vd6MjAyXy1VUVCQB
uKam5ty5c/pHB0q/phRpTL/r8/Oqgzf04dnNPx7oq66GiyP9mvVy75F+y0f6
v3DpzT2udDPr5d43/VZXV1uXfmMs8kBMP7qRshaWlnOdlTOPv0fe99rJ4Mh9
j68lKXXhqJP35K2qWvU3+P3xCeOPsm4Vt/f2qTnJycCmIP2mvr2Thh7wIFlX
MvAFX5XsL8uxD3jYt58tFgdNv5J7m5ub8/Pzq6qqJACXlJTcvn07Oztb/+ig
fb+JF6nSb/2//4/ev3iy7st/rob+Pno4E5V+5zsCamBwHH2/sYg7/Rbe6/5S
xq9+2uBIwsttb/oFEuG83aTGVcbC7W1m2AOSZn19Q13RIG88vXF2fl7NRi4L
I+ExadyaJ3Gk39S3d9J48uybanKzpUerP8y/UHOv9/t55/StjVM2/b7wwgsS
d0+ePCkBWOLumTNnJAO/8cYb+kfJT79rE5P3TpxSbeTMhWl3tf7RZJFDNurV
BxczjKu2p9+5tZX/c+qtL1x6M/boS/rF0dQdHJT0G2Pf/uraWnaZa+8ZIQDT
tXb3Xil2RH29JdHX2OvLMOAEBYNBAnCK2yNpPJh7+J8+eMW4RaLvzUBzHNE3
yelX3dJCUm5zc/OOd7tIfvo1sZmYfm/eKpT25Duv/Mvnv/3lV5/7r2+99Fe/
/uWPzrz/T+c/fPvT8z85+8HTJ4//m3/6/r/6n1/72dnTaue9G+kXR9bswkJO
ecXC0nKM+/cPh+ru+C0tCdhRQ3tHlfcPQ2623/CCWSAS98QTTxCAU9keSWPp
0epXTvxEDfRdO8jkZranX3VLixdeeCEjIyPxu12YXmTqpF/VmifuZ931v9la
9ePbJU+VZnwl+9SfXjwu7QuX3vzqrQu/ulOTmZ+XzJd73/R7584dp9NZZqCm
d4ja6Ha7j3j6/frXv84d55MjEomU1NYf6KYVrkZviB422EHersXVdQOhEbUq
QXf7aAfGPySCOx2nvr2TxgVf1VfPHJd9njz75kuOa3FH36Sl37Wlpc7Ozh3v
cKF1dHQszc+TfmNvO97p2K70Ozk91d3THWPr6e1ZXF46sulXPoEl/dbV1dld
yOHn7+03jqXc1/LqKsMeYCM1JbW+MHP7yAcuf0sEvb6pb984dGd0SDJw7b3e
RKJv0tKvCsAri4t7tLXlZSuC5SFOv0l+udOiyLSQnZ1N328STM3MSpCQQBv7
r3QHBxv8HdaVBOwrMBB03m7Sq9z+2ESk39R3sqYkr6MpCUnjx7cux59+f3th
osiRjGD56vH40286FJkWL3daFJn6nnjM7ioOv43NzUJPzdBo+EC/VVbfMDox
aVFJQCwikYikX+MNWepbWrnezRSk39SX1+F9r7ooCUnj2OWT9+em4ytyorhs
+KNzSQiWnX/77OponMd+WhSZFi93WhQJKL5A90EvXltaWckpr2DaZ9huYWlZ
3oqzCws7/lTNhIY4kH63ezu74OVL16TJgt4yYAgzUavbf93cejrCoR/cOGd1
zLj3cEKSRtxFLnb39v3sFatT5fLwiATLw11kWrzcaVHkdh8UOtShbTy6cbiF
p6byXO61R48O9FuBgSDDHpAi+odDjrrbUX+LqYl/SzxVNhWV9ki/UXJqGqSp
ZUdz2ydOz9Z+cVeTfdSJ1dySlh+tPXXx3dDMpKVJI7/T92JJZtxFbq6stP/1
d1fuP7A0WE6WlAd/8avDXWRavNxpUeR2kn4buvvVshzdsmrigyMFSejNr/TE
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
frGv8NRUnsu99uhRIg8ihwDDHpC++odDjrrbzIaKw+FAX+dFjftVA33VqsoP
kj3MHferHnCP0ao6t2wfrbr1OJu9k1OgO/p2G60a9eBbhtGhKkrt/aQoct8i
L9xyVPpa9WqJp2rfu2Qa7xesH0qvGv+L6jGjxv3qZ2TsDVaBn/SLA5HQm1/p
GZ2YTPBxQuExV6PXlJIAW7i9zcaRbED6MuXrPGBvkh/yXO7w1NT2H7X39pk4
8wNguvq2dm9nIPHHkU/aRKZKA2y3vLpqHMkGpClTvs4DYjE6MZlf6Vlf39Bb
1AzAWbeKSb9IWaHwWKGnxvi+jc/G5mZ2mUvfNgtIU1Ej2YC0Y9bXeUCMvJ2B
+rZ245bZ+Xk1B5q6EYbaYkNlwE4krOY6KyceziT+UL33hotruMkFDoO6O/6W
rh67qwDiZNbXeUCM1tc3Cj01I2Pjxo3GGc/ae/t87R1JrwvYmcfX0tZjwv24
I5FIdpmrkfc2DoU9RrIBKc6sr/OAA5l4OJPrrNz+/e9IeKxv8J5apvsXqWAg
NFJcXWfKFe5NHV0ZRaX9Q8OJPxSQCraPZANS38rqanaZy5Sv84CDauvpq27+
wxy/knWj+nv3nQ4CsNrC0rL8mTZjxh9iQ6Nhib7SJE4n/mhAitg+kg1IZUsr
KxJ9E7xVPRC3SCRSXF1nTALbb3jB+AfYy3m7KTAQTPxx5heXshzlpF8cPjuO
ZANS0/3xiSyHUz6H5TPZ7lpwdM3Mz+c6K43T/kf19+52AzggCbqDg5J+Ex/z
sLG5KX/oVTb5MkvLSL84fHYbyQakDvkkb+3uVV0Q+ZVVdpeDoy4wEJSAoZYX
lpZ1+pUFxv0i+eQT0t/bl+1wXXM4M0vKTOkfGBkbn56b6x8O1d3xR33fARwO
bT19tzzVcuBIa+nq4U5wSCnLq6uSNCT3Xi3+rAuCuUpgO/mQlPdkz+CQLDe2
d249Hu2gL3wDkkyir+qh/exzsqTMF+g265Fdjd5QeEwa6ReHT1tv35XHR420
rNJyEw8cIEESM4ZGw1Mzs4G7weKaenmLMscvUsHC0nJOecXkzExmSdnG5mZU
ly9JGMmU7XBlfH4Sf3wed5rysMuPLzFWtwbgDlk4fCw6cACzzC4sSNKYnVtQ
ScPucnCkyV9kwZH7I2Pj3cHBQk+1fGbeH58w7iBJ2DgPMGA1i07i8g5v8HMJ
Jw4t0i9SmYSNktp6dYt57nCBVLD26JHb2yyflleKHfKv8W0puffT/JtZt4p9
7R2MAUZytHT16JEPmSVlDX5zpnIqq2/guzYcYhYdOIAp/L39eooz44X2gL06
7w6o9JtX4TZu9zQ2SdMzPzAKAlaLRCK+zq6sUqc0OYObcvGOfNjmlFdwHRAO
MSsOHMAUUzOzuc7K5dVVuwsBdjA+/TCn7LPvzmYXFvVGib5qYSQ8pm4Dxy0w
kHYCA0GGPQBA8m1sbhZ6aoZGw3YXAuxqdW0t11VZ0eiN2j47P2+8/TGjIJBe
iqvr5I87u6sAgCPHF+iuu+O3uwpgHxKAr5dXhqem9Jbtg34Z/4A0Mr+4lOdy
778fAMBUkiXk43ft0SO7CwH2NzoxmV/pWV/fUKvtvX1R6dfYFQykuPb+u8x9
CgBJJqFXsgSXGyONeDsD9W1/uGRYsq4xADP6F2nkVlUtwx4AIMkkRTC5GdLL
+vpGoadmZGxcb9Hpl15fpJHpubkCd5XdVQDA0RIKj0mK0F8iA+li4uFMrrNy
dW1NrY6Ex5j1F2mnradPmt1VAMAR8tkV9M5KSRF2FwLEQ2JDdXPrjj9q7+1j
8ANSX4G7ivsaA0AyeXwtdDsgfUUikeLquoHQiHGjCr0Fzgr6gRE3R3Pby5eu
qSbLsiWnpkGa3iFqdfuv7/FTbWpmlmEPOEziPnAGRsf0L8py8irG0SOZQZID
91tBWpuZn891VhrvS9je2yfR9+OrWbmlZb527iCAeMgpWC+/nV0gp+O9467R
J06P/HosO/sC3e39d+OvEkgxcR84HxQ6Grr7ZUH+lWULS8TRtrC0LJlhhs4x
pL/AQNB5uylqo0Tfrc/7gRkPjINSJ27jFn0SV8lWNTlTq6yr4678lqO5Lca+
3zyXe35xyaKnACRf3AeOJr9O+oV1JC1IZrC7CsAEkUhE3s89g0N6i2Td9t7P
hvToqc+YCAIHJedx49lZnbV115Y+iestxvN+LOl3fPphcXWdZeUD9kjkwNl6
HJIZ+QCLdAcHJS0w5gGHxsLSck55xezCgnHj9kmAk1wVDodPnB45WaszuD5T
65O47qdSu6nlWNKvtzPAsAccYgc9cNSYYTsrxqEmCUFygqQFuwsBzNQ/HHLU
3dZ/022f80GSMLNAIBZyLpaTtV7VJ3HjWTvBvl95o8rnsHG8OpDuEjlw5JBh
wAOsIx+5JbX1khPsLgQwn9vb7O/t16vbO3u5CA4xMl66bvwCd+vxOV2a8Zy+
ffjivul3dGKyrD6ma+iANBL3gaPHS0gjBsN0kg0kIdhdBWCJ5dXVXGelnj11
dn5eB2DV8cu1bzBX3NenN/g7uoODptcDpAUmdkAyTc3MSjaQhGB3IYBVhkbD
hZ6ajc1NtSpxVzXGPMAK8Z3E5f3JsAccZaRfJI183koqkGxgdyGAteru+Fu6
evQq050h1YTCY65Gr91VAMDh5wt0SyqwuwrAcmuPHuW53OGpKbsLAXYmH8Vc
fAEAu/GGBj5ucP60+Mqxyyf/8txb8bVnMk+/VJL1cm7GwCRf/uJIGJ2YzK/0
rK9v2F0IEG1jczO7zLW6tmZ3IQCQcmZXln5RcUOC63mfuyrY9WBuem1jPY62
/Gite+JBYVfLiaqib1x6L6e9UQ+JBA4xb2egvq3d7iqAaEOjYYY9AMB2XeP3
n854/3hF/vTyQnyhd8cmMfgHN879w81LEontfoqAtdbXNwo9NSNj43YXAvwR
j68lOHLf7ioAILVITP2762cuN9eYmHuNXcEvlWadri+3+1kClpt4OJPrrOQr
ZqQO+aMsu8zFmBwAiPK7xornizIkplqRfqU9mJs+dvlk24Mhu58oYLm2nr7q
5la7qwB+Lzhy3+NrsbsKAEgtC2srT118NzQzaVH0VS2/0/diSabdzxWwXCQS
Ka6uGwiN2F0I8Bm3t5lhDwAQpeX+4A9unLM0+kq793Di2OWTdj9XIBlm5udz
nZXcWQC2W11byy5zcd0xAETJ6/C+V11kdfqVJun3/ty03U8XSIbAQNB5u8nu
KnDU9Q+HmHQdQForcFZk3Squb2ktr61Xy6bs9kLe5byOpiSk3x/fuszQXxwR
kUhE0m/PIG942MnV6A1xx20A2OZEVVFxz50kpN/nizJIvzg6FpaWc8orZhcW
7C4ER9Ty6irDHgCku/bevu2r9S2t53NyZfk3lzLi223f9Du3utw/Oarb4PQ4
6ReIRf9wyFF3OxKJ2F0IjqLu4GCDv8PuKgDAEpJjJdnGvdu+6ffJs28+8fK3
jK1huJ/0C8TC7W329/bbXQWOorL6htGJSburAICE7NipKyTT1re06vG9B91t
3/T7nz9+/c9e/95ffPhz/+g91f1L3y8Qo+XV1Vxn5fTcnN2F4GhZWlnJKa/g
ewcA6W7Hy9lkdeTxRQ2yEN9uP827tG/f748KP/m3b//DV88cT+Q+yKRfHE1D
o+FCTw3DL5FMgYEgwx4AYDexjHx4zZXbEQ4lGIBJvziy6u74W7p67K4CR0hx
dd349EO7qwCAfUQiEX9vX7bDJU1OlIl/Y7WwtNwzOLTvlPsxpl9ZSDAAk35x
ZK2urV1zOLNKy806uoE9zC8u5bncdlcBAPuT6JtZWpZRVCpNzpK+QHfijzk0
Gr5S7Cirb5AYLOffHffZN/3+qPDS5ZZqtZxIACb94siSo/tqiclHN7Cb9v67
vMcApIVsh0udHFWTc6W/tz/xVt1yRz9mvrvK7W1p7eox7vBK0bUDzfcbdwAm
/eLIijq6s0qddleEw+xWVS3DHgCkBYvSb2Wj19z0G3cAJv3iyCL9Immm5+YK
3FV2VwEAMWnp6tEjHzJLyhr87Yk/Zndw8Eqxw9Xo7R8OxT3yIcYA/NTFEzcD
zaRfYDsrjm5gR209fdLsrgIAYhKJRHydXVmlTmlyckz8upjpubk9Qq8W952O
owLwV0785IKvivQLbGf60Q3spsBdxfzSALC3uNNvVAAm/QKAvaZmZhn2AAD7
SiT9GgPwl9/9R9IvANjIF+hu779rdxUAkOriTr9zq8sVdzulfdJc/aVf/vCL
b3yf9AsANspzuecXl+yuAgBSXdzp99XynCde/pZuf/LqdzzBLtIvANhifPph
cXWd3VUAQBpIcORD7I30CwDW8XYGGPYAALEg/QJAuotEIjnlFfve2h4AIE7W
lOR1NCUh/f741mXSLwBYYXRisqy+we4qACA95HV436suSkL6PXb55P25abuf
LgAcQg3+ju7goN1VAMDO3s4uePnSNWmyEMv+jua2T5we6+rpCId+cOOc1dH3
3sMJSb/WPQsgpahjXNoHhQ5ZHRgdMx7vUatAgjY2Nxn2ACBl5dQ0SFPLMcZa
q9Pv8qO1py6+G5qZtDT95nf6XizJtO5ZAKlDDlg5bNWyOuSJu7BUKDzmavTa
XQUA7GzHKNvQ3a+6idSP9Ko6XepfkXOo2q7zs1kut9Q8X5QhMdii6Ptgbvrp
jPe7xu+bWzaQmox/5Co6/cqxLAt6Vf6VLbF/EwTsqO6Ov384ZHcVALArSbP6
W1G1RZ0NZeGDQodEX72qepBU+pXt6itUtZvawSwbm5vP3jh/ubnGiugrofql
0qzfNVaYWDCQ4vTfqirWqrir+4SN6Vdt2R6YgRjJB3h2mWt1bc3uQgBgf3IG
VIE2qttH9/1K0+nXmJnVdnOLuTs19kzm6dddeROLcyZGX394+O/zfvdiSaYs
m1swkBbkcJbjVw52lYRVxDWmX/WXrNrN5lqRnoZGwwx7AJDKJO7q4GpMv8bO
Xh2Gd+v7tcjC2sqJqqKnM94/Veco7GrpnngQmpmMr7U+uJfjb5QsfezyyYKA
z9KygVQjh7AcsGpZp19j3KXvFyby+FqCI4wrA5DS9JwPeuRD1LhfSbn6anE5
IW4f9ytNn1tN1/Zg6Epr3WvO3G9n//ab1z6Kr30v7+w7nsK8Dm94fsaiOoFU
pg9V48iHrc8PdmP6Vcc7434Rn/X1jewyl/xrdyEAAAD709/7APEJjtz3+Frs
rgIAACAmpF8kyO1tZtgDAAAAjoLVtbXsMtfG5qbdhQAAfo/L2AHAOv3Dobo7
frurAIBDTl+pt8d2PT1FTk1D1JXvSagQANLLxOJcTnvjLypufDv7t3957q34
2lMX332u4OLp+nL3QMDuJwQAh8qB0q+eok3NVkH6BYAoZX3+Y5dPHq/Iz+to
6hwbWVhbiW9ydYnQtfd6LjfXfOf6mZ8WX2G+HQDYjfHOGmqLnpAtalX14qrt
aup+4zRN+6Zf+n4BwGhjc/M1Z+4zmaebQndNvMeQ5OdTdY5vXHqvYdiqiTEB
IK2p+2ioZcm0esp9NcmwXtWBVqVcfaG67KZ22J5+5V/j7P2kXwAwymlv/M71
M9PLC1bcYt7R2/Z0xvuzK0t2P0sASDm6F1fNwG8Mw4ru+zWmX+M9l7ffrFkF
XeOg3y3SLwAYDM9MfePSe/7wsBXRV7XjFfm/qLhh9xMFgNSlenGjOnt1GN6t
71cz3sFZRd+o+zKTfgFAO1FVdPp2mXXRV9r08sKxyycHpyfsfq4AkFr0XZV3
HPcrgVZ38Kre3ahxv8Zr2Yy9wbID6RcAdvPsjfPmDvfdsb3iyC7rY0o0AAAA
2Ely6dcuvGPRiF9jO+9zf9zgtPvpAgAAID209/b95lLGSHjsfE6uXk58txNZ
V/73ld9YHX2lFffcebEk0/r/TwAAAMCu2h4M/c21j5KTfp8vvmL30wUAAEB6
aO/tM66OhMdUp+5vLmXIj87n5Na3tMaxWyzpNzQz2T85qtvc6jLpFwAAAHZR
gxzi223f9OsJdv2LV779xMvf0u1b2b8l/QIAAMBSu3XqltfW17e06vG9B91t
3/R7wVf1xTe+/2evfS/bf1v1/cZ3iRzpFwAAALHb7XI2ibVbj1OuCrQH3e2t
zE+fyTy9d/r9yomf/GPRp198/fueYBfjfgEAAJC+Yun7lfQrCwkGYNIvAAAA
jCKRiL+3L9vhktbS1SOrCT5a39Dw+PTDvXeLPf0mGIBJvwAAADCS6JtZWpZR
VCotq7TcF+hO8AGXV1cLPTV5Lrc81G4xeN/0W3uv96mLJ/Rq3AGY9AsAAACj
bIdLRV/VrpaU+Xv7E2zNXd3XyyvUA15zOEvrGm63dRh3uNFUv/e43+0tvgBM
+gUAAICR1ek3u8xVXt/Y2N6ZYPqNLwCTfgEAAGDU0tWjRz5klpQ1+NsTfEA1
8qHAXdXW0zc9N7fjPnHf6y0qABf3tP638++QfgEAABCjSCTi6+zKKnVKk+ib
+FVvwZH7u4VeLZE7HRsDsPHiONIvAAAAUlMi6dcYgEm/AAAASH0Jpl8dgP+5
LJv0CwAAgBSXSPr1jQQr7nZK+19Xf/Ovj/9f0i8AAABSXNzpNzQz+SevfueJ
l7+lm3FaYNIvAAAAUlDiIx9ibKRfAAAA2I70CwAAgKOjd2I0jrtdxJd+XyzJ
tPvpAgAA4EiTXPq1C+9MLy9YnX7P+9wfNzjtfroAAABIKkdz28uXrqkmy7H8
ytvZBQOjY9aV9OyN802hu1an31cc2a7+DuueBQAAAFKQhF69HGOstTr9nqwp
OX27zNLoO728cOzyyeGZKeueBQAAAFLQjlFWNqre4KjVhu5+46/oTmNzSwrP
z0g09YeHrUu/xyvyT1QVmVs2AAAA0oIOtzk1DbIq/6oFR3PbJ06PXpXo+0Gh
Y+vz9CvLKgzLv7KbuSUVBHzfuX7GotG/jt62ZzJPL6ytmFszAAAA0ouEWBVl
VazVdDw2pl+9UZosm17MO55Cyai193pMzL2zK0un6hzHLp9suT9oesEAAABI
cZJyjcFV5d6ozl4dhnfr+7VOdbD76Yz3X3FkZ7XdbgrdDc1Mxtf6JsOO3rbT
t8v+5tpHr5blTCzOWVo2AAAAUpZxzgcVerf+eNyv3kHirorK28f9qlRshdmV
pYKA71Sd47mCi9+89lHcTULvJ81V3tCARXUCAAAAAAAAAAAAAAAAAAAAMIsV
c1MAAAAAyaGnp4jyidNjvGuzukxPmnFeYpIwAAAA0suB0q9sURtl2Ypb1AEA
AAAHpSdbU0lVwu2Oq6oXV6dfWTXutmP6lY1qojb1K/T9AgAAwF7GmyarsQo6
o0qyNa6qQKvSr7ojs96+tUv6jZqUmPQLAAAA20lG1bfeMIZhRff9qjCs0q9x
ozR1u7od+36ND0X6BQAAQOpQkdXY2VvU2Grs492x71eRLbqnV93NWQ/6NT6+
9U8CAAAA2JXxtss7jvs13ltZ9fFGjftVfcLbt8j+artG+gUAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAACAlPX/AUKKO94=
    "], {{0, 353.25}, {703.5, 0}}, {0, 255},
    ColorFunction->RGBColor,
    ImageResolution->{96., 96.},
    RasterInterpolation->"High"],
   BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSize->Automatic,
  ImageSizeRaw->{703.5, 353.25},
  PlotRange->{{0, 703.5}, {0, 353.25}}]], "Output",
 CellLabel->
  "Out[103]=",ExpressionUUID->"6db2ea6f-5c70-a544-a9e4-a333b28748bc"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{"change", " ", "the", " ", "node", " ", "type"}], "*)"}], 
  "\[IndentingNewLine]", 
  RowBox[{"Grid", "[", 
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"{", 
       RowBox[{"#", ",", 
        RowBox[{"netIm", "@", 
         RowBox[{"MakeNode", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"1", ",", "1"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "True"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"#", ",", 
             RowBox[{"{", 
              RowBox[{"32", ",", "16"}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{"\"\<GELU\>\"", ",", "3"}], "}"}]}], "}"}]}], "]"}]}]}],
        "}"}], "&"}], "/@", 
     RowBox[{"{", 
      RowBox[{
      "\"\<Conv\>\"", ",", "\"\<UNet\>\"", ",", "\"\<ResNet\>\"", ",", 
       "\"\<DenseNet\>\"", ",", "\"\<Inception\>\"", ",", "\"\<U2Net\>\""}], 
      "}"}]}], ",", 
    RowBox[{"Alignment", "->", 
     RowBox[{"{", 
      RowBox[{"Left", ",", "Top"}], "}"}]}]}], "]"}]}]], "Input",ExpressionUUI\
D->"bd28354a-3ab2-d944-ac9b-6d7c195ecb13"],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1:eJzs3XtwW+d9/3nNbtvd/NHZzc52OzvJpt3VjH/TJPvrZNzf+LftjJumm6re
utU4buJLbKu2VGuU6GcrimLFbSwnpuxYpizr4jCmFF0giwQpiRTvF1AkBYHg
DYTIQ0oEwavEi3gRKYoXkAJJkftEz0/ndwKQIHAAkDjA+zXPcM7lweFX5wH4
x0cPnvN/vvbmd17/7zZs2PDj/1H8+M6re/9m9+5X3372fxY7333jxzu2v/Gv
2556Y8+/bv/X3f/5tf9eHPzT39+w4T/9Dxs2/HZ7CQAAAAAAAACwfmw224ZH
Nm7cuN7lAAAAAAAAAEBCkNms+LnehQAAAAAAAABAYtm0adOBAwf8j+/YsUOd
UtvV1bX0MMgVndXjZrNZHBSv1U643fHQmhUPAAAAAAAAAMa1ceNG/6mz2tBV
3ZbzbGWWazabN23aJDuo+a3PNgAAAAAAAAAggGXj2U2bNsnJsZIMXUU3NbPV
bh94aOlhZsvUWQAAAAAAAAAI0rKLG4QUz4pTclu8ijVsAQAAAAAAACBIZrPZ
/9FgBw4cUNcu0C5usGw8u/QomNUeQbQtTHumW9tG8osHMy7qaCM5BZNKi7gI
RU55Z5sHey80151usOpoGUpNQ3+3uEhUiwQAAAAAAEC8kgmtpEasmzZtUg/K
IwHiWbksrXbCLaJnwnHNtXOP8s8vu3/005uHPr11JEVHEy8ULxcXcf3gR2Pl
1sQssvpW+yuZKX974v2tF1OTyi99UJGjo4kXipeLi3zf/Ktid1PEiwQAAAAA
AAAQCxamPb3HPru+Zfv4VfvC9PQDrzfMJi4yUd/Q+vob3e8nz42OJU6RU97Z
DyvzNps+vtzRIra9C/NhNnER+033c+nH3i7OGJmeiEiRAAAAAAAAAGJH5ztJ
3R8c9N4ZDT/z1Lb5iYlbx1JdO/cszs0lSJG78s/+W0nmyPRE+MGstt2b9Ry4
kvdKZorYDr9IAAAAAAAAADHiTmGp64c/jsh81GVbx8/eGziTlghFZl+vfzkz
JSKTZpdtb+aZfl1TFmaRAAAAAAAAAGLE3OhYy0vbpq63Rin2FG22f0D8Ck9n
V3wXOTI98fTp5KbBW1HKZkXrHb8jfkXbyG3dRQIAAAAAAACIHXcKS7v2fxS9
2FO2vs9OhjM31RBFZl+v/2mROXrZrGyHbEVMoAUAAAAAAADiQ++vTgyaL0Y7
+Ry7XNn17gfxXWSyteC0wxrteLaorfHHBed0FwkAAAAAAAAgdrS9+da9mvpl
48qhgYFOt1ttXo9Hd/Lp6exufuG1aBQZwRZmka9e+Oxqjyva8az7zuBTpw7o
LhIAAAAAAACADsczzpdcrcouLVPa3HI7It2annlxtn9gmaxyctJsNudculRm
scjW3dGhO/kUv0L8IvW3i9o+OWXqGxwSZajb/kWqp1YqMrItzCK/mZrUO34n
2vGs+BXiF+kuMiLdAAAAAAAAAETESsnn5Ph4enq6Z3JybmZGbKtN7IaffEaq
yKjGs6HSF89eys0JJ54FAAAAAAAAsAaUNrf/bnZpmWglV6vScvP1dQscz4qN
ivLydI0qm0138ikn9FY1OH2K7BscUmdpfnLK5N9tLeNZ3UVGPJ4dnpn6mePy
hHfWP57VXaTubgAAAAAAAAD8yTUKdHdbNZ7NzclpUZSIJJ/yK/OrlurfbS3j
Wd1FRjye/afStD8xHxqemfKPZ3UXGU43AAAAAAAAIGEtOy22b3AoLTdfzozV
1y3w2rMynh0cGLiTV1T3+JNqa35ui47ks6rBKZczDTBLU1To3y1wPHvXVu3a
uUe0zn37b33y6VSrSz0ljrj3/PuCZ0bdFR2iVGRk49kPrln/8PR+x0j/sosb
6C5SdzcAAAAAAAAgkS37zC81bq1qcOrrFiD5vHvnjhrPunbusf7xRm3r7Ojw
b6JngORz6WHiJwoL8AgqWapPt8Dx7OC5DFGP81v/0PDk38vabp9Jk6fqHn9S
7IoO6m7T5ucDx7O6i4xgPFtwq+0Lp94zua8FWHtWX5G6uwEAAAAAAAAInndu
Lphuq64bsFI8qyjKwYMHy8vLz5w5k5mZWVBQkJKS4mptDZx8RqNIGc+OWavk
L7J95avOb/2DmsfaH/uG4y+/HVI8q6/ISMWzvVPjX047+OqV7GX7r/RosCCL
BAAAAAAAAOBvcXGxqc1tLrKI1nDDJXbDvODw2N3LtfWtXd2e2dkA3VaNZwd6
eyfHx5eNZ1NTU61Wa2ZmZl5ensViMZlMocazESlSG896R+7YvvLV1h271Dy2
+cWt4sidvCLd8WyQRUYknvXMef867+SfX/zV2KwnpHg2yCJDEvH3JAAAAAAA
ABCbmtrc5wqLTXmFoqUVltRfbw3/msNjd9OKSsQFLTV17bd673u9y/ze4J66
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
GG6GO0wR/xMEAAAAAACAVYWU1xUUFKSkpNTW1iYlJSmKcvDgwfLy8jNnzmRm
ZspTOp4VFX6RMq9TW+2f/+WdvCJ5SpvXDZkv6svrgqQvrzNdyJRhXcvoUDD9
AzwrKvw7yXAHzxDDDQAAAAAAgBgXUl5nsVhMJlNdXd3Ro0cVRUlNTbVarZmZ
mXl5efLUuuR14tSYtUq2aXfHgmdGPTVeUz9xTZHb4rjooO6uTV5nG7xZM9w7
NuvxT948c960jqb/7SfbvnbxmOvuSJD53lrGswx3AIYYbgAAAAAAAMS4kPK6
ysrKrKwsh8NhMpkURTGbzXa7vaCgwGKxyFPrktdFqkU2r7uUmyPaF3a9/Htv
vCja/7rntf+4b9f/+8t/25z88xc+ef/J93/6v/z41T948/t/8S/Pp2ddlJ0D
tHWJZxnuAAwx3AAAAAAAAIhxIeV1WVlZycnJdrt99+7diqLs27fPYrGkpKSY
TCZ5irzOfwKk6+7I5f7O1FbHT+st372c+a2C06L9U2naR022jnt3tFlcrM2e
ZbgDMMRwAwAAAAAAIMYFH4WNj466WlsDt67OTvK6kFrMxrMMd2CGGG4AAAAA
AADEOENEYYYoUl9eF2pbs3iW4Q7MEMMNAAAAAACAGHf91R9MudqiHYXN3OpT
/vnl+C7yO59/0jLUF+28rufuyN+eeD++76QhijTEcAMAAAAAACDG9Xx4aCSv
KNpR2HhVjXv32/Fd5M9Kz19oro12XlfZdWPbxePxfScNUaQhhhsAAAAAAAA+
qlvbD+cU6XtthrW68/ZQZOsZySm4dSw12lHY7c/N/SfOxHeRGUrNgSt50c7r
jteXH6kqie87aYgiDTHcARQ5GveeSpdNbMsjJ0srtB20uwAAAAAAAPEhnHh2
vzk74vGsp7Pr+pbt3juj0cvBFqanXT/88b3quvgusm3k9mbTxyPTE9EL66a8
sy9nplzpao3vO2mIIg0x3AHsPZWubss/LOSxAAAAAAAgEajxrPgpmpy91nl7
SDSxu9+cLXZlSCJ+yllt4iViO8NaLTtHvKT+E2e6PzwUvSis/+TZ7veTE6HI
I1Ul71guRC+v+7S69O3ijES4k4Yo0hDDvRL//+tR41lxSv7xET/9/y4BAAAA
AAAYmjaelelrhrVarlogc1p5Skay2nh2KTqzZ4UHs7Ot29+M0mqf41U117ds
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
4v77dwscz87dHfd0dcu24JnRnpq51SuadjfAdYhnAQAAAAAAgGWt9JQuuQrB
0sNkdc26xZOVks+5mZkqm02NZ9t27bX+8Ua1Xf3SYxPj4/7tvscTOPmUoWuA
R4Opy0pouwWOZwfPZWhra9r8vNq57vEnxZGJa4q6K84SzwIAAAAAAACIBauu
GyDjWdfOPdoIVDRFUWw2m9PprK2traurczgcdrvd3dYWjeQzmHh2+MKl8Zr6
ng8Pie2WV17XxrOtO3YRzwIAAAAAACAki4uLTW1uc5FFtIYbLrG73hUZibhd
1zu7bo/c4b4Ftmo8W1FevlI8u3Xr1ry8vKSkpKNHj5pMpt27d7taW0NKPnv6
B7r6+ufnF8IpUsazY9YquVv9Z3/R9I/fU/PYxqe+c/VLj027O4hnAQAAAAAA
ELymNve5wmJTXqFoaYUl9ddb17sig5m5fz+nwppRUlbd1ExOu5Ign7q1bDzr
L9R4VgzKFYfzXEFxRX1DgJw2mHi2L+XEaGl5x7/9wvaVr45cylfj2euv7rj2
7c1tu/YSzwIAAAAAACB45iKLzGZlO5tfVNWo0EJqVuc19TZ+XlB8qfxKWU3d
ulcVUy3IeLb9rXd+Z+3ZP/2aoii7du0qLCw8ePBgamqq2Wzet29f4Hh2pRqy
yir+65s8r+hCWUVxVY3N2RR8kT5rz7p27vGO3NGuZiA62L7yVXEF4lkAAAAA
AAAEySee/byguLO3jxZSa+7oMBeVyht4sayi0uG83tG17lXFVAsynp27O96V
V+j8PF22a0UliqIUFhbW1dWVl5dbrVa73W6xWALHs8sW0N5z61J5pRwjc7Gl
rKb+mssdUpHq4gbekTujRaUNT/59zdefWPDMqPGs2K5/4m869+13/OW3iWcB
AAAAAAAQjIYbLnVxg7N5hdVNynpXZDD3pqbOl17Ov2JT2jsmpz3rXU6MCjKe
/W0KOjBQUFCQkpJSW1ublJSkKMrBgwfLy8vPnDmTmZkpT4W6uMH8/EJxVfUF
S3n99dbhsbv6ivRZe7Yv5YTYHa+p165mcPtMmv2xb4ht4lkAAAAAAAAEY3Fx
sb7lRlphaVphyfnSspaOzvWuyEjE3Wu/1Usqu6qQ4lmLxWIymerq6o4ePaoo
SmpqqtVqzczMzMvLk6dCjWd7B4cCpLJBFqmNZ2du9TY+9R2x6/MssPnJyZqv
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
eT0eS2lpbk6O2gZ6e3VHYbP9A03PvKj+UqXN/ckpU9/g0PGM8+q2f23qqcbv
bVm2yMi2MIv8uxMfuO8MRjsK6x2/883UpIjfSYY7LofbEEVGpBsAAAAAAIBB
NT3z4mz/wDJzC8fH09PT212uwYEB2cSRSEVhkSoyqnldqL6ZmtQ7fifUaOtS
bk44UVik7iTDHSp9wx1m8rk2Ra7xexIAAAAAACCRBc7rxEZHW1tNdbXaent6
dEdhSpv7eMb5qgan2NDW0Dc4pM6I++SUyb/bWuZ1uouMRhTWMjq0bBQW8TvJ
cK/NcOuLZ+P7Pam7GwAAAAAAQBxYNa/LzcmxlJYqjY2ydbrduqMw+fXkVUvy
77aWeZ3uIiMehf3qRt0fnt7fOzXuH4VF/E4y3Gsz3Pri2fh+T4bTDQAAAAAA
wOiCyesGBwZEn8FzGWq7a6vWEYVVNTjl0pEBZsSVXK3y7xY4r5u7O+7p6pZt
wTOjPTVzq1c07W6A64RZZGSjMMdI/xdOvfees3LZvC7id5LhXpvh1hfPxvd7
Unc3AAAAAACAOLBSFDY3M1Nls6l5XduuvdY/3qi2q196bGJ83L/d93gCRGFL
D9MVpc0d4HE/JVer/LsFzusGz2Voa2va/Lzaue7xJ8WRiWuKuivOBs7rdBcZ
wShsYHpiY8Yn/1Sa5pnzLhuFRfxOMtxrM9z64tn4fk/q7gYAAAAAABAHVv0i
uczrXDv3aDMx0RRFsdlsTqeztra2rq7O4XDY7XZ3W1vgKCwaRcq8bvjCpfGa
+p4PD4ntllde1+Z1rTt2hZTX6RPBKOyfStP+w/kjY7OeAHldNO4kwx08HcP9
Jx++sWHvi/ri2TUrcu3fkwAAAAAAAIls1byuorx8pbxu69ateXl5SUlJR48e
NZlMu3fvdrW2hhSF9fQPdPX1z88vhFOkzOvGrFVyt/rP/qLpH7+nBnSNT33n
6pcem3Z36M7rgiwyUlHYe87KL5x6zzHSH1JeF5E7yXAHX+T6xrPx9J4MyeLi
YlOb21xkEa3hhkvsRvDiAAAAAAAAay/IxzAtm9f5CzWvW1xcvOJwnisorqhv
CJDkBJPX9aWcGC0t7/i3X9i+8tWRS/lqXnf91R3Xvr25bdde3XldkEVGJAor
6Wv/wqn3fnWjLtS8LiJ3kuGO6nBHMJ6Np/dkSJra3OcKi015haKlFZbUX28N
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
cOCAz7xZ/+mvMoCV8azZbBa7ajyrXfxWO1GWeBYAAAAAAABAfPNf3GDp4WoD
6oxW1UrxrCQXQ5Dhqoxn/X+Xuk6CXOVAjWe1+fCyvw4AAAAAAAAA4o82HdWu
XeCfrwaOZ5d+N5UVZ/0DXjWeFac2PbT0MApedmlZNSsGAAAAgNh0Y7g/Q6l5
t+ziK5kpz6cf09G+b/7Vz0rPpzXaGwduRqlIj7tjJKeg56PDrp17Wre/qaO5
fvCjng8PDWflTrW0JnKRhhhuAIDhaNcW0C4hK5cs0D7ba6V4dqUraJcsUCfN
yg25rV29dtkrqMd5NBgAAACAmHJv1vNu2cXvnjuSVH4po6mmtrfD0delo4kX
ipeLizyXfmxX/tnByfEIFjk/Mdnz0eEb23bePPTpcE7BhLNxorFZT3M2ipeL
i7S+/kbnO0ne4ZFEK9IQww0AAAAAAAAkgob+7s2mjw/Ziu7NerwL8xFpM3Pe
3zgqnz6dbGlvjkiRk0rL9S3b+z47OT8x8cDrjUhbmJm5nZbZ8tK2u1eWWaEu
Xos0xHADAAAAAAAAieDerGez6eOrPa5IJXXa1jLU9/Tp5Fvjo2EWOT8xeX3L
9ns19ZHKPLVtytXW8tK2+/0DiVCkIYYbAAAAAAAASBDvll08ZCuKRlgnW1qj
/QeXTi08eBBOkT0fHe777GQ0Yk/ZhrNy2/fuW1xYiPsiDTHcAAAAAAAAQCJo
HLj53XNHIvgld/82M+d9PetEsbtJd5FTLa03tu2M4HIB/m1hZqb9x/8+Vm6N
7yINMdwAAAAAAABAgjjrtEV1LqVspx3WZGuB7iKHzl+K6qxU2QbNF3t/dSK+
izTEcAMAAAAAAAAJ4u3ijJwbDdHO6672uF698JnuIrvfTx4ttkQ7+bxXU9/2
5lvxXaQhhhsAAAAAAABIEE+fTm4dGYh2Xtc7fuebqUnqL1Xa3J+cMvUNDh3P
OK9u+9emnmp8/l+m3R3+WeXC/ft1tbVlFovahm/f1p18zvYPND3zYsSLjGwL
s8i/P/HLtR/uhFLV4BR3W26LQRG3faVuckTScvPl9hp0AwAAAAAAQKz5ZmpS
7/idcLK4ifszV3va6vu6opfXNT3z4mz/gH9WOTk+np6eXltT0+l2yzY6PByp
5DNSRUY1ng1V+MNNPBtAydWqT06ZZDybXVomo/K03Pz1rgsAAAAAAAAxKsy8
rnmw94n/n717j23ruvNF/1eBW1zMHwe4B4PBDFrcU6AH05NzB0ULBJheZGYy
tz3oY8a3adO0nbSZNm6K9DqdNM20Teu4jp2kbuzYsZ048VuyLUumrDff4kMU
36QocpMUKb70ICVRpEhRJEVJlCj5rni1O4weFEVualPS94MFYZPcon7Wlvfj
y7XXevfVH7de/trNt8jX0nkdM+y70iIo7l5IRaLTbJ9Pmm6tW610PEsWYlNT
jN3Otsr60NLkk/MiaxHPVlxkZZu7o6uzVD6fX0Q8S5Hfs7Rfx8azTV09bEdW
sl1oB1e6XdZtOPYht6sBAAAAAAAAAECdqyaedUbDj31wgv3259qukmdKxLP0
BvxtS9q42rbxbE93d3tbm9FgoM3tdFacfHJeZC3i2YqL5DyeVUwEP918djSd
RDxLsfEs2422uPfsVqNPrMPtagAAAAAAAAAAULeqiWcfv/JG8fdetajfNylK
xLPsCJkl+nxK+3UbV9s2nu3q7IyMjRVyC0mNjm07HQmWJp+cF1mLeLbiIrmN
Z0fTyb9pOvMDdRt6z7LYeJZNZdtlvewC2SJXWgQbN1zxQ25XAwAAAAAAAACA
elZZXjeSjFkioV8Ib1+1qOm355aXHr/yRiybLhHPPniYH9J7sbea0Erar9u4
2lbJZz6Xk8tkNJ6NTk6GXjul+cvPsE33fz6yOD+/sa0sLpZIPjkvkrbonRZa
leFvv2j9+y8Hfvva8myKvmT+wmPaT32O/V7y0HHou6Xj2YqL5DCezS3n/6H7
+t/dfy+5mEM8y2LjWZqNk0YWHjzcEHSBvEqXN53Mi9vVAAAAAAAAAACgzlWQ
19ExDfwzU49fecMw7idfc8tLT9w+945WstW31GhqMLbReNZ75OXieJY0ZjMB
v7908lmLImk8G3rt1MSVm+4fPU+WSbVsHkseBn772o7i2cpwGM++bJL+l8Y3
A3ObvNtBjmcBAAAAAAAAAADKt9O8jqz8pUvH6bcc7227alF/p+mCfsx/RiMq
/V2b5nXRRCIzn9u2yG3jWblMtlU8++yzz3Z3d588efLChQuNjY0vvfSS1+PZ
UfLJSZE0nk1qdGS5kFvQf/bztse/zuax1r//svZTn1uKTlccz5ZZJFfxbFPA
8YlrxztHPbVI4w+UMjccAAAAAAAAAADsSzvK63LLS/8pvtvjtXlik/SZyfTs
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
t5vmdQtLS50qjURn8IRGSoRU28az2bm5xWx203hWJBKZzWalUqnRaPR6vVwu
32k8y0mRxfFsUtlHlsdOn2fj2aGfvGB85NHRU2crjmfLLJKTeDacTf3Vnbd+
1Ne+080NG5W54QAAKsb4A2Ktnlzz8l0IfIiOQUS+shOBsYZCI43douzCAh91
wUFhcDjtXoxRD/WLnBLj80QAADiAys/rnNHwUbng+c4bZOFLl457YpP5h2Ma
bDUd2Ma8LhiObGyekdFWmZJcj5DWoVT32wbJQXndOmXOurVpPHvmzBmlUtnQ
0HDv3j2hUHjp0qXS8WyNiqTxrPGRR/Wf/TxZ8L38O/YlmseOnT5PXl3JZMqJ
Zysusvp4Nrecf7Tj8hfa30/nFyvY3GiVbbh91qKJBGnZ3AISaYBaI//XWuXK
haUlvguBD22cyZENad3BEDkKCGQKPuqCA4TsE9qVar6rANhSfnm5RdqLU0QA
ADhoyszr/DNTf/fOb5zRcI/X9sTtc8bxwHNtV19XdpzRiMrJ9/40NZid2bT1
9GlpNkVai0Teo9FqbY7iFcqMZ7Mer/vY6+aXf0vbwPn3GIa5fPmyRqO5d+9e
d3e3XC5vbGwsHc/WqEgaz0YuXZ3pFgePvW742y86n3qmOJ7Nx2f0n/08WaGc
eLbiIquPZ5/Xdv/Vnbe8s/GKNzdaBRtunzWZ3iTRGdoUqla58laPmPzzDQ6n
b2w8mU6jgx8Ah1ZWCuQ/WmQ6xnch8CF27k4Wm9Za3B56COi32Xe9LjhwyMEX
N49DPRsY8pK9It9VAAAA7Koy87qv3XyLjjdL2lWL2hub/OG9S7QDbfnx7KYF
eB7eyteuVDP+QGY+t+k6ZcazH6agk5Nqtbqtrc1qtTY2NjIM09zcrNfrhUKh
XC6nL+10cANOiiwe3IC08XPvkocZp7t4NIPRU2ctj/4TWa5sarByiqwynr3g
Mn7yxonOUU/Fmxs2KmfD7W+pTMY/HjY4nF3q/hZpr9nlxrQ4AJwwMi4dbhGt
G7oBW/HDuUyGtLW1NY3NTo4Ct3rE5Cs5IvBVHhwcFrcH2RfUs4WlJXJCmF9e
5rsQAAAA7hVWV+ey2YlY3DsyNjDkVVkGutT9TWLptnmdJzZJ2qPvvtrhtpJG
n3yu7Sq7XE08G5mO2b2+bT/B31E829bWdvr0ab1e/9JLLzEMc+zYMblcfunS
pcbGRvrSTuNZTopcF88O/eQF8jA9yBTHs+TbtZ/6nPGRRyuIZ8ssspp49l7Q
+ckbJ94bMleTxsM6ZW64gyObW3AM+9sUqp4+rSc0gjNzgIqR3UurXIn/RPWD
5rFsH1qysLa25hsbJ20oNNKp1jR2i2LJWX6LhIOA/JmRnQPfVQCUorMz5ISQ
7yoAAACqks0tTMVn/ONhm2dYY7OLtXqBTHGrR9yuVMuNZiPjcgWCY1PRZDpN
rtpK53XOaPjv3vnNSDL2+JU3wqkE+UqWX+huKHNMA67yuh3Fs1arVa/X2+12
jUbDMIxWq7XZbCaTyWw205cq6D1bfZE0nnU+9czQT16wPPpPdLmQW1j9+Fxg
gd++Rl6qrPdsOSqOZ2k2+6JBvAubG+DBw8HxtIMOsu8iuzKMeACwU+T43ipX
YliDesMmtLTRJwurq2RjxZKzzRL5ykqB3wrhgGhTqPBZANSzVCZDTgLJ7pHv
QgAAALa3lM8nUnOjE5OMP2BwOOVGMznXauwWkZN8ic6gszPk+VBkgpx9lRhc
vXRe95Vrp+iYBqrQ0Peb3zsqF/QGXO9oJTvN93Yznm1sbHzppZc0Gs23vvUt
hmGeffbZ7u7ukydPXrhwgb7ESzw7qzV4j7zMtuidFprNkhY89vr4uXfZGsir
7MN6iGfT+cWnzr7+iWvHf2PZfg44xLPALbKLI3uznj5tNJHguxaAvcTi9mBY
g3oTiU4LVWq67BsZZZ93DPs1D4ecJadtPJQFB5Ld68P4BlDnVJYB78gY31UA
AAA/aGcGcs5sYZx81/IxC0tL8dlUKDJBzqbIObywX9cskTeJpT192j6rzeYZ
9o2NT8TimfncTruZlcjrBqfGnu+8sS6t9c9M7TSb3eV4ltkOL/EsV43beLaj
q5O0R179+aMnXv5fp47+6MIfX7n23rt3b19paSLt/N3Gwxff+utfP/e/HXr8
5x+8Q1cu0RDPQo2MTky2KVQDQ150owUoBzkZaJH2kjMHvguBjyFnmA1tHQKR
pHgQWrKZyBldNrfw4OHH7vxVBwdLMp0mewkcVaGeRROJdqUaf6UAAAcNM+wr
7smwcXbdXVNYXU1lMmNTUVcgqB100CSWNLKgsdntXh/tEMvVZVf58WwFYxrw
Es82NzcfO3ZMq9U+++yzDMO8+OKLIpHozJkzly9fpi8hnl23dX4/oDyiF35N
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
F9zBELkK5rsKgG0EwxGFycJ3FQAfSqTmutT9Za68VijEO4XkeodcQGW9w4X5
+WpyzsLCwrwvMC1oJ9di0Zb75M2r+YfMZTI8xrOpTIZcuZPT11aZgsazd0RS
s2toeXll3Zqb9p59c1BzRC/8muT2F9rf/4ubH3aUZdunm8++aBDfbG3ZUYdb
xLOwPxRWV5vE0syf05V1YzuXOagIQPWS6TQ5VqosA0v5fPHzgcT0D+9d+o/u
xgpGrdmqxefTr8pbn7xzfmCCmzxkYWTMe+TlwNETHB4i8zOJkVNnhw4fyXB0
5bUnitwTmxuAW3T64JWVqs7SgVvSfl0kOt3U1UMnCGOfj8+mBDIFNhbUidzi
Itl7oOM91DnyJ0r2nORUn+9CAD78QNxbdufV8MUP/L/83bwvwHngSa7IQr9/
s4L6LYyTnJbQe3xKx7Ok7OidFtqSyr7l2RT7UryjZ7r5fvHDhExZOp4lZz5T
8RnGH1CYLM0SeadKQ36TvrFxucHU2C3SDjrWXcKzyhncYDSdtMYntNExssB2
skU8CwcT+Z9F/qPRZfKffV1Cu2nXEYBaKKyuml3uVrmSvd9kYTn/3bsXb9m0
XCV1xU08bP/GzdPV3/m+urjo+el/TAvaa/F5ZVKhdj19uPoxBPZEkXticwNw
zu71kV0f31XAx7CRLLkC0g18NEKdWKvHEMFQVyQ6w47u0gXgBR2Lku8q4KBb
yufL/4w1bR0cOnykONXksBUWFny/+M2MSLbpj6bjTG76UvHgk6Xj2eidFs1f
fsb4yKO6//Y/yYL2U5+b6RbTl8xfeIw8U/zQcei7pePZJrFUpjfZPMPh6DSb
xEamY13q/tJj7FQ8NRjiWTiYyEld8fgGxb1EyG7Bwjj5KAoOLjpfmMXtKayu
ntdJfyNurkVYR9tZrfgVSUuVBU9cbQi9/lYtDty0RT64PvLG6YNQ5J7Y3ADc
otMHbzv4NtSDUGQCE9xAvfGERgwOnKtDvVtZKbRIezOcDocFsFPuYKjMD8QL
87mhw0fmjJbaXT3N+wKupw/nY3H6E30jo5HoNL15mXwtjmFpPkP7zRbHtuXE
s0mNjiynjJb+v/6s/atPsHms9lOfYyPZcuLZjbdpkGfIedG2t2985dofgolY
7a7vEM/CPkP+T5HDJXu/CdkVkP/4G7vRAuyapXxeabZelYq/fuOtyT/f41CL
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
gvGRRyOXrlYcz5ZZJCfx7OR8+tPNZ59U3KvR5t4Rx7DvjkhCB4xqEkkxsjdQ
S/k8Oc7ml5f5LgRKSWUy2ExQGhvPssFpce9ZslzObFzcrhaOTsuN5uIKBSKJ
ymjCvGBQh3xj48V/rgC1YHa5K/uktczkc9NLPK1Wa7PZTCYTudCzWq3kKm+n
l3jcFnkQ4tkHD6/mBDLF6MQk34UAcKmnTxvGDblQB8rP68hq72glz7VddU6H
v3TpuH9mijz5urLjqFxQzveSHxRNJDa2sWj0fq+qsVt0RyQhJ5BOf2ByZmbd
OtUcu8+cOaNUKhsaGu7duycUCi9dulT62F2jImk8a3zkUdLIgu/l37Fjz9I8
dvTUWbJAniwnnq24yOrj2dxy/muS259pOZdc3DKTr3Jz76g1iaTseP4PE1oZ
3/+loC64AkFyscB3FbANTCwO2yruPUu7sJIFGs+Sh+Slpq4e2p92q/6u3K72
4GGHK3JxmltcZJ+Zy2Qa2joEIgmmsIR6Q/9ck+k034XAvrWyUmiWyLO5hQq+
t8xLvHXTi+i++A/kEu/ZZ5/t7u4+efLkhQsXGhsbX3rppRrFs0OHj2QYV63j
2YXxCPPtH1RcZMWCU9PvdIp39C2pTIZs8VhytkYlAew+xh/QDjr4rgKg3HiW
jjerCg11uK0/br1MFp7vvPG+6f9n791j27iu/d8/LnqBArd/9OKe+0NxDnpw
T4EctL8eFEUKBLf9Iec059f8TnrSBm2apE2T+DRx7ZvWSZzEaZqX4/hVx3Yc
v2NbtmTZkvWyZD0oUqT4EEWKEklRJEWKFEmRkkhJFKkHRVKkRD3vincznZAS
NRzO8CGtDzaEmeGe4ZJmtNde39l7bWn6nAZJep24q2fDUt+uoOS12y2iunZ5
m/pLFRj67qjNbj14VHvgXVL0x06C77569apSqaypqQEPLpFIwH2n9908GUnk
WfdHJ8avlw/uf1v9T/9ie3k/XZ5NBKdU3/wOVGMiz7I2Mnt59s86ydfLjxun
J/i73RmVWy1ClGeRJNbW1uoksrloNN+GIOnwTQYa5UqcSYSkh5Jn1+8v1wWl
sqmF7FKjVYmgutliXtxWIyTlTiF5ceciEYdnmOs/AIJkC0SdHfqNl8BDkOyx
e0ZYr+/JfGCqf3x8wyVF6PAkzw6fPBtoFPAtz4bU3c4D7zO3Sqg33hDL6UeO
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
tP5FsheduT91dbAhrw+e7ZEJ/+rCgm3va5O1DXxETzNSheW53UvTMxn9jhBN
QPhAz6VGBRpUjjVSE4IRqholz5LAZP1+DEK/GmxQ9UkUAz+hMjmy/aIVaGGg
nYFbnG9DECRjvP5JXEYTyQay8heVyYfuGVPjguGxcXCI9DyNJxTNexpKbMFx
bsU6CLdfay5/U1DBye/ovXDF+eZ78w4Xt457YWzc9f5h94fHd46RRXG7twT6
M9CTIdlooRdEejWUPEu9v4aez86cWLRzAAeKCYJ4hXN5tt5j/Xr58eHwTKo8
C515m9sj7uqpEkmUBqPbN8atKIEgfGAdcnebLWQ7dcQsJqFFsgHaQK3FCv12
aBs5zOVoGnRSDy2CMEem1UMgueFHJHFBUouXuk4iPMbwSDfIFNTI8LhnxL7v
AEQ6EO9wFTolpqY9J84M7N4Xyfw5h8CBiiOIEkvkWTJND3Yh6DjbKKSHG2RY
CDWVb/3+YFoyBJfIs9RZpD45HYIUciR15O32IDgbqhVLcdITUnSsrK5WCtvw
JSbCmtTZcxuO1oAnjaxwnTQnBY5Xm7sfK/34s552y6QvmljIRqaLLyVswfFb
BtXjZafKepVwcU5+x7WVlWCjoP83L47frIzaB1fm57McjDrvcE3WNlie2+2v
vgsX3zlGFsXtTgV6NfSuCyXP0vVYHD27A5H26LbNq/lIn2my9t7wiTP2P7xu
2/sau+I5dsp/pzas7+OkxYA4i1t51j4b/Hr58QM9banvd+CL6iQycFITwSn+
WhIE4ZzYwkJ1WzslnSWpEzh6FsmeuWgUnF1Lh4qrqSKJpSV4aOOLi5xcDdkh
RGPxWrF0QwdNX/ArKYkBHXjkxF09Mq0+KXX82tIShE4Q77jeOTR2rWxaJJkW
y9gUkQROh4tALOa9cGWFlbpChrmSbUqGpX6S42RkCD0HAok+4Dg1vy9pFWP6
AsfUYFrqi7alPLt+fxAFdO2gBcu3IQiSGWqj2ex05dsKpFhJHZvh8HiSDk6H
5uqlCrmud7PBSKOh6cPSht9WXfr3kmPP3LkA5amKc89UnifbzMuj1/8CJ37Y
ftc1zf2IkcWx8ZFPLtj/8Lr5V8/b9rzKupif3jWwe9/wybNxz8jONDL1drMr
vN7uJOgdG3pyg/X7o2ShB0VXazH37E4A+nvQ69sGi8MmAsGhD47Af73vaikE
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
5CAUUrNaqaGqUYEJxCNkg8zpo64GG1R9ks0VfkJlckRj+5INSN6JLy7WS+Wo
0CIFQu+Y54nyT86ohHMLsUzjnc1KfClxXa94vOyUxNm/tQUMiJgt1l17fVdu
cJgTbyUen6isgWh0lqM+QFEYydPtLtEpHrt+gn67E0tLHXpDk6IzfZrZLd3i
+zerie6RR7dYFL4bjcReEJIvtBYr65U0l6ZnEoEgu8LtbwGYfvHswth4buRZ
CKBIDKXuNfj8k0wWlJ8Jh52jXtby7Pt66VdLD9cM9TOpj/Issg1YXl6pEkno
4hgRMVCbRXIDPHvdZkuDTBGcZTRiZyw8IxuyXtSI/1hVclBUe0LRnFE5p24T
OUyeGe6dI53FicmQSjN+45b3whUWZazk5oxMuTDq2/qbtruR1O3O9Eb//tZn
e25deutuObndVGK91Ek3E8GpOonMOuSmjkB8Sq8AEQQ1AoTEICQwgSCCxCkQ
RECsQR8oAtXILlWH1F//IjChziL1yekQmJAjqWNOkEIgMh9rlCvNTle+DUF2
OnMLsSfKP+kctnOl1NGLZdL3eNmp0dB0lkYuhyPWXXvnunV8xIlR+6Dlud2L
WU+iKQojc3a7p0Nz9VI5dMm2fGO+pVts7tRcbcqzWywK341GcmUkgmQEdPWr
RJL44iLzU8BfTNyudn94HBp2KLY9r7Io4HH6f/Oi692Pxm9WLk3PcPK75FKe
TfrqtbU1i2tI3NWjNpqNdodjZNQ3GYDAyu0bg11Jt7ZS2NbSoQK3wkKe9UZD
/++Rt5hrsyjPItsGua43Ne+KwzNMpXTOi1XIjsLrn6wVS6ElT5NRVuQwQYTy
WOnH+5rKznWJrusVLMpFjfiNltsQjMClGqw6zn+RGZnyr573nUNj18omKmtY
lLEbt4YOHgPXD5eaahXvTCO5ud1d4v3Nt+B2P1568qykqbb181R79G+xDrnr
JDLoSKSxhAzwINtUAEL9JMdhGwIN+uw/+AjCEzhOzqVSrlGTBGGDGnZCDSOh
vggDk8IEevK4UhiSdz5sv3tGJeRDrCOl0tj1h3ulWU75HD55ltfFSgL1Tc63
D66tZDb1phiNzM3tBm9YJZIwTBuV3i3CkwM9uhM19/LrFovCd6OR2AtC8oLN
7VEaMsiEPKfRQrwzfOpcqLMrPurLxi8s+idD6m7v5RK4IERk2f8ueZRnCeOB
YJ1EWt7cSpVGxeeDGSC8ol72Jcmz95oaofyfb/7u/35r9/c/fP3xkwd/e/b4
gWvnj968BuXtaxf+14n3/4/XX/i7p/7jdEUZqZymoDyLbDNGJvzSnr/pVDpz
P32kOg6jRXLDYiLRoTe0dKhSl5wOzoffEVU/c+dC14iDq3jE5B996e5VDvPs
LU3PeI6dsu15Nazr5coVRq02x+t/5jCFXVEYydPt3lV9+f+7W0LdbugwqPpM
gk71luvTUSM91hmPG4GNToud7FKVSRRDBSb0cSMEHDdSFMCTI9PqoVefaUoW
BOEE4/jIUxXnOJzknlriS4k99SUih4m1kVGLbWD3Pg7TBaSWlXjc+eZ72cS2
RWFkbm737rvXTjTXReZjDK1K7xado956mTLvbrEofDcayZWRCJIRDTJFYGaW
YeWJ29XWXXtD6m5uHUTEbIGIzHvhCgv7zYMOMo4OfuZFnoXoyeuf7B2wi9Sa
SmFbg6yDCLOSbm00Fk81eMPRs43Dtqs2/YGetl9Iqv773QtfLT38leuHoHy9
/Pi/Nt+Aj2ru1WfkzlCeRbYHK6urVSLJYiJBdpOGy5J//HzYhexEhry+WrHU
OuSmhtHC8/mHe6WnOwWchycQklzTyX595wJsZGn22sqK8+2D3sslnAd6n6ew
u11l2/va6lYq4vYwMje3G3oOLR0qtdHMZHgYk6xrZHfDrGsQgJABJNTVqOEl
VH2SZo0EJtQuXIFK1EaNJ0EKAWidVH2mJkUnczUDQbjilkHF61hKUsr0ylNK
AWsjJ2vv8ToqlRR/1V3vpZLtbWTObvfHHRksCpzeLV5taP7odm3e3WJR+G40
EntBSO7xTQaYr2ASc7gsz+3mSf9cmg0N7N43p9Fm+ivQ5Zr08qy/olr5374F
RfPtH+h/+BPXux/Bl5KPtA8+rPrmd6hzYdf0xK83uw6RZ21uT4feUCeRQYEN
2A3MzCaWl+ul8gaZYmzzgTrZLA3GvKA8i2wbINKk1lelFuOjQHkWySWxhQVJ
t1ak1pC3b9Xm7pfv3YgvJXiKSj6Q1J1Tt2Vpc7BR4PzTByvxOE/xnefEmbGS
mzvByBzc7r9IG2vFUrtnJEtTOYc+rQ8pfKBTWiWSeBksi4AgHPKOqLpxoJdv
va5z2P67OjZDegieY6emRRKefA1V5rp1g6/9aXsbWRS3m05wNsThyq1F4RbR
SK4oCiORbYBMq6d0j/SsLS3Z9x0INgt59RHWXXuXw38VW4gOQyWZTMrJBhCV
hi7OMJFn3R+dGL9ebnt5P2zDb0Q+0j74MOy63v2I2t1Snu0dsI9M+JMmHhrt
DrPTlX7ECzt5NtOC8iyybYAAU9L9txc3SfJsasuAIHxjHXJXt7V3D9oeLzs1
NB3gryUPzoefKP9kIJCcfpk5iUDQ8tzu+PAIf747MTUNvjvmYL8mUVEY6Y+E
cnC74Su6hgZZG8kfGJgUHcHZUJ1EBp3VNEmzC4EGcTvZaOtUf1paru41bFjt
WnUtVIDKEBGQ7RxUQzIFWjBbcDzHMQ7cRHhyoHMIt5LaTrWN+sj46/+ad7hS
3cTK4qK2p6ddIqFKYGKCtdNJmmvJlZHcliyN/I+Sv+T+dmeD0mBkqHswoSjc
IhrJFUVhJFLsROZjEGAyTK4+p9E633yPbzfhOX462PjX6SpJqgslw8IGdKjA
KVQ2tcC2wzNM1WEiz84o1WS364HvGx/7JdnWPviw/oc/UX3zO4v+yVVm8mzq
nwg6wFumiQMeK/3YMeUvIl+GIPmFpPGn/rmof3nYgHYAR88ieWEmHP6woeq9
thq+G/OLGjEU1nYGW0SeE2f49t1jN26N37i1vY2s69d+IKkr8NuNIHTii4vS
Hp1Q1RUqVEf5aWk5dObX7ws+RCMlPfx824WwJPshKOHFeOfwoM7n5i/G2Sxa
jIRCd+7c6enuHnI4SJkOBFh7nDQrlWRjJLclSyOLa8QRtIcQTWS5qByCIAh/
6Kw2g43pIA0IaiC04dtNBBoFwyfOkG9MUl3oSQwcnuGLtytJR47ei2MozyaC
U2R77FoZ+Uj74MO2l/frHvrx8P0IkZ08y5A3BRXCQSPfvqzH6/pt1SXWRiJI
QaEx9dvcHrIN//6YchYpBI7K7lUau/huzKUuyytN7Gflj569HKhv4tt3hzq7
XO9+tL2NPCZvLPzbjSCpDI+N10lkRruj0HQJ0rEn8ix06ZNGzzaI26HAQUq/
TT2X82pIlmSp1/X7vQ9d/ODFuqs/LTsJP9PrdWTkMzwwSbcPAkMqNoQnKrVa
enn282h0YsJsNFKF3RhaEi1ybiS3JUsj+cjXF04sbHi7s384TYNO5roHgiBI
jlleXqlua99w7aoNgaAGQhu+3UTEbLG+9EeBXAEtf5rOkry7Bwr0snTmflKT
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
dv7YP/LHYhFkkQWmgfyRnfljkT8CzC4yOxkkRnYcGJOM7UzgrNfTHQfOdOxO
rzcde5yOX3Fsd4/tTjsdd7sfVneppJZaaqnE4kt8iC9JJMUiKbL4EilRJCU+
ig+RLFKkHqw93demFalKJVEkLyl+PzgQ+Lgkf9I9uvecH88951/+9ed/4+tf
/Mi3v/KZv//Ol17/hx/efOe1yXFRXro59tTL3/3l5z7733/stz7/ox9IG59T
rri7B//Cc1wDR8fHUxpdtVaXO5DuqO3vJzNZ0cU2ONZm9cYbCpXCbLX7/OH4
tmjBMqcQMGjEP+akepGh75AXc0kBGCLi1DmjM0gp2UazqVt1iObutWnMA0Db
xdOzHcxpIEt6dmJi4vnnn7dYLE8++aTX633mmWdu37794osvvvrqq9JTpGdP
7Z2/WdM/bVP8X6p3/peJ7/2z1796svzSje8+s6x8a3qyD7tbb3eG49sd/2rA
BbkCobW7Qbmj6AnR407n84HYpuWOZ95onlBpF5Ys0kJj2UKRhcYAeR0dH88Z
TLFkSu5AMOr80RhzSQEYIkqLLb6bbt/1bUQn1YuJdEbGkACg6x47ucG3jbcM
sbu//873O87N9jM9m9ndtdlsWq3W5XLdunXL6/Xevn3bbrfr9XqTySQ9RXr2
nD1Vbu5v7N3TpaKiBIu52kGz+bOlwXq6u6u1+oRKy2A/9IE0h9Xh4ZHcgfRD
qVKJbCdYaAwYBGt3g+IfUO4oMOpardaMzpArluQOBAAuaiu1o7Iun3xEHMTE
oczhDzDRAYBr4/x8Xe2gMeFZ/op2qrM5Dfqfnj3c3y/kcueX++Uy6dlLlT6k
Z0Wn9boOaMQAMrncI7guz6mFxsaV6mmtfsnp8kdju7l7jK0Feiqdz4v/OL4W
gewS6YzCbJU7CgC4BNGIndLoCuXyyQdF29XgWGOiAwDXxu+8/nfRfPYqqdc+
pGe9n/h0fSs+4JnPoQhyMHf30fHxhEpbuV/r+PcCLiVf2pszmOSOQn7tbK3S
YpPG1rZnQmAoO9BFh4dHMzpDMpOVOxDggW7VEdlOyB0FAFyON7Kx7Fk/+7ho
uDLRAYDr4c/ef1O34et1vs6XSf7+O9/vOMjIc8+XzLZeZz6rwZD/M392vYMc
zN0tugl6u7PjXwrogNJiS2VzckcxQFqtVqFclmZCWFiy3FCoxE9xO5ZM8dUJ
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
eA8yguyW7gYpreTerXcDrm7tblAUuaPAeaTpar2RDY1tdVypvmCqNry5JYo0
LHavUjk50YE3FP7+m2PSlAinsrjtbC1wQf5obEZnuODkyUDfeEIRq9srdxQA
0GWiWShOu/nSXgevlSY6WPH6WDARgLyUTre0+mHbD2duqZZXz3/V2elfxPuI
0v34fvbmp4IUny5iOP9VBHnWYAY5ZzBlC8VuvRtwddVafVK9SCNtWHywoGE+
7wlFtCv2CZVWabGdPwGCNOmilKqVHvGGwgqD0eFdl2ZCODUHwsnc7MmnxONn
h+MCDn9AnNcYN4tBI+okQ2cBXFf+aKzjAT/SRAcLSxYmOgAgo1P5OtGffWNO
EUqmzn/V2XydeJPHZvk61q2kIkEOYJCpbE6cCrvyVkAXLTldwc243FHg0qRR
tZ5QRGNbnVBppblqxSMnl34oVSp2n/+hK+NI42lPJV3b6VlxY1az2N5A+rlX
qUgjcknVQlQzUbWUFhu5WQygZc86s84CuK6uPl0eEx0AkJfS6f7BnPK5N2+K
ctvumtEZXph6X8q8SQ+KIm05aVqW7oqXtPN1b2gM0g3pUvf2u4kb7e3FDenl
YmPpkeXA5RaBOhmkNGiznVQkyGEPUm93ilPhpX4LoA+yheKcwSR3FLiS9qha
pcUmWuy6VYc/GiuUyw8+XI5wWqtPZrJnXyVNeiBNOSs9cjLvOqtZHJ9fkOZA
ODUhLenZESe6hNoVuyisBYYBtFetTqoXH/q1FABcD3af3x28UmOMiQ4AyEjp
dLcHRr409b44pkn5ujc0Bil9txyI/GBOeXL85HNv3pTutreRtn/ws3xd+1XS
9tLLJ03L0iNnh2JeKkgpf0iQ1yNILiHHIFtYsjw0fYdhdHh4JPamwx+YN5on
VFqD3Tmu1Izdum254zlnHUxpTGx79OysZlFttk7dVrWfPbnxqSkRMFJ2c/em
tXpPKHJynDYwOPR2p6ifckcBAD20V61OaXRX7Fq2Jzoo0a4D0F/SuMcHHy53
+NYtZWQnLeXrTl7zLm4vByInL4oXTz335k3xuPTa9kyk7WvnxY32aMz26Epp
Y+kNOwvywc+yfwR5PYJkASYMsmgiqVt1yB0Fuq9arxsda2/fUo7dui3KOwqV
3eev1uqPfaGUgHV410/OW9t29hGMglar5QlFRH8wlc3JHQvwcNlC8eopCwAY
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
UicBAAAAAABGxKVSYRMTE88//7zFYnnyySe9Xu8zzzxz+/btF1988dVXX5We
umwqLJnJLjldj0ouXTDIh6bC9pyuk6mw++EN8y//quM3/m0HqbALBnmVVJg7
v/uLY9962qZ47PajkAqjTlInAQAAAAAARsSlUmHex7lsKuzo+PjqQbYvJN/6
9vf8n/mc5Vd+zfmvf1ua6vPkleN3/+TPxWYdpMIuGGTHqTBnLvVLN777cd27
j1p6adRSYdRJ6iQAAAAAAMCIuFQqbGxs7NlnnzWZTH/wB3/g9XqffPLJW7du
feMb3/j7v/976akOLiS/epC59xfsv/6bUrnz2x/b+PLXGumM9JTn9z5x90/+
XLpdvuMVG7Tvdj3IzlJhX3r9H35x7FsXzIONSCqMOkmdBAAAAAAAGBGXSoU5
nU6bzeZ2u00mk9frtVgsLpdrdXXVbrdLT8mSCutW6W4q7P35OVH+w4tf++T3
vvkXP3rpxRtvvfHuTelBqXxr7PX/45vP/Xe/928+9sJX33v//ZNPnS0jlQqj
TlInAQAAAAAARsSlUmEzMzMvvPCCzWZ79tlnvV7v888/r9VqX3nllbGxMekp
UmGnBhZ+XPfuv7n1xi/d+O4/e/2rovwPb33zicnvi/KLY98Sd8VT3/zJa5ca
2TgKqTDqJHUSAAAAAABgRFwqFWY0GmdmZpxO59jYmNfrnZiYsNlsCoVCq9VK
T5EKe1QKK1uvWtLxsfCdN0IuUd6NrgeLuebPlmEiFXYSdZI6CQAAAAAAMCIu
nmVq1uvpnZ3zS/HePVJhlyqkws6iTlInAQAAAAAARsRQZJmGIsjOUmGXLaOQ
ChuK3T0UQVInAQAAAAAABlz42S/trTh6nWW6H97wfeqp6x3kU++9Zt4K9joV
FsjtfPStFzoOcigMxe4eiiCpkwAAAAAAAAMu8Q8/Tk+81+ssU16ljf3Nt653
kC+YFG85Tb1Ohc3dXft/FTc6DnIoDMXuHoogqZMAAAAAAAADrrBoiH3zu73O
MiVe+XH65tT1DlIRvPNXyolep8JeNCvecBo7DnIoDMXuHoogqZMAAAAAAAAD
7rBU8n3qqbJ7vXcppvpWfP0//ef97eT1DrJQq370rRecyVjv8mDRfPZ33/zO
ZiHXcZBDYSh291AESZ0EAAAAAAAYfAW9KfDZzx+Wy71IMR3V65G//Ov05Huj
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
naU7E2rFIjA1NnKynHKyjIPUxXDrIkhdDDcAAAAAANlIKIVpy7M1Dtf61pb2
3dj+vvjdvXjx/f3t7Vz9nFfbal3T7VNP7d+LZPmNdBHk/sHBqZvn3+6ybu9F
c1VzUJtxqPvxq2+EozvaK0Z2dowWeywWk7vKhLfKZBbN3T9QOoVZKcV/GZCT
5ZST5RqkLoZbF0HqYrgBAAAAAMiGMuFNKIWplbrAxma9qz3heL/x5tQLL+f8
t7za7rxxduGtd7P8UroI8nJ/2/cbKnJecFDbq86611wNCRc1u7uWA3fltnZK
ajypIlpEIioRjFx1VvaoG+Rk+eVkWQapi+HWRZC6GG4AAAAAALInS2GiaWt0
ntExZXJKe9ju4tLIN07tLC7l7xf93sbm7VNPhZLuwU+fLoK8s7n2hcunFzbv
5q/ssL4dfvzqG/2Ls9rrjs3Mdg0Na3u8s3NVJvN5Y5Wl3S02SmoFWpmW2sm9
5GT55WT5BamL4dZFkLoYbgAAAAAAckjOWlR3b9gcoY/emhpoNM+//nb+fs7L
tnjx/aWL72f8LXQR5I3h3p86avNXc5Dt7S6raNrryvUN1AfiiBGvrG/0+Vec
3T0eZVjsWtrdGX+pHBJ56O4fSO4nJ8svJ8svSF0Mty6C1MVwAwAAAACQvUPv
al9d32hs7UjonP+3t1brmvL9i36zvXPyuRcz/jq6CPLllhrjUHe+yw4tUyP/
UHsp4dK27t6Fh1NkxdDLemwwFGpyumSRNuMvlVuV9Y01VrsISe0hJ8s1J8ss
SF0Mty6C1MVwAwAAAACQvRqrPeEWcqFbGRmdnkk4cuzvvx9SRg79GT43Pa0M
DqotEgpl/It+e25eeeKbGX+dFEHmsGUZ5NeuvTWwNJfvssP02upjF36ecOnJ
Owsdt4bU3cr6Rku7+0p1rfbxW8Ul8lDkpAhMW5uNk5Plm5NlFiQ5eaJyEgAA
AACA7Fna3W9/UKm9lzwWixkttshO4vOsh7709UPXKgwHg9euXTM3N3d3dcm2
MDeX8S96cQlxIfWiyoT3V5cqfP6V88YqdTv5W6hvHRVkbluWQf63cz/N64KK
solLiAslxLAbjRrMNnV9g7jmYXClQ/71Kusb1R5ysixzsiyDJCdPVE7m5DAA
AAAAwEnm7O5x9w/ICbRq58TsfJW1Jfngo37RhzY3r127Fo1EtkMh/9KS2rYz
mhuW8Iv+uIpSdjiuzMoOtfV12ZdnhZYez9ziUnL/octcFJG2bkxOlndO5jVI
ta1vh79949wnfvn077/61G96WvIUJDl5onISAAAAAICc8M7OqaW53Wi00mQx
tXcmH5a67CA2bFarwWCor6uTrae7O+Nf9CKe88Yqd/9AQs3Q519RK8m/ulSR
fFghyw4ZB5nzssPc1vrjLdeX7m2lU3aY8S06Pf3aaC3tbpEDNVZ7BsmTQx5l
+NCpZeRkmeVkgYNUa7OPXXitdrRPbG/tbv+vy79c2tpIUa/L+XCTk2WZkxkf
BgAAAAA44YKhkFxsNuHG9lgsZu/urWgwtfXfSv7UI8sO9XV1k+PjOflFL28F
feQXST6skGWHjIPMbdlhK7rzp/XvfarmN2IjnfLs/fv7BrNNvKo9spjQ5HQV
d6EDuf6teBVhqGvhkpPll5MFDlK2JyrfdM7cVncv97ceNYE2yyDJyROVk9kc
BgAAAAA4ydQJPLIU9uGUqonJigaTaO5BJflTR/2i3w6FqqqqZNnBv7S0fKWy
7T9+Qm19f/K5DH7Ru/sH5DJ9KWYfWdrdyYelLjusWR1DX/yaaKPf+q732X8R
u+pbt7/zveGvfvP+wxuNxe7Uj17KU5C5LTs83dX8H95/bSqYeMIUN+06Pf0z
vkVtwDVWuwhPuwRxgSVMKhO7skJLTpZfThY4yMje7uz66tcN77TPTYht2Sl2
h/0LKcqzOR9ucrIsczLjwwAAAAAAJ5w6NVGSPyEXVwMVDSaD2XbcUpisPKhl
h/GnntWWHUQbHxtLbgt37qT4RR9/8EtWBJbi0SriV3DyYanLDv6rRhHP8Fe/
Ofqt7/Z+6jNie/70G/Itues7+566O/TFr6UuO2QcZA7LDhXeW79z4ScW3+RR
VaZDE2Bucamlx6PNBzXg5JJCYSTkpIyHnCzXnCxYkOvb4c+e/5nHN/PtG+fe
87jEq+g802b6uuGdoz6SZZDk5InKyYwPAwAAAACccMkzFcORbaenf3E1YDDb
Wno8xy2FydbY0HBo2UFRlBdffNFms509e7aioqK6uvr06dPjY2Opf9EnCN2L
pPPV0ik7rLe5xXY0cNf9B3888Nm/UOsM3f/506LJiWFplh0yCzJXZYeRtZWP
Vbz6Q48tdZUp2f7BgRjo3WhU7dEuKZBQKS0AcemEnFQmvOTkycnJPAUZ2dv9
zLsvG4a6xPZnz//MOXP7sQuvDS3PffmDX6nTaHMeJDl5onLyWGKx2NCE19Bs
E63/9rjYzfklAAAAAAC6kDw30js7Jyt1c4tLjt6+wMZmZqWwtdXVSCh0aNnB
YDB0dnY2NTXZbDaXy1VdXX3cskMwHG5qd3tGx1bXN1J8u/TLDuKw9t//pPfZ
f1HLDiN/+3edn/wv4piMyw5pBpmTssP6TuSPbr712abLkb3occuzQsetock7
C3JbpERyxT5F/DmnfThd/EG1Nv7giWBxcvJk5GSegjzTZnqryyYrsVu72x7f
zGMXXlu9t5WiNpt9kOTkicrJYxma8F41meVqLZUmizh5rs4MAAAAANAX7+xc
ws3s6lvqkqTTC77kD6b5NJlDyw7nzp1ra2u7fv16Q0ODzWarqKhIXXYIR7aT
2/Ldu9ctdvHDtsra0jk0PL/kTz4mnbLDwGf/YvDzX+74+B9OPP2cuohi76c+
o3zlG1M/esnz6T/fj2ynU3bIOMiclB2+1VrznyrPLIQ3j1tlkhb8K7buXnU3
oR5b+Am08YdzaMWltUvgkpPll5MFCHJ9O/ybnpZv3zg3uDz36bd/vLS1Iau1
f1f93iM/m2WQ5OSJysljtWvNVlmbfVihtRbun1cAAAAAQEmSDwXzKMNy9/79
fYPZJl7jD+7BTD4+zbLDRkfX4Kmnuv/mO7L1/OMPFEU5c+aMw+G4cuXK9evX
m5qazp49m7rsUN3iPLTJZUjVds1sqbZ/5IB0yg7jTz0789Jryle+4f6DP579
2Wm17DD0xa+Jz3Z8/A9Xb9SmU3bIOMjsyw6vD3f+7qWXWxanH1llOmr09w8O
jBZ7ZGdHbEf39tQ0kHz+FTmFtWC0E2jVS5OTZZmT+Q5yfTv8mXdfvjHcc7m/
9XmLsXa075+aPvhNT0vqNQ1yFSQ5eaJy8litoqGZ8iwAAAAAQDq08jbjW3R6
+lN8Ks2yw29/3S8tdXZ22my2gYGBhoYGRVFMJlNvb6/D4Whra5NvHfemXWF+
2f9+Y/PVJrOcUSmrdscKUnvTrmhTP3pJ7G7fWTjQ3KU7/tSzg5//8tBfPpHB
TbtpBpll2aHpzsTvXnr59eHOdKpMKQa0a2h4bGZWbCiTU/GPZkXycgf5Jq5e
ZTK7+wec3T1qJzl5cnIyh0F++8Y5ud6saN9ruDIeWPzb62cbxwfSqc1mHyQ5
eaJy8lj6b4+rixuI03YNHbJgCwAAAADgJJB1sHjS/ewtPR7xazTFB49VdjAY
DC+++GJHR8eTTz6pKMrTTz9tMpnOnDlz7tw5+dZxyw6+ldXWvoFH/kbOoOwQ
7BvQlh3ueafaf/+Tnk//eQZlhzSDzKbsMLi2/LGKV5/qbMqmyhQMh6N7e8uB
u2Z314J/RS7r6u4fkKteFHjerCSuft5Y1eR0aTvJyROSk7kKcn07PLu++qk3
/6V9buLW8rzsfMVR++sOc/pfKssgyckTlZPHEovFPCO3K01W0bqGFB4NBgAA
AAAnWY3VXlnfaGl3qz270ajBbNs/OEjxqWOVHZRHOW7ZIXVsaQap3rQ799rr
o9/6bsfH/7DvTz6X/Ajy29/5njgsg7JDmkFmXHboCyz+3tVfPt5y/ajH3KRZ
nr1/f9/s7hqamBSDXu9sk+XZolRlJXFpd/+A+h8HEjl5cnIyJ0HKNQ1uLc+L
1/HA0p+e/clqeOtMmynNNQ1yFSQ5eaJyEgAAAACADNRY7ZZ2t7YOJkzeWei4
NZT6g8cqO1RUVDzzzDNtbW1f+cpXFEV58sknGxoafvrTn7755pvyrQxu2k1H
6iADtY29n/qMbLc+98WpH72061+Rbw395RO3v/M9ub11SxEHqLs5DzKzssPz
F975WMWradYcUpdn4w8m0FY2W95v/O1aiLI8+5F3i1SqVZefjZOTJy8nswzy
ico35ZoGH9zq+G7dpR80X7NPjRy3Npt9kOTkicpJAAAAAAAyZml3axc3sHX3
LjxqrdFjlR36+vo6OzsHBwfb2toUReno6BgYGOjp6ent7ZVvFaXskKuW27JD
bX2daF8689JXX3/ln95948zVyxevX5Odsr1aceG/vvLcv/vLP/vi6Z/crK3V
vpXc0i87zC0uyVUQteVZ+YywKpO5ABVaZcLrnZ076l1y8gTm5LGC1LbZ9dUn
Kt/UXujrhnfU9Q1KtjxLTqagi5wEAAAAACB93tk57dRErcjOTpW15ZH3ch6r
7FBdXX369OnOzs5nnnlGUZQXX3zRZrOdPXu2oqJCvkXZIaEo9HjL9T9ruPh7
V3/5Oxd+Itq/v/zKJ4y/Eu1jFa+KXfHWK1fO57zK5Bkdq2gwufoG1B53/0Bl
fWPC5Oo8EQl53lh1pbrW2d2TcEVy8sTm5HGDlM0+NfK8xajunmkzaau1JVue
JSdT0EVOAgAAAACQPjlNMRgKJT/+aWxmtmto+JFnOFbZweVyVVdX9/X1VVRU
KIpiMBg6OzubmppsNpt8i7LDUeWC1e1wh3++wnvr4sSAaNenh8c3AlHNE8lz
WHaIxWJVtpbGtg5tZ5XJ7O4fqLHaM/6C6bO0u0VCOrt7zhurKusb1X5y8sTm
ZMZBfubdlxvHB1bDW89bjBmsaVCU8iw5mYIuchIAAAAAgPT5PnqfuLyHXTK7
u5YDdx95hvR/0Ue3t/1LS6nbxt27lB2O1fJUdlhYWTWaP6zEBkMhZ3ePupti
8YFckYshJ1yInDzJOZlZkB7fzGMXXvujf/vBC7aqjGuzhSzPkpOp6SInAQAA
AABIUzAUSijPqruRnR2jxR6LxR55El38otdFkJmVHfJXZappca1vbSV0KhNe
mTZ5qtCKM1va3XJDO282Tk6Sk3oOUhfDrYsgdTHcAAAAAACkKaHCJnbVxQ1G
pqZ7R0bTOskzzwe7Pfn+RX/POzXyjVOZf1M9BHnq5vn2ufF8lx3GAktfuHw6
nXgGx72iyW2RGO7+Ae3aF3l6RliVySzyUC51W2O1a69CTpKT+g1SF8OtiyB1
MdwAAAAAAKTJowxrZ89qS2GNrR2r6xvpnGThnff8hpv5/kW/ZrbN/OurGX9T
XQR5uq3pcl9bvssOdbf7/2/T1XTiWd/aqnG41N2EYv5RT5TLklzbVj4RTFxR
u9QtOUlO6jdIXQy3LoLUxXCn0Nw3+Nyla7KJbdlz0erUHqDdBQAAAACcBHLS
rDLhVQtuoXuRGzZHmh9ftztnXvllvn/RL5x9z3+tKuPvqIsgm8Zv/bDZkO+y
w5n2pot9rjRDqnO2BTY25XZyPTZhZYycaHK6LO1uWZUVaamWZ9PMSZnMuhhu
XQRZgjmpJYe7xIOUdDHcughSF8OdwnOXrqnbrxhqppdXqMcCAAAAAFTq7Fll
csozOvbIg939Az7/yv3NzZFvnNoaHM7fz/ntufnhv/72zh1fxl9NF0GuR8Jf
uHy6zzeTv5rD9Nrq5y/9YnY9kGZI2kxIWM3AOzuXpwm04rQ1VnvC4gZp5qSI
SrR1n6/0h5uczCwnVepwz636SzZIlS6GWxdBlnJOpkOWZLU9anlWvCU25K44
5td1zaLnuUvXKN4CAAAAwAlU52xb2wymPkadOelRhtcdbWN/94/3t7by8XN+
f3t78p9/7DfezPJL6SJIs3foq9feCu5E8lFz2N6Lfrfm4uX+tvTjSZizqkx4
xbgnP1GuAI6Vk97ZuemaxtIfbnIyg5xUaYf7mqe9NIPU0sVw6yLIks3JNMmi
q2jGtq74w/KsWrZVy7PiANnz67rmrrHJ/MUDAAAAACg1CSuOHkr7ELH4gzrJ
6I9emnrh5Zw/9Tt6d232tde9zzwf29/P/qvNvPyL0g/yn5uvfb+hIuePJg/c
2/qx7capm+f3Dw6OFY92xVcx7oUvzMbTy0lZN9b23PrBC6U/3ORkBjkZP2y4
//76uVILMpkuhlsXQZZgTmbgotXZNTYpV6N9xVAja7BqeVb0yMOMbV1ylVoA
AAAAwAkxOO4VLcUBh06eVIZHFt+7MvKNU3ebLOJnePa/5fc2Njdc7bdPPbXw
1rv79yI5+WoHOzulH+T2XvQNt+ULl09Xj3gC97ayLzisb4etk8rjV994zdUQ
ju4cN56RqeluZSQnXy1jj8zJQ+vG3glv6Q83OZlBTh463MNTUyUV5KF0Mdy6
CLLUcjJNXWOTatE1rinPauuxzJ4FAAAAANQ4XOtbWykOkHe4a3vU3fDI2O1n
fjT0+N/efvL/TL3wcsZt/LtPK3/1N5PPvrDVdyvnX1AEOfnci8oT37x96qmS
DXJwaf4fai89duHnj1994/sNFRm3rxve+ez5V/638WzXnQx/3Ud2dowWeywW
U3vkrEV3/0Ce1p5N9sicjCc9uUzdJSdzJYc5+d/f+9nf11zIOCfjRw+3CPJU
1fn/8d6rf6UJ8nv1l/9P7aXCB3kUXQy3LoIsqZxMk5wrm7y4QfzBLNlf1zVr
q7WsPQsAAAAAJ1BgY7Pe1f7Iw7QTaLXbu9Go0WJfXl3dnp3faO1Yd7Rl1iLT
M7G9vTx+z3g8tr9f+kHuHxxMra3YJofN3qHM2kRgORDcNJhtwXA44zDM7q7l
wF1119ndU2UyV9Y35uIrPlqaORnX3PCuve2dnMytnORkdP9+9pGkGO7FQEAb
5L+Za6/2thUlyBR0Mdy6CLJ0cjKHtIsbAAAAAABOFM/omDI5lc6Rsiorm9rp
6O0TZ8hbdMjQ6PRMY2uHdgbssYzNzHYNDWt73P0DVSazaAnrf+ZDmjnZ5HTF
H6SlRxn2zs6p/eRkWUp/uHejUYPZVpilRIFcoTwLAAAAACfWDZsj9Ki1AbXF
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
AAAAAAAla2jCe9VklrcAv99o6lZGsjxhMBxuand7RsdW1zdSXfdRpbC11dVI
KHRoKcxgMHR2djY1NdlsNpfLVV1dfdxSWE6C1JbCxGHtv/9J77P/opbCRv72
7zo/+V/EMRmXwtIMMielsPWdyB/dfOuzTZcje9FjVT7zFOSZNtNbXTZZid3a
3fb4Zh678Nrqva0UtdnsgyQn9ZiT3tk57doLwVAo/uCJYOJ1bnHJ0dsX2Nik
PAsAAAAAAEqWodkma7OyXTVZwpHtLNvy3bvXLXZxtiprS+fQ8PySP/mYNJ9w
dGgp7Ny5c21tbdevX29oaLDZbBUVFalLYXkKUpbCBj77F4Of/3LHx/9w4unn
1IU9ez/1GeUr35j60UueT//5fmQ7nVJYxkHmpBT2rdaa/1R5ZiG8mbryWYAg
17fDv+lp+faNc4PLc59++8dLWxuyWvt31e898rNZBklO6jEn5b9jcg6td3ZO
XUdFcHr6Z3yLYiNhwRYAAAAAAIDSkVCerWhorm5xZt/kko9qu2a2VNs/ckCa
pbCNjq7BU091/813ZOv5xx8oinLmzBmHw3HlypXr1683NTWdPXs2dSksT0HK
Utj4U8/OvPSa8pVvuP/gj2d/dlothQ198Wvisx0f/8PVG7XplMIyDjL7Utjr
w52/e+nllsXpR1Y+8x3k+nb4M+++fGO453J/6/MWY+1o3z81ffCbnpbUaxrk
KkhyUo85GX+w9qw6gVbOnhXu398XcYrX+IMlXIr1DywAAAAAAEBq/bfH1cUN
Pmhs7hrKwV3A88v+9xubrzaZ5ew1WSFJkGYp7LcVp6Wlzs5Om802MDDQ0NCg
KIrJZOrt7XU4HG1tbfKt495InpMgtTeSizb1o5fE7vadhQPNnePjTz07+Pkv
D/3lExncSJ5mkFmWwpruTPzupZdfH+5Mp/KZ7yC/feOcXG9WtO81XBkPLP7t
9bON4wPp1GazD5Kc1GlOBkOhKpPZ3T/g7O5RYxCxZb+SNgAAAAAAQL7FYjHP
yO1Kk/WqyXLV1Lz5cO5Zxnwrq619A0fVbVTHKoUZDIYXX3yxo6PjySefVBTl
6aefNplMZ86cOXfunHzruKWwnAR5aCks2DegLYXd8061//4nPZ/+8wxKYWkG
mU0pbHBt+WMVrz7V2ZRx5TNXQa5vh2fXVz/15r+0z03cWp6Xna84an/dYU7/
S2UZJDmp05x09w+cN1Y1OV3aGFp6PPPL/hRBAgAAAAAAlJrR6ZnG1o4sbwTe
PzhI57BjlcKURzluKSwnQao3ks+99vrot77b8fE/7PuTz8mlPrV3jt/+zvfE
YRmUwtIMMuNSWF9g8feu/vLxlutHPXopncpnToKUaxrcWp4Xr+OBpT89+5PV
8NaZNlOaaxrkKkhyUo85GQyF3P0DcgKtGsBuNGow29KMFgAAAAAAoHRYO3uG
JiYLcKFjlcIqKiqeeeaZtra2r3zlK4qiPPnkkw0NDT/96U/ffPNN+VYGN5Jn
H2SgtrH3U5+R7dbnvjj1o5d2/SvyraG/fOL2d74nt7duKeIAdTfnQWZWCnv+
wjsfq3g1zTpYispnToJ8ovJNuabBB7c6vlt36QfN1+xTI8etzWYfJDmp65xU
l58VJu8sdNwayjh+AAAAAACAYglHtg1mW2BjM98XOlYprK+vr7Ozc3BwsK2t
TVGUjo6OgYGBnp6e3t5e+VZRSmG5arkthdXW14n2pTMvffX1V/7p3TfOXL18
8fo12SnbqxUX/usrz/27v/yzL57+yc3aWu1bya0A5dnZ9dUnKt/UXujrhnfU
9Q1KtjxLTqZQ9Jy0dfcu+Fcyjh8AAAAAAKCIphd8dc62fN8XfKxSWHV19enT
pzs7O5955hlFUV588UWbzXb27NmKigr5FqWwhELl4y3X/6zh4u9d/eXvXPiJ
aP/+8iufMP5KtI9VvCp2xVuvXDlfyMpnivKsfWrkeYtR3T3TZtJWa0u2PEtO
plDInLxSXVtZ3+juH1CvHtnZqbK2sLIBAAAAAADQL0dvX+/IaF4vcaxSmMvl
qq6u7uvrq6ioUBTFYDB0dnY2NTXZbDb5FqWwo0pYq9vhDv98hffWxYkB0a5P
D49vBKIPH8NUCuVZ0T7z7suN4wOr4a3nLcYM1jQoSnmWnEyh8DlZWd+oXn1s
ZrZraDjj4AEAAAAAAIpuNxo1Wuz+tbX8XSL9KlN0e9u/tJS6bdy9SynsWK2k
yrMe38xjF177o3/7wQu2qoxrs4Usz5KTqRUyJ5UJr8+/UmO1q1c3u7uWA3cz
Dh4AAAAAAKAUzC/7b9gc0b29PJ1fF1UmXQSZWSmswJVPXQSpi+HWRZCFHO4m
p0u0YCgkLx3Z2TFa7LFYLOPgAQAAAAAASoR7UBEtTyf3PvN8sNuT7yrTPe/U
yDdOlXeQp26eb58bz3cpbCyw9IXLp8s7SF0Mty6CLOJwj0xN53thFgAAAAAA
gAx0jU3+uq75WB+J7u3dsDnml/3Gtq7p5Rw/Bn3hnff8hpv5rjKtmW0z//pq
eQd5uq3pcl9bvkthdbf7/2/T1fIOUhfDrYsgCzbc37r6jrO7x+f/8F+nxtaO
1fWNjCMHAAAAAADIkwzKs4J/bc1osf/cWJPz8uy63Tnzyi/zXWVaOPue/1pV
eQfZNH7rh82GfJfCzrQ3XexzZRCed3YuGAqVeJCSLoZbF0EWcrg9yrBo8rqh
e5EbNkfGYQMAAAAAAOSPWp4Vr6I9d+maaNPLK6KJ3VcMNWL3otUpDhCvzX2D
8iNi+6q15e2bdeLd3MZzf3Nz5BuntgaH81di2p6bH/7rb+/c8ZV3kOuR8Bcu
n+7zzeSvDja9tvr5S7+YXQ8cN7ZgKOSdnRNtbtVfskGqdDHcugiyWDmpTE55
RscyDhsAAAAAACB/tOVZWX01tnXJVQtknVa+JUuy2vLs/sHBxbqmruHbOQ9p
3dE29nf/eH9rKx8lpv3t7cl//rHfePMkBGn2Dn312lvBnUg+6mDbe9Hv1ly8
3N+WQWDqXefe2blrnvbSDFJLF8OtiyCLkpN1zra1zWCWkQMAAAAAAOSDtjwr
tsVGc9+gLM++YqiRx4hd0ZlQnhUbv7xeV2myhiPbOY9q5uVfTL3wcs6fRB+9
uzb72uveZ56P7e+fkCD/ufna9xsqFjbv5rYOFri39WPbjVM3z+8fHBw3JJ9/
JRgKaXv+/vq5UgsymS6GWxdBFjgn17e2ahyu7MMGAAAAAADIhxTl2YTZs7JI
G39QrZXl2VcMNa7+QWtnT86jOtjZWXzvysg3Tt1tskTvrmVfX9rb2Nxwtd8+
9dTCW+/u34ucnCC396JvuC1fuHy6esQTuLeVfRFsfTtsnVQev/rGa66GcHTn
uPF4Z+e0D2yShqemSirIQ+liuHURZIFzcnDcK1pOIgcAAAAAAMi51LNntWvP
yoKtaOJI2SM2fnj5WmNrx+j0TD5iC4+MTT73ovLEN2+femrqhZczbuPffVr5
q7+ZfPaFrb5bJzPIwaX5f6i99NiFnz9+9Y3vN1Rk3L5ueOe/v/ezv6+50HVn
MuNglAnvobsiyFNV5//He6/+VdZBfvb8K//beDabII+ii+HWRZAFy8kah2t9
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
YnXq1V/nqcjcRmEvdbf8r5dOTEWzD1gOURh9kj4JAAAAAABQJrZImeSUnjIK
mzj0sj4KE21ifHxjm7t5c4uUaf3zQEnxqVvc4cjm9mzcbesoLHTZLOoZ+d5z
Y88f7Pva18Xy7MnT8iG5GjzzkbY6/O3vbx2F7brIHEZhFeqn/+Ljf7QFJzc+
VA5RGH2SPgkAAAAAAFAmHvsb7abGxk2jMEVRXn/9dYfDcebMmYqKitra2pMn
T06Mj2+dMmWJPVjee5EyCrvX4RHLycW7nn/zbwf/8j9r2VfP//kXosnBituM
wnZXZK6isNHwwp9UvPkrr2PT/cshCqNP0icBAAAAAADKxGOjsPCdO8ux2KZR
mMlk6urqam5udjgcbW1ttbW1O43CovF4s9vjHRu/c29p10XqozCxm/tf/5n6
8n/XorDRH/1t15/9X2KfXUdh2ywyJ1HYvZXl/6Pmvb9svrC8lizbKIw+SZ8E
AAAAAAAoE9u8w9GmUdiHH37Y0dFx5cqVxsZGh8NRUVGxdRQWX05sbPN3716x
OSsaLdX2613DI7O3Qxv32U4UNviX/3nom/+l80//3PfSEW1iz76vfV357rNT
r/7a+xf/MbWc2E4UtusicxKFPd9e979Vvj0Xjzxq/3KIwuiT9EkAAAAAAIAy
sc0obKmze+jAoZ4f/kS23p//f4qivP32262trRcvXrxy5Upzc/OZM2e2jsJq
r7s2bSaro6LRorUqq63W+aUdthOFTRx6eebXJ5TvPuv5N//W/5uTWhQ2/O3v
i+d2/umf37l6bTtR2K6L3HsUdmqk61+eP3b91vQW+5dDFEafpE8CAAAAAACU
iW1GYZ8lTrdvd3V1ORyOwcHBxsZGRVEsFktfX19ra2tHR4d8aKc/JBdm50OX
mlouN1td3oGZ4K2HD1M7LVL/Q3LRpl79tVhN3JxL6345PnHo5aFv/pfhv356
Fz8k32aRe4zCmm/6/uX5Y6dGurbevxyiMPokfRIAAAAAAKBM7CgKM5lMr7/+
emdn549//GNFUV566SWLxfL2229/+OGH8qGdRmHBhTvt/YOPCpe2WeSmUVi0
f1AfhT1Qp9z/+s+8f/EfdxGFbbPIvURhQ+H5P6l481BX82P3L4cojD5JnwQA
AAAAACgTO4rClMfZaRSWSqf3XqT2Q/LAiVNjzx/s/NM/7/93fyWn+tT/cvzG
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
wH61i3h2F414FgAAAAAAYNe2imfV4cxQ52ftVkDbuDzjD5w4JVrwzEdf2tnb
kumsES0dnieeBYoB8SwAAAAAAECR2yKezWEjngUKj3gWAAAAAACgyBHPAvsV
8SwAAAAAAECRI54F9iviWQAAAAAAgCI3/tMX7w+N5DueTQRmlaefM/pcgfLy
/ar3+oMz+Y5np8N3vvHxb40+VwAAAAAAgJI0+/v37tQ25Duejbi7Jo+8bvS5
AuXl2PW6yqGufMez16dGf3btvNHnCgAAAAAAsC3d45Pv1rfs7rnmju7p+YXc
1rPYZPWfOJXvePbWuUu3z13KbeUAHiUai4m/V0f6XnNczXc8+363XbR8nEVL
/9CR81WyiWW55Zzdpd9BvwoAAAAAAPBYe4lnj5vqch7Prt66PfLMC4mbwfxl
s2tLkbHnfhpTRnNbOYBNRWMxrzKi+NSbkfA3z78VWFrMXzZ7LxH/dsXvB275
83EiR85Xacvy2488FgAAAAAA7JEWz4q/osmBYdPzC6KJ1eOmOrEq8wfxVw4Y
E08Ry+aObrlzzksKmWumjh7LXzx78/SZufc+yHnZADYlh84Kik/9oNv5YmNF
/uLZN131J9oa83QiG/8hpcWz4iH5DSn+bvzyBAAAAAAAeBR9PCvTV3NHt5y1
QOa08iEZyerj2fX8jJ4VMqmUeviVW+cupRKJnGezd+qbbxw4lHqwnPOyAWwU
jcWCoT9+S9yLRp+tfO/9bntiLZnzbNY83PPU5dPx5Er+TkeGrqKJL8n1L+JZ
7ZtQi2ezvjzzVw8AAAAAACh1+nhWxggt/UMynj1uqpP7iFUZOxQmnhWSdxan
X3tD/cWvHqhTuQpmEzeDU0ePqYdfSfhn81EzgCzRWEz1B7I2tg1/+lLTpR/X
fDi+eDtXwWxgafHFxooDNWenwnn5RtpIfAeKb0I5G634JtS+PGU8m/XlWZiS
AAAAAABAKdoins0aAKblDGIh3/GsdNdiH3nmhRsHDvnffHv+E9N85ZXdtE9M
4ukjzx8cfupHIXNNJpXKX8EA9IKhBcWnZm2RC3Vj3v/33InvVJx61XblrLf1
4/62XTTxRPH0py6f/sbHv70w0JFKp/N3LuI7UAtd13XxrD6PZfQsAAAAAADY
qa1Hz+qnT5SZg2hiT7lFzlWb1/IyqVTCP7vU3hky1+y63XO6gkOKucW+mkzm
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
AAAAAAAAAAAAAAAAAAAAAHie/wNNpdbZ
    "], {{0, 984.}, {1383.75, 0}}, {0, 255},
    ColorFunction->RGBColor,
    ImageResolution->{96., 96.},
    RasterInterpolation->"High"],
   BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSize->Automatic,
  ImageSizeRaw->{1383.75, 984.},
  PlotRange->{{0, 1383.75}, {0, 984.}}]], "Output",
 CellLabel->
  "Out[104]=",ExpressionUUID->"c01ecef0-8dac-504a-9c84-b8c94b9d8f9a"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{"The", " ", "default", " ", "node", " ", "Settings"}], "*)"}], 
  "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"\"\<Conv\>\"", "->", "1"}], ",", 
     RowBox[{"\"\<UNet\>\"", "->", "2"}], ",", 
     RowBox[{"\"\<ResNet\>\"", "->", "2"}], ",", 
     RowBox[{"\"\<DenseNet\>\"", "->", 
      RowBox[{"{", 
       RowBox[{"4", ",", "2"}], "}"}]}], ",", 
     RowBox[{"\"\<Inception\>\"", "->", 
      RowBox[{"{", 
       RowBox[{"4", ",", "2"}], "}"}]}], ",", 
     RowBox[{"\"\<U2Net\>\"", "->", 
      RowBox[{"{", 
       RowBox[{"3", ",", "True"}], "}"}]}], ",", 
     RowBox[{"\"\<Map\>\"", "->", "1"}]}], "}"}], ";", "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{
     RowBox[{"change", " ", "the", " ", "node", " ", "settings"}], ",", " ", 
     RowBox[{"default", " ", "vs", " ", "custom"}]}], "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{"netIm", "@", 
    RowBox[{"MakeNode", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"1", ",", "1"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"0", ",", "True"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"\"\<ResNet\>\"", ",", 
        RowBox[{"{", 
         RowBox[{"32", ",", "16"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"\"\<GELU\>\"", ",", "3"}], "}"}]}], "}"}]}], "]"}]}], 
   "\[IndentingNewLine]", 
   RowBox[{"netIm", "@", 
    RowBox[{"MakeNode", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"1", ",", "1"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"0", ",", "True"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"\"\<ResNet\>\"", ",", "4"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"32", ",", "16"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"\"\<GELU\>\"", ",", "3"}], "}"}]}], "}"}]}], "]"}]}], 
   "\[IndentingNewLine]", 
   RowBox[{"netIm", "@", 
    RowBox[{"MakeNode", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"1", ",", "1"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"0", ",", "True"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"\"\<Inception\>\"", ",", 
        RowBox[{"{", 
         RowBox[{"32", ",", "16"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"\"\<GELU\>\"", ",", "3"}], "}"}]}], "}"}]}], "]"}]}], 
   "\[IndentingNewLine]", 
   RowBox[{"netIm", "@", 
    RowBox[{"MakeNode", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"1", ",", "1"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"0", ",", "True"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"\"\<Inception\>\"", ",", 
          RowBox[{"{", 
           RowBox[{"5", ",", "3"}], "}"}]}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"32", ",", "16"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"\"\<GELU\>\"", ",", "3"}], "}"}]}], "}"}]}], 
     "]"}]}]}]}]], "Input",ExpressionUUID->"7f65be1f-22c1-8145-a433-\
9e4906067218"],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1:eJztnVtwFNeZx727larN024etlJbycsmVX5KKpXKg7e8VUnslGvLm4vLxolj
yg4xxiakCFERYuIUlmOEiQAhg7AVyyCQMNIIgSQQuo40EqORRhpdrCu6II0u
FkhCVzRoECOBZr9wlrPt7pnR9GVm+oz+vzpMdfd0t/706e/f3zndfeY/tv7+
hTf/8bHHHvvDP9PHC6/tfWr37tfe3vSvNPPzXX/YsX3XG9ue3bXnje1v7P7P
rf9EC4/Sv7V/eOyxv0/7AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIGIs
j43PX3VM5l3UVhYcTtoDRAIAgPlZXfSMHj3R9fLWni3b3QcOjx1P11ZoW9oD
7Wfk8LGV2bkNKBIAAITgttNFTjicnHpvcuqBz6e/0H7IYLtf2TZns28okQAA
IATkqOR+C3UNhtiptNxubO557beG+KoQIgEAQAhWFz2USEfCUbmvkmPr7FER
QiQAAIjC6NETw8mpEXJUVsY/zhxJTo17kQAAIApdL281qts8WPHNzHa++Ora
ykp8iwQAACG4d+Nmz5btEXVUVvp2JHiH3HEsEgAAROG20+U+cDhwDuz1Dg0M
8DJ186YeUx1OTp0prTRcpLFFj0gAQCTIuXylsLKqoq6+vrWNTZtnNXGZzLs4
djw9oA22uFy5ublVVisrtupqPaZKf4X+Fv+7n+Tl01Gl49nZP8CmA8pjX9W+
fziYSGOLTCQAAMQlIZy/0el0NTXRhNfj8SwssELT0TfVECLh/ADEN5QcKmcp
IaRUnBJySg6jtlo8Edr5O9vbp27etFgsuY+g6fmZGQ2m6k49Qak7O8L+4AeW
WgGskSVdDc4PAJDB+mGivFrcsK7zDw0MXCoq0pzqS021/vAH4XSXsV6gMEXC
+QGIb4JlibzHOJqrxQ2h+/mZ81dZraseT9dLW1zf+z4vs5U2VaY6euwj63sH
WT7vD35gxyen+L0Vf9g5/1Digb6de/oT9o4kp966ULT66Do173DS8jl7vXT2
Tm8fnB8AUQh4s5XfGaSFUVstnghhqj6v17OwwJzf6x62f/Wb0tL+9rtDg4PK
sry0FHBvw6knmKmyYxvsDq+sCsK8w0tXoobHv9v+7Av0Sdo6fvoLZv6T5/Jo
tu3pH7PV2Cy/EMD5AYg/fHglJwzWT6eDOL9rz59LSkrS09ObmpqSkpI6OztT
UlJsNtvc9HT4prq6en9tbU2/SHL+jud+yaavv/UOyVtobOZWT5eD2bJKOD8Q
BYqL2pa2c6UVVa4Wmo61HMG4e++ezdXS3jcwt7gYay3mZV1Tpcx/eHAwoPNb
rdbs7GyXy5WWlkbOn5GRYbfbVTk/2X5jZ7ezo2tieibEJUCV87vfSyZ5d8c+
51bfuyOBfQvnB0LQNThEtp9dXHq2pKw97nqYowCZ/6UaOx3Ay7V1ndcHPUve
WCsyHWHePA3o/LW1tQUFBS0tLeT/5PwWi6WhoUGV8/sfmv/Vljaqo/zK6uae
3ltz8xpEkvM3fuuJvp17yOGbvvPkRFaOrHun7muPzzuccH4gBIVVtRQRKCiR
KxX7/xqO8696PNfe+F3DMz/jpfVUFtn+kSNHyO13795Nzp+YmEitgGDO7z56
gv5WhERKnb/+G9/u/tWb0pyfrJ7SfloI5wdCIHX+83F3bzEK8Jw/r6Jq3S6F
jYmqBybJ3h0OR1tbW1NTk8vlomyfbL+9vd1ut/OvNOf850rKa5pb3eM3lB2b
qnp7lgYGKcMfSjwgdf7FzzppYvTIcTg/MD/tA9c/LSn/u/NfKauob4y1HMEg
2y+vd8LwQ6PW+V9//fXi4uKkpKS0tLTs7GzK9sn2N23axL9S28/v+KwjmOGH
L1Lq/L7pGUr7Oze98uCLHfuU8zc/8RScH5gfioVKZ9O50oqyeqelwoo7larw
Li/D8NdFrfOviyrnv+fzhfPoQjjO3/LkM+Tz4+knyfPJ3sc++FDm/PTJ7lDA
+YFAjE5MXq6tu//gQayFgLhCrfMnJCSUlpampKRkZGRYLJbExESHw0HZPv9K
bW+PISLJ+fmtZ0rsR5JT73vvPlA8zEPtAjg/EI6rLW2t1/pirQLEFWqdn7zd
5XLZbDa73d7Q0GC1Wtva2oqLi/lXMXF+owqcH5gQ38pKQXXN5OxsrIWA+EGt
87PXtbKyss6fP6//Ta5IiITzg/hjfOoWmT/e6gJGodb52etaZPuU5+t/kysS
IuH8IC5xdfc4O7pirQLECapMdWpiYmx0NHQJNm4PnB8APVDCT2k/Jf+xFgLi
ASFMVQiRAESa6fmFC1bbPZ8v1kKA8MxfdUTnJ25HjhyfvlIexyIBiAKt1/qu
trTFWgUQnuWx8Z4t26Ngqv27/rjU2x/HIgFQy7FLZc7e66o2WVtbu0KJ0PiN
zMqaCKkCG4Sul7fem5yKqKOuLi52PL/5wfJyfIsEQBUanJ+YW1w8W1J+utIW
CUlg4zCSnDr+cWZETfVG5ln3/kNxLxIAVTDnp0ITe0/nUmGZPH1SYUuGJqao
HLAU8k1o9rDlYnrB5Ty7M6bygdiszM51v7Jtsb0rQo56p6eX9u+7NR33IgFQ
BXd+buxk9f5Hzk8T7KKgdP6ylvaskvK+4dFYKQfxwZzNfm3bzkj4Kjlq75u7
ZkorN4hIAMJHmvOzJczhyfbJ2/mSgM6fWWHLr6y+fedOTJSDuIF8lZLe8Y8z
fTOzhtjpyvzCjcyztE8DHVUIkQCESQjnl+b8fLn/YaPg/5y/soZy/jJHA8al
BDpZmZ0bSU7tfPHVvh0Jw8mpY8fTtRXalvbQ8fxm9/5DhvefGCjy2m9+/3eR
7yWjkwfEhBDOz3v+yefZEjbLcn7ahKbz7E6bq6Xz+mAs/w8gXlhbWfEOuSkH
nsy7qK3QtrSHiD4kY5TImvoGBA4wG9LentB4l5fzKqowgD8AqkDgABMSvvP7
MYA/AJpYN3Aq6uqbOzFSFjAvoQfwH5+cqm9tu+3xRFMSAOYndOAMDI/A/IGZ
CTGAPz9v4fzAQKhZquElxCizrsiAgVPT2OR/aPuskPlHViUAOlAO4E8nLWX7
fJacXzoLNibsIWE+K326IAR5dqfstcGAW8l2Lps1p8ij+ZfOV1ZJAyfn8hX/
w3jJKijKLy1HygRMjmwAf2Urla4FOI03OIaYKu0h4LBRmq0+tiJlgVNSU0ux
Q5k/S/7rW9voWkCfGv4jAEQB2QD+yiSfZjv7B2IhDZgF8j32wDB7fpiballL
u3T8ELYmW+KXmCp7lphWZk8g8IeN2VbMVNmu2OuHmnP+aIq8Pj4h++UL8nyZ
1dPlAFkTMC2yAfzJ6vnpKp0GGxYyOuaHzCe5qTLz9D96roy7KHtnkM1K12GW
zl8w5LO0mtSWNTt/lEUqf/kiv7ScChk+JUtUWBcQAKZFNoA/6+FhJYaqgEng
Nkh2ym6AstcJeXcKc1TZvVHmqNzJ+cpsOXvBkO2cpev8b2l2/uiLlAUO6+2h
8KHkv6KuniY0/EcAiBp8AH++RNrDQzlMDDQB00BGx9wyzHSarSBdOWD/OR9X
kH3LMnY9zh99kcrAKaysguEDgZhbXMyrqPJ+8SV6Sl1Y9hIrVcAMrNuFLk2G
lV3oZJi8K4YMk60g60L3P7RoNgIt81hm48x4zSySAudMcWnv2DjbOTWTpc6P
qwAwPz1DbmujS7qEMv/80nI8qAZACJSBw6CQoSZA9PUAoApqupY5GmQD+FPC
L3vaB5cAAKQEDBzyfEqZci5fae7sQsgAk3PHe1c2gL+suUqtALyZDoAMZeD4
H93wZY964uloYHKCDeBPpy6/CiCHAUCGMnDYW13+h/mSrP8fABMiG8CfTlpZ
no8hHQBQovzlC4oUabDA/IGZUY5DrnwPHX0+AMgIJ3Bg/sDMKMchl+X5GJME
ACWywFH6vGxQRADMhnQc8rW1NX66YkgHAEIgCxzpjV309gPzIx2H/POHtt/c
2YXzFoDQKAOHJUsYDgWIAh/Av7KhiT6l521+aXkMhQFgZmSBg0c6gXCwcchz
yipGJybZkoq6eipZBUXorgQgGMrA4WAgLGBm6Iytbmpu6rqWV2HNLi6V/YBL
zuUrbDTaGCoEwISEDhw2IkoM5QGwLgsez+XaOjp7qVyssvHldALLnupE/z8A
nGCBw36i95O8fDJ/ZE3AzKyu3nd81sHOYdnL6Qz2bi9OYwCkBAscihT+RDTF
Dk3jti8wLf0jo2eLS+1tn8mWS19RRLc/ADKUgcMfiuatZjg/MDPDExPnSsql
A/jLXuZS/oYvAEAZOLKXuRA4wOTIxiFXDuDAfsYxuqIAMDsIHCA0ynHIZd37
bEzCqOsCwNTIAkeZ5OOBf2BylOOQM6tHixWAEMgCRzoECoZDAUIgG4ecGqrS
e1XwfwACogwcDOkAxEI5DjmDLgEYwxOAYMgCBz08QCyU45BTAlNYWfVJXj59
4nwGICDKwOFQ1PDf8ALAtCgH8Pc/HMYNP9QLQAiUgUNZU0lNbc7lK3B+IATS
ccgZslOXLgHowwRAhjJwKEzI+Svq6vlgbggcYFqk45DL4O+qYDwfAGQEDJzC
yio+jYYzMDl8HHLpQtlrKTB/AGQEDBz/o1Gw2DTSfmBm2DjkfJbSFdmDnXjU
EwAlssChMJHl+YgaYGYob6HshXIYvkSZ5KPpCoAMZeAon4hG4AAzMz2/cMFq
u+fzsVnpz0yzhN+ztBQrbQCYFlng+BV5Pt6OASan9Vrf1Zb/P0v5y4losQIQ
AlngSMc8Rz8/MD9ra2tXrjrc4zf4EjzSCcC6BAwcPBQBBGJucTGvoko6DjkA
YF1kgYN8CQgHG4d8eWx8/qpjMu+itrLgcNIeIi1VCJHDc9PW611nWu3aim2o
h/YQaZFCHEmTi2SBI0R1CyESRJPVRc9oSlrHS7/u/tWb7gOHx46nayu0bc+W
7V0vbx05fGxlds54kUdP0M7pT5hW5O1l7/7qwmdPH3ou++ifyiwHay5pK7Qt
7YH2827VxemlAGPF6EGIIymESKru96oL//vUX3+alWLa6hbinATR57bTRaEx
nJx6b3Lqgc+nv9B+KOK6X9k2Z7NvKJFX3b0UGu9YL9xcnPPdX9VfaD8UcT85
c6R8oMMokUIcSSFEClHdQogE0YdCjMJhoa7BkPiSltuNzT2v/daQQBNCJIUY
hUP1YLch8SUtdSN9L3z6gSGBJsSRFEKkENUthEgQfahBTZlVJEKMBxqFsM4m
thAiqUFNmVUkQowHGoWwzia2EEdSCJFCVLcQIkFMGD16ghrUEQoxVsY/zhxJ
To17kfurC6lBHaEQYyXVUbavMj/uj6QQIoWobiFEgpjQ9fJWo/pRgxXfzGzn
i6+urazEt8hnTx8yqh81WKHk6kcn36eJ+D6SQogUorqFEAmiz70bN6lZHdEQ
Y6VvR4J3yB3HIscWZqlZHdEQY2Wz5aP+6Yk4PpJCiBSiuoUQCWLCbafLfeBw
wLjweb1DAwO8TN28qSfKqPE+U1ppuEhjix6RV929fyqzRCHKqPFe2NNs+JFE
datCiOoWQiSICZN5F8eOpweMixaXKzc3t8pqZcVWXa0nyuiv0N/if/eTvPyK
unr2m79sOqA89lXt+4eDiTS26BG59/yZgzWXohBl9FfOtNq1iQxxJFHd8Vfd
Qog0ajWgihDO3+h0upqaaMLr8XgWFlihaUOizCiREbUCVdCZryHKii6r3kQW
ZUYdSVS3KrRVt35TjYLIKJ+TICaEtoLO9nZq9VssltxH0PT8zIyGKHOnnqBc
jq7XOZev+B/+/otUBp+lKzsV2WpRswI9IiMRZZn9bbUTw7KF+60FlMsZfiRR
3VGobg1FT3ULcU5qXg3oYV0rGBoYuFRUpDn344X+Sv3hD6S/VRoM1rILU6Sx
RY9Iw6Os+sbQl0/vT+tuVOZX+wrPGX4kUd1RqG4NRU91C3FO6lkNaCZ0Pz+z
giqrddXj6Xppi+t73+dlttKmKspGj31kfe8gu5T7g1/Hxyen6EIvW21dKxhK
PNC3c09/wt6R5NRbF4pWHxnXvMNJy+fs9dLZO719kRBpbJSNLM59PSfljboA
375vK9qdc9LwI4nqjkJ1ayh6qluIc1LzakAPIaLM5/V6FhaYFXjdw/avflNa
2t9+d2hwUFmWl5YC7m049QTrU2W/UhTsrg2fkK627i0/sqaGx7/b/uwL9Ena
On76C+YGk+fyaLbt6R+z1dgsdwZjRWq7mxYwyrwrvh8UZ36v8G9zy17lt0lV
haxP1dgjieqOdHX33rp5srmWPlVtpae6hTgnNa8G9LB+fhXEClx7/lxSUpKe
nt7U1JSUlNTZ2ZmSkmKz2eampwPuJ+DdtNXV+2tra/pFkhV0PPdLNn39rXdI
3kJjM4998ofZsspwrECPSAPzq30t1V/JPjh4eybgJgHvphl1JFHdkatusv3H
9m6mT1Vb6aluIc5JEBPWjTJKBYcHBwNagdVqzc7OdrlcaWlpZAUZGRl2u12V
FdCJ0djZ7ezompieCXGSqLIC93vJJO/u2Oc89nt3JLBvtVlBmCKNirJLI71f
OvUX+lRlBUYdSVR35KrbQOePp3NSFbSfjv4BS5mVSuu1PlxZNBPm3bSAVlBb
W1tQUNDS0kKGQFZgsVgaGhpUWYH/YVVebWnLLi7Nr6xu7um9NTevQSRZQeO3
nujbuYdCvuk7T05k5bDlPPbrvvb4vMOpzQrCFGlIlPXNT//7ucM7G0rUWoFR
RxLVbXh1s04eKlsvZJDz0yebDbPbR091C3FOqoJs/1xpOe2QSk5pBe1T5w43
LGFawarHc+2N3zU88zNeWk9lkQ8cOXKEwn/37t1kBYmJiZQWBrMC99ETFfv/
yqpMbaENw7eC+m98u/tXb0qTQIp9ygNp4bpWoEdkQu4pnVE2t+x9oijjB8WZ
3hVfiE32Wwvob0XoSKK6Da9uluorS5jJv57qFuKc1FNytL6CDVQ9QUfx7nA4
2trampqaqNVP6R/5QHt7O7X6+Veak8BzJeU1za3u8Rurq/fVipQ2/5cGBinl
G0o8ILWCxc86aWL0yHGdSWAIkfrzq+etlq/npHx+ZyH0JuvmV3qOJKrb8OqO
dM4v+jmpCkuZFc5vCGqt4PXXXy8uLk5KSkpLS6NWP6V/5AObNm3iX6nt+HV8
1rHuKaHKCnzTM5QHdm565cEXe3opCWx+4iltHb/hiNQZZQnOsq9kH2y89bk2
KzDqSKK6I1fdxvbzx805qYrWa328t4euJs6OTkN2uwFRawXrosoK7vl84ZwS
4VhBy5PPUOCPp58kE6B4H/vgQ5kV0CfrslZrBWGK1BNl77bavnx6//mhLs1W
YNSRRHVHrroNdP54OidVQVeT5u5rlOpTIdvHHV7NqLWChISE0tLSlJSUjIwM
i8WSmJhIrX5K//hXapv/hogkK+D3IinTG0lOve+9+0DxdAclitqa/+GgLcou
FhXtaaoIP8SCRZlRRxLVHSYaqrt53L3Pmk+f+p0/ciKjf06CmKDWCijYXS6X
zWajVn9DQ4PVam1ra6NWP/8qJlZgVDHQCihxopJy7sxraYfePvXRh7mfUkCx
hazQLC3/6s//5192b9mXmS79KmCJifOjuoMh4oht5jwnQUxQawXs/Z2srKzz
58/rf7UnEiJNZQWZ/W3fzPvgS6f+wgpN/9flk0+XnPlBcea/nU2mtOqpg2+P
qPzJpGg6P6o7GCI6vznPSRAT1FoBe3+HfIASP/2v9kRCpDmtgEKpZKw/rbvx
3VYbKxSAtNA8ozSjulUhrvOb7ZwEMUFVlE1NTIyNjoYuwQZygRUELGZ2flR3
COLA+U1yToKYIESUCSFSCCsQ4kgKIVKI6hZCJIgJ81cd0fnN05Ejx6evlMex
SOv1ruj85ulfqgoudLni+EgKIVKI6hZCJIgJy2PjPVu2RyHK+nf9cam3P45F
Ds9NP5d9NApR9usLf+ua/DyOj6QQIoWobiFEgljR9fLWe5NTEQ2x1cXFjuc3
P1hejm+Rz54+dFPlQxFqy+1l7w8zku6u+OL7SAohUojqFkJkCA5YCveezqVC
E3zJ0MSUdAXpLAifkeTU8Y8zIxplNzLPuvcfinuR+yrzUx1lEY2yD52Vb5Xl
xv2RFEKkENUthMhg5NmdVNh0WUt7ZmWNH1ZvHCuzc92vbFts74pQiN3p6aX9
+25Nx73I6aXFn5w50qLyJc3wS8fkGO1/0rMQ90dSCJFCVLcQIoPB3V4Kc376
ihoCNMFmj10qozVZ6yASSuKVOZv92radkQg0CrHeN3fNGDGknhAiywc6fn7u
eCQCjULspdwThT3NG+RICiFSiOoWQmQwmMNLLZ2snhoC/IrAnZ+1DgJeLEAI
KNAoC6Imtm9m1pD4WplfoAY17dOQEBNIJAUaZUHUxKZ0y5D4mrt7hxrUtE8D
Q0yIIymESCGqWwiRoWH27n9o9VTYtF/i/M7e69LVQPhQE3skObXzxVf7diQM
J6eOHU/XVmhb2kPH85vd+w/pbFALKpLia19l/o9Ovr/Z8tE71gsHay5pK7Qt
7eGHGUlvleUa3qAW4kgKIVKI6hZCpAzycMrh2bTU+WmaEnv2FXJ+o1hbWfEO
uSkpmsy7qK3QtrQHPU9NxIdISo36pycoKTrTatdWaFvaQ4SemmAIcSSFEClE
dQshUgp/tkfa28Pu8NISyvO581NBPz8AAGwceG8PAACADQKcHwAAAIgQeXYn
v/liWiDSKCDScPhLqWZGCJEgHGTNIpoO5yEo5R3ziD46BZFGAZHGotQWZj+D
7M1T2oQ9ixLsQRT632nuvhBCJIgyQkQZRBoFRBqLUaZKjkpbsVdQA66vp+Na
CJEgysgef+InCX9XjkcTX429K80HzaAJngzQV2wdthM+y04VtnPZbiESIkUU
yZBuzv4cdz/+/CEzT1oo/SuyMQeYNrYr/pi69L8m3VVcigRRRvbKA48y/hws
e0WChxVbgc3ylIAlA37JGcW24rN85zxbUPWcLURCpNlEMphVsmnp26N8bDGe
IXNhbAXZmAP8qsRWVm6uM+c3v0gQZaiyWF3z84F/shUoQFgVS2+Wses7VTcP
LrZc1gzk55t05wHXhEiIFEskgzbnxsgvUvxTulvZzqVjDkibJ0oLNcT5zS8S
RJljj16IDjO/YvXOZqXnAN8bq3oWmMr8SrMVQCREmkokQ9pkCDOdZuKlYw7w
5knkcn7ziwRRZt0+VWkEKftUqeqTcgv4oNnB+lRlO/c/ijKetvE0DyIhUgiR
jHC60NlswC50/8PL2bufXuA7VHah866qvY9GIfZ/MY1fFyFEAgAAAAAAAAAA
AAAAAAAAAAAAAAAAAIAe/hfKFRNc
    "], {{0, 105.75}, {382.5, 0}}, {0, 255},
    ColorFunction->RGBColor,
    ImageResolution->{96., 96.},
    RasterInterpolation->"High"],
   BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSize->Automatic,
  ImageSizeRaw->{382.5, 105.75},
  PlotRange->{{0, 382.5}, {0, 105.75}}]], "Output",
 CellLabel->
  "Out[120]=",ExpressionUUID->"6a8a9dd5-caba-3144-8941-285a94689a5e"],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1: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
AAAAAKLn/wCkVWi/
    "], {{0, 105.75}, {630., 0}}, {0, 255},
    ColorFunction->RGBColor,
    ImageResolution->{96., 96.},
    RasterInterpolation->"High"],
   BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSize->Automatic,
  ImageSizeRaw->{630., 105.75},
  PlotRange->{{0, 630.}, {0, 105.75}}]], "Output",
 CellLabel->
  "Out[121]=",ExpressionUUID->"4f8f8619-3141-9046-933c-ce0ab1795fb5"],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1:eJztvXlsW+ed9zvvvShw+9fc/jEoBlNgcKdA3z9mBsWgf+SiBZou6DtItyBN
l0lumkyzNDeDTF4jk7Vv7KTeItuyEsuOGieWZTmWKUuWZG2kSJGSKFKUKIqW
qI3aSC20RW3UQomWKFni+6ue+smTw0XkWUg+h78PHgjnHJ5z+KWe3/md37P/
P8/+z1/8/v/4q7/6q//6v+DPL3735vdfffV3bz/+f8POr175r5defOWF5x95
5bUXXnzh1f/32f8TDv7zf/urvxqH8/+8HUEQBEEQBEEQBEEQBEEQBEEQBEEQ
BEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEkjm9O+5TaLv/ymuLRiscEdUCTg
DSwYxvpLeszikmliEO6gtEgu4CK7uRCJNokgSPazsxacOnu+/4lnB5950XP8
9PS5InEJroU7wH0mT3+4vRTIQZGrm6GjxupHLp96tPTsW1rNyZZb4hJcC3eA
+7zbfHNhY01ekVzARXZzIRJtEkEQXli12cEZevMKtvxzu+Gw9AT3AR878NTz
AZM5p0S2eYbBYx82VN5dC4Tv70hPcB94Efy05IxutE8ukVzARXZzIRJtEkEQ
XgCnCg5wpb1DFo/KptXO7sHf/YcsrpULkeD5wUsbxwdkcftsap90/+KzD3LH
/3OR3VyIRJtEEIQXdtaCUMRTwqlS1wpOW2IVNBciVzdDUA5VwvNT/w9vllyo
J+ciu7kQiTaJIAhHTJ09780rUMipkuT7uHgyr0D1Io8aqw8bKhXy/CQVWLTv
6CukiOQCLrKbC5FokwiCcET/E8/K1fwdL4UXl1y//O3e9ra6RT5y+ZRcbfTx
EhRFf/jpCdgQLZILuMhuLkSiTSIIwgtbd+4OPvOiok6VJPdLh0ITHhWLnF5Z
erT0rKKen6QnNR+NLMyKE8kFXGQ3FyLRJhEE4YhVm91z/HRMTxgOhSZGR2ma
u3tXil/15hUsNuplFylvkiKyzTP8llaTBud/2FBZPdgtTiQXoE2iTSIIkoP4
y29OnyuK6Qkddvv169ebDQaSTEajFL8K3wLfRb/3k/KKpnZrtb7ZNTJKtmPK
Ix+1njgdT6S8SYrIN2+UnGy5lQbnD99S0iPbgNAsBG0SbRJBkBwkgfPvtNns
XV2wEQoGgysrJMG2LH5VLpGKOv+UAIcswvnX1KZ8ieqdP9ok2iSCIDlIYufv
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
rvhb1X8KbIaiPz3WXE2cf9pEtniG8lrrflxy2j1/95sfvjWzshi4t/7dj4/W
u53xLpEiEm2SO5skAUl0xQjZNTt7r/65egRrSBCEM/b29jRNzRUG48LyipT7
QDCTzCTzBxf04jh/+2t/aGhoKCoq6urqOnbsmMvlys/PN5lMgYWFmPeJ2TdP
LpHg/Pse/TeyPfbGYZC30tlNvT28EZa0+mScvxSRMpZG33EYv1J6cnx1MeYl
MTsQKieS9BuBIOSz25ZnKy9q+mzHTTVPaj6CjQRXSRGJNsmpTQp6j5C2G7d3
ytrr6nWPNnfaMSBBEF4AJ9PqcH7WoIPkGHRLvBv4q07XgK2vf3ZhMYHvOtCv
QpnUOz4e0/kbDIbS0lK73V5YWAjO/+LFi2azOSXnL5dI1vl7/pgH8u5Nz1Bv
P/zSIfKpOOefpEi5nP+tyeEvXXoP/qb0rldIZGh7i+03UtLTVu92vtdcNbY4
m/hCKSLRJjm1SWuPk41JSPMNiUAa2q3+paX6NgsGJAjCBf3jE9cam0hL6233
6MEXHAR4qjaHE+5WoTd2Dw6zqwZTkuybF9P5t7a2VlVVORwOeAWA89doNB0d
HSk5f7lEgvPv/KeH3C+/Bk6+65vfnr1SRo5Tb9/+d99YttjEOf8kRcri/N3L
C3977fTLHQ2pvuuVENniGbJNjT6p+Sivta55f3U20lLT7fMceK0UkWiTXNvk
qHcSQhGyhA05EtwIVRpMkf11fjEgQRAuqG7+S7+vdKamo+8n4/x3gsGhF/6z
40c/p6nn0hXw/GfOnAGH/+qrr4LzP3LkCJRP4zl/z9nz8F0KiWSdv/Uf/nng
6d+zpVHw9lAghYMHOn8pIg9dvyTR+Qc2Qw/VXHy4rji0HU5wyVFDFXyX0iJJ
S838xipEIDOrSw9dODwbXIbtxC01sohEm+TOJqP7kMAGrS1xjY1DyES27+/u
ZsK5IgiSGmxAciOJUX4HQstQ1xp0ZAmJ6EmbUxq9CB7eYrE4nc6uri673Q7l
UPD8vb29ZrOZfiS6NCpFJFs9vjE6DmXPiSPHWee/dtsFG1NnzkksjSYQKb00
+phB87Wy/Jn1lcSXHFj5IF2kNzBPW2ogAnm7qfzpG0UdUyNJRiMSRaJN8muT
ZbX1EJaQjrWU+jZLzAocBEGylt7Rsc8adH8OSOq1TdZOiXcDf2W53RfPU1FS
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
CIIgCIIgCIIgCIIgCIIgCIIk4H8DVoZ4EA==
    "], {{0, 225.75}, {548.25, 0}}, {0, 255},
    ColorFunction->RGBColor,
    ImageResolution->{96., 96.},
    RasterInterpolation->"High"],
   BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSize->Automatic,
  ImageSizeRaw->{548.25, 225.75},
  PlotRange->{{0, 548.25}, {0, 225.75}}]], "Output",
 CellLabel->
  "Out[122]=",ExpressionUUID->"dedbb9dd-1d28-e54c-8764-7afe9c9bc887"],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1: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
WEx+7y0HTYyfOJ1k20gUkcm3jfzYmP/VvJOTq8vRPxI9+RVNYYrb9lM/5mde
WQVpUFzHhCfhSQY8CU/CkwAAraltsYR2oFr2+YrrG6J8Kt7kf+GFF8rLyw8d
OnTmzJnc3Nz9+/dT7D/55JP8rXj715lv9UTK0thFiskfmF+wfO2bjiefefD5
DnV9z77U8chjifWvi0Vkksm/z1r9pdyjbXOTu34kUvKTzo1AIPhwX8+6U1LU
s+43aWkVoe9lY42Kexx4Ep6EJ+FJeBIAkDLY4JMU/mLyK27aDSXe5N+VuJKf
kipKlsYukpK/8zs/oJyfOvcJZT7F+8T7HyqSn/6ynoHxJn+MIpNJ/ne7TF+8
ePD6aG8sH4nSNjLgcnf0D3QNOBtsXeyW/PR2qKtsaCQ3sidqceBJeHJX5doB
T8KTevMkAEBT6MyXNYwoToHF+xHCEm/y79u3r6qq6uTJk+fPn8/Pzz9w4IDZ
bH7hhRf4W/FePYyFWJKf3xrT8chjY1nZ9/33HoTclN3zxC8Tu3oYC4kl/43S
0tfba2OP/ejJT9S3d1ytrLkSYVjXtNDh6BWvbsCT8GTagSfhSb15EgCgEey+
bMp88RGfijFtwhJv8lO222w2k8nU3Nzc2tpqNBrtdnt5eTl/Ky3Jr1ZRMflL
y25SOXn10q/PHHvrwkcfXvuUQp7NZIVe0vwv/+xf/nb/c2/nnBPfCltiTP6N
QKDIaMr9/KPBWAsJ2UMcG187WEe+sNcr4Ul4ks2EJ+HJDPckAEBrFI0h4tWi
rtvOnsHh6B+PN/nZcPeXL1++fv168iPhx4iMyc9KzqD96wXvf+HCe6zQ9D+V
ffK9ykuPluf83ZWsL148+NjRt8a8nriaU6InP7G4vKJIfnZZmUoKhvpkp2lk
y8qGRvpG9khfDjwJT7I58CQ8mcmeBACkANYqwob3VLSQ0Dmyb80f/ePxJj8b
7p5iv7y8PPmR8GNE3uTnheK9cmLwTF/bu10mVminQDPDPisqyeQneoaGKfnF
2mfd1KlofSsK7WXEIxD2LFr+Ep6EJ/kceBKezFhPAgC0JnSoc75ds7t0d11D
XKE6Oz09MT4evayvrSH5Yy8aJT+RX2McmZjiLysbGplbtL4nhdZP+5eGtnb2
RXRkwofVgifhSXgSnoQnAQApQHGeKx4wd/QPOIZHdl2DFKEqhcjEkj+BEmPy
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
Kuz3JVfPmmtFkfCkLCLhSbWQorqlELlXPZlKkQwpqlsKkTr3JGD41vxFRpM4
xzV1p6LJrLiYqApbXt/4qbO9Tz3f/9zLrsPHJ06fS6zQZ2kNtJ6x4x9sLnoy
UOTKuv9gfcnjF489kXvqzer8ow03Eyv0WVoDrefduhvza17VRf6hvuS/Xfjj
v10+KYo8WFd8xBRNFb170FgsivzR5ZO0ngN1RaqLlKK6pRAJT6qFFNUthci9
7clUipSiuqUQKYUnAccxPNLRP8Bf+tfXCw31Hq/6//AVq41c587K3piZfRAI
JF9oPWTmvmde9JiaM0pkk2uANo13jEV3vZ7A/a3kC62HtrgfXjpRMxTmUQh7
WKQU1S2FSCmqWwqRUlS3FCKlqG4pREpR3VKIlKK6gUhFk3nOs8RfGtts/aMu
1b+F3EtOW25pVcW6Yllp6+j/9X+o4mEpRNImRptD/UifKtuXWFrGnD/59H1V
NjQpREpR3VKIlKK6pRApRXVLIVKK6pZCpBTVLYVIKaobiCz7fMX1Dfyl0z1e
Y7Gq3r9iy+ujkzst3Ms9TFtHkldDpBC5su6nM1AtNjG+odEmnOQlGylESlHd
UoiUorqlEClFdUshUorqlkKkFNUthUgpqhsoEG+YXVldLTTUr/rvqf4t46fO
urOyNXIvK1Mf54xlZe95kQfrS94xFmm0ibGSba5+21C450VKUd1SiJSiuqUQ
KUV1SyFSiuqWQqQU1S2FSCmqGygoMTWyLsfb29vV5tah8QktvqX3qefV6hoU
qQQWFh0//dV2Ek99lULk4xePqdV/KVKhk9Dvf3KEJva2SCmqWwqRUlS3FCKl
qG4pREpR3VKIlKK6pRApRXUDETo2piNkNu0YHjHZOrX4lo07d/ufe1lT97Li
fGWfP9Ee1FKInFhefCL3lKabGCtP5380OD+9h0VKUd1SiJSiuqUQKUV1SyFS
iuqWQqQU1S2FSCmqGyjouu3sGRwO7hwqFxrq+Yjl6rJitbkOHw9ruYDfPzo0
xMvs3bvJGNidlb1QZVBdpLolGZFNroE3q/NTsJW9Yywq6e/YwyLhSXhSbyLh
SXhSbyLhyYzyJFBQZDT51vz3Hzwoa2wZn56pbbH8uaDQMThUYqhj02E/Fe9i
jUf+MixhWMt12mzXrl2rMxpZMdXXJ2Ng+paZghtcAH07aSCRpIFNh9XJ3ooi
Ut2SjMg3rl862nAzBVsZfculruY9LBKehCf1JhKehCf1JhKezChPqrXY3mDO
s1TRZA7utCQ327u1+yIyVSQDt1mttvZ2mvD7fL7lZVZoWhUDqyVS060sLsj5
CWxlpWVxf0SxlaVApFg6plz/dO69/+vk/3zl5kXPvVUtRMKT8CQ8qa5IeDIF
IuHJuETCkyBhOvoHHMMjM4uLxfUNgZ3+53ReIC7AXtLf9y/mTs3Msr8JLBZ9
K3N0d8/evZufn3/tITS9tLCQgIFd2WfpdJLOa/LKKiLpJOgMiLV+i4ulbCtL
RqQWW1nOoL1x2q2YedBYTOe8qRTJS4Pr9rfP/H8U/v7NjbNW47PXz0VaMhmR
8CQ8CU/Ck/AkPAlPJr/Y3mN7e7vQUL/sXaXD4ztzuzzamx337rrOSIvtupWN
Dg3dLC1N+PSTF/oWy/H3qUJ3lcquFMQoUt2SjEjVt7L6O6NfvHjwTF+bYj59
y9slV1MpkpXemclHPnxncnmBvaTw/y9Zr0VaOBmR8CQ8CU+qKxKeTIFIeBKe
1M6TySy2x5ieX6ixWK09vba+fj4z0gkCnT5Yuuy8v3G8i0UxcKfNxrayOqNx
y+fr/cVztm//My+LBlNcBh7/4CPjH46yU54oOulInqQqFtt1Kxs9cNj56uuD
+94Yy8qeKyrdepgJS2Yrzfc0W8SXqwNOLUSqu5WNeT1fzTv5m5Yw7x4xle7P
+ySVIlnO/zzvjGV86K53ic1xe+b+66nfRlo+GZHwJDwJT8KT8CQ8CU8mv9je
g46NqZSYGre27vOZteFuwaOXvB8F6z4R72JROtIH/H7f8jLbyvwud/OXvy6W
7rfeHR0ZCS3ra2th1+bOPsu6CdGBejByr3I+IS62a29/2upbv/GP3Y//hP6S
tp5/+znb0GauFtBL+/f+lS3GXvKNTl2RifX2D7uV+TcDj5bnfLvkT551f+i7
h+pKWF+mlIlscN3Oaiz/l0vHnXN3v/XBm5PLC557q//88cEKpz3SR5IRCU/C
k/AkPAlPwpPwZPKL7TG2t7fza+sKjfXzS8vJrIeOrmN5PvXup3gRtjLb67+v
rKw8d+5ce3v7oUOHHA7HyZMnTSaTZ34+7HrCdqRXSyRtZT1P/JJND//uHZK3
3NbBNyva9BarDbFsZcmIVPE89O3O+i/lHh1ZWQj7kbC9/bUTyfrUUdp/esv8
fNH5/B7rYVPp0/kf0USUTyUjEp6EJ+FJLUTCk/AkPBmKFJ4E9I9q7LR/WllD
pbPfmeTa6H/e5uiz9vROzy9E+f/vamA6G3WPjITdyoxGY25urs1mO3PmDG1l
58+fb25ujmsrU0ukuJW5/pBF8u5NTPLNauCVfezdxLayGEWqtZXdHBv4woX3
6G9coaqRSP/mhtin7lJXU4XT/l5d8fDCdPQPJiMSnoQn4UktRMKT8CQ8mXx1
p8WT8cKOJ69W1dbZOsXeCPLSOzJKPye3vIrKLacKfUjov93Uaae1FRrqO/oH
5jxLocvE2JE+7FbW2NhYXFzc2dlJ2xptZfn5+a2trXFtZWqJpK2s7R8ecb76
Om1N7d/6zvTlPDafb1YtX/nGktma2FYWo0hVtjLn0vzfXz3+amtlvKGqhcgG
123r+NDT+R9lNZbXjfTRHHbRsGPKtetnkxEJT8KT8CQ8CU/Ck/BkwvDjySuV
1d17ok9ySV0jOzxOZak9+MdYtrItn+/2b/6z9Qc/4qXrwmXaxE6cOEFb1v79
+2krO3DgAJ2ZRtrKXKfO0ndpJFLcyixf+2bfsy+J56G0WdGpKM3cdStLRuS+
axeS3Mo86/5HSs8/Wp7j3wxE+chBYzF9l9Yi2UXDubUVivrJlcVHPnxn2rdE
09EvGqoiEp6EJ+FJeBKehCfhSVVKcV1Dug9vVUA8Qr6uxgge/MTkamVNQ0eX
a+pOaGN7XIOx0KZkNpvtdnt7e7vNZqMzUNrEuru7m5ub+VsJn4cmI1K8UrM2
NEJnnaMHDotbmfeWgybGT5xO8jw0isjkz0N/bMz/at7JydXl6B/Z9Tw0eZFu
zxy/aEhR/1ZtwbPXz7WOD8YY+0mKhCfhSXgSnoQn4Ul4MmFUP55MO91Dw59W
1vzlF1VU1Vraklwb/c/Nt3p2/W/Hu5W98MIL5eXlhw4dOnPmTG5uLp2B0ib2
5JNP8rfi7cukikhxKwvML9CpqOPJZx58vvMSnYd2PPJYYn2ZYhGZ5Fa2z1r9
pdyjbXOTiYWqiiLnVr2HTaUU8qX9nWyO594q7Qi8G/di/13JiIQn4Ul4UguR
8CQ8CU8mVt1p92S88OPJK5U19tuDaq02jdA/x2Btv1pVe6Wi+lqt0eP1JrO2
jUAglv92vFvZrsS1laklkrayzu/8gLapqXOf0PZFm9LE+x8qtjL6y3phxbuV
xSgyma3s3S7TFy8evD7am3CoqiWywXX753lnTjZXUfI/e/3cpa4m1qcu9laR
5EXCk/AkPKmFSHgSnoQnQ5HCk/HCjyfp772NDdXXn0bohKK1p7esseX+gwda
f1e8W9m+ffuqqqpOnjx5/vz5/Pz8AwcOmM1mOgPlb8V7pUYVkbSV8dsQ6GRz
LCv7vv/eg5AbYOlcNbErNbGQ2FZ2o7T09fba2DexSFuZKiI7plxswCIq3/rg
zb7Zyf/nQhZrJ4n3dyUjEp6EJ+FJLUTCk6qIhCdVFAlPgnhhz9Rr6rR33U52
zLddiXcro+3IZrOZTKbm5ubW1laj0Wi328vLy/lbadnK1CoqbmV0gknl5NVL
vz5z7K0LH3147VPaoNhMVuglzf/yz/7lb/c/93bOOfGtsCUFyf9P597j919T
+NvvuH6Ueyqui4ZpSX54MhLwJDwJTyYvEp6EJ9PuScDZ3t4uqK1b8fmK6xtm
Fhc1/a54tzI2tPjly5evX7+e/KjjWojUyVbGSs6g/esF73/hwnus0PQ/lX3y
vcpLj5bn/N2VLDr9fOzoW2NeT8pCNXryf/34Pv/mBptmFw0bXLcTiP0UJz88
GQl4Ep6EJ9USCU9qLRKeBDFi7ekdcLmnZufoIFnT0Z7j3crY0OK0idG5Z/Kj
jmshUldbGS+0KVVODJ7pa3u3y8QKbYA0M9Kz3dOS/K/cvHjWagzs3KOdQJ+6
dCU/PBkJeBKehCdVFwlPaiQSngQxMj2/ULnzWG1bXz8dLWv3RXEZeHZ6emJ8
PHqJ9Gz3DN/KIhVdJb/n3uqz18/9l6zX/uup31Y47QnHfiqTH56MAjwJT8KT
qouEJzUSCU+C2Ckymnxr/q2t+8X1DVOzcxp9ixQGlkJkYltZikNVCpFSVLcU
IqWobilESlHdUoiUorqlEClFdUshUorqBgo6+gccwyM0Mb+0TEfLG4GAFt+y
1GR2HT6eAgOPnTg9X1Gzh0Uah3vfrM5PwVb2Xl1xUa9tD4uUorqlEClFdUsh
UorqlkKkFNUthUgpqlsKkVJUN1Aw51mqaDKz6a7bzqZOuxbfsj4x1f/cyykw
8OBrv10bSHDYailEuj3zT+SeSsFW9u9Ff+qdmdzDIqWobilESlHdUoiUorql
EClFdUshUorqlkKkFNWdOXxws9o6MBzLkkVG07LPF9wZ3YKOll1Td3IM6j9f
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
QB6KjKblkFEs2GVEdttClFAN+P2+5WWW/H6Xu/nLXxdL91vvjo6MhJb1tbWw
a3Nnn2Vd11g7dqSbO/iEuNiud6DQnqj1G//Y/fhP6C9p6/m3n7Pwn7laQC/t
3/tXthh7yXcE6opM7A6UsMnv3ww8Wp7z7ZI/edb9kZI/tEmEvWy2d1/5S8OI
fttGFJ4U7+thrT3wJDyZYuBJeBIAkGl0O4eosGl2VCyeUNP07s0OEZLf9vrv
Kysrz507197efujQIYfDcfLkSZPJ5JmfD7uesDd30In89vb2rr9iV5GU/D1P
/JJND//uHZK33NbBo552B4vVhliSPxmRKraNvN1Z/6XcoyMrC2E/wpJf0bOO
XUZ0usct3Q6q8bo2m26TX/RkcMeEJJ52W8yZNAFPwpMpBp6EJwEAmYbH6y0x
NfKXisthdMC8a6gG/H73yEjY5Dcajbm5uTab7cyZM5T858+fb25ujiv5KVHb
HH3Wnt7p+YUo6RpX8rv+kEXy7k1M8qgfeGUfezex5I9RpFrJf3Ns4AsX3qO/
kT7Ckt/SZRfDn+3KWdRXtlhmFhcrmsz6TH6FJxWDq0Rvr4Mn4xIJT8YIPAlP
AgAyEEp+yn82HTrU5/iVa7Hc3BE2+RsbG4uLizs7Oyn/Kfnz8/NbW1vjSv7g
Tq42ddrpRL7QUN/RPzDnWQpdJpbkb/uHR5yvvk4J3/6t70xfzmPzedS3fOUb
S2ZrYskfo0hVkt+5NP/3V4+/2loZ5SPiKEasmYsKP/fxrfmLjCaamJyZ1W3y
i54MbeSBJ+HJ1ANPwpMAgEyj2znUddvJpienZxTv2k+fiyX5t3y+27/5z9Yf
/IiXrguXKfZPnDhBab9//35K/gMHDhiNxkjJ7zp1tvbgH9mdEfEW+mDsyW/5
2jf7nn1JbBuhqB94ZR/N3DX5kxG579qFJJPfs+5/pPT8o+U5/s3Arskv9q+j
Cb5PdwyP0L6JTd9/8CAFBksA0ZPLXq/i0kb/xxfgSXgyxcCT8CQAINNQnCyz
uOAd7eIaIIji3Ww22+329vZ2m83W2dlJsd/d3d3c3MzfSrht5GplTUNHl2vq
TugDQOO6erg2NNLylW+MHjgsJr/3loMmxk+cTrJtJIrI5NtGfmzM/2reycnV
5egf4W0jeWUVVI+KK8IVTeawTTe6QuFJxc3mPR+dhyfhyRQDT8KTAIDMgfJq
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
n+p9+LOzQc1PX9krAyNt/jCHjKX5P2kuf+pS8rf97eFcJeGbH5lEJkWDTCKT
AKCaSJs/KSmpqKjo+PHjaWlpJpNp//79Vqt1165d2o8iffZQlyGp+bW3xjQ+
8/xgSuqK9+HqujdlO7b9NrpnD8MRXfNfvX79/YbS8GtfheZHJpFJ0SCTyCQA
qCbS5qdut9vt5eXl1dXVdXV1FoulpaWloKBA+xGX5tdr6dj812/k0zp+OeMP
p498/OW5s1nfUMmzM9mib+n8H732L3+zZ+fe9POBPwq51Gl+ZBKZFA0yiUwC
gGoibX72cfdfffXVt99+G/sn4RsxpCDNz1Z6T8vPsj/7wZefskWn/+nGxV8V
ZjxbkP63X6c8dSn5+cMfD865I3o4JeGbH5lEJkWDTCKTAKCaSJuffdw91X5B
QUHsn4RvxJBCNb+2qN4Lh3tOd9R/0lzOFv1SoDND/q8oxZsfmUQmRYNMIpMA
oJqISnVibGx4aGjztTA/j+YPf6H510MmkUnRIJPIJACoRopSlWLI6Jo/ipXw
zS/F7pZiSGRSL1LsbimGRCYBQBYzVVbnwaNxKNXBY6dcN0sSeEhLX/tHxaY4
NP+nt67lttujG1IKUuxuKYZEJvUixe6WYkhkEgBksTA82rnznTiUas+f/ne+
qyeBhxxwu7ZlnohD8/9n7uft4yPRDSkFKXa3FEMik3qRYndLMSQyCQASaX/j
rcXxCUMbdXluzvHy9tWFhcQe8sVLR+5F+IbrSNf9Be9zaQceLvmiHlIKUuxu
KYZEJvUixe6WYkhkEgBkMZiSOnoh3dBSvZv+tTP5SMIPudeck2otNrT5z9rM
HxRnxTKkFKTY3VIMiUzqRYrdLcWQyCQAyGJp2t2xY/dca7tBjfqgs4u275t0
JfyQrvm5lzKONY06Dap9x/gwbX/cMxvLkFKQYndLMSQyqRcpdrcUQyKTACAR
d3n1d7vfM6JXqVG73v7TVJFZkSFLeh2vXT5lRPlT7b+edSavszH2IaUgxe6W
YkhkUi9S7G4phkQmAUAi1KsdO3aPXkj3TU3rUqdLM7N307+mberSqBINSeX/
UsaxVGuxa35Ol853P3xw1mambapW+1LsbimGRCb1IsXulmJIZBIAJLI07R5M
SW179c3ud5MGUlKHT52PbtF1aQuOl7c7k4/E+HycpENS5+8157xw8dB207l9
ltzDFfnRLboubeG5tAMfFGep+aShFLtbiiGRSb1IsbulGBKZBAC5rC0tefud
U0Xm8eyr0S26Lm0hljc7J8aQvpXlHtdYXmdjRnN1dIuuS1vAO7Kl2N1SDIlM
6kWK3S3FkMgkAAAAAAAAAAAAAAAAAAAAAACAmk7mF/ePTfCeYgsYUilS3JMY
UilS3JMYEgCAfHjpiX82VNzUmm6u2PJadBm6ZOA51Fc6TxYAQypFinsSQypF
insSQwIA6EiXvrJ19WVX2/Qf7jEMqRQp7kkMqRQp7kkMCQCgI+orOhhnX/0B
fUX9Q2fS0oqIfXvQlOd/3Ff9YxN0Dp2gy1Bl0fn0U1psU+zyWh+y87UbwpBc
hpSCFPckhkQm/YLdkxhSqUwCgNGoQFjVsApifUVFxHrJ/+jJLLqAdghP1USL
vqWvgZfRtsZeG8au5X90sM8KMOiGMCSXIaUgxT2JIfUaUgpS3JMYUq8hAQD8
jw602Ql2YM76KvCZL3Zm0Nsi6Kd0Re1oPbCvtM1qR/TsJrQfsRvCkFyGlIIU
9ySGRCZFuycxpFKZBACjacfgYR7RswsEXjjwJWGBDcaO3wNvKJaHHTCkLkNK
QYp7EkPqNaQUpLgnMaReQwIA+B+/jmuTV4Vph/brXxXmf9RLh7LztGrS+kq7
vLbloJefaQ8RaMWIIeMwpBSkuCcxJDLpF+yexJBKZRIAEkZglQkLQypFinsS
QypFinsSQwIA6EiKvsKQSpHinsSQSpHinsSQAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAACgl/8DvkwcjQ==
    "], {{0, 285.75}, {712.5, 0}}, {0, 255},
    ColorFunction->RGBColor,
    ImageResolution->{96., 96.},
    RasterInterpolation->"High"],
   BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSize->Automatic,
  ImageSizeRaw->{712.5, 285.75},
  PlotRange->{{0, 712.5}, {0, 285.75}}]], "Output",
 CellLabel->
  "Out[123]=",ExpressionUUID->"80498989-86fe-3240-8f9d-9a3f7b1a7c35"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Debugging MakeNode", "Subsubsection",ExpressionUUID->"f23a400c-9778-1040-bdd5-4e23d945dd2a"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"QMRITools`SegmentationTools`$debugUnet", "=", "True"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"MakeNode", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"2", ",", "2"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"2", ",", "2"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"\"\<ResNet\>\"", ",", "3"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"32", ",", "16"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"\"\<GELU\>\"", ",", "3"}], "}"}]}], "}"}], ",", 
    RowBox[{"DropoutRate", "->", ".5"}], ",", 
    RowBox[{"RescaleMethod", "->", "\"\<Conv\>\""}]}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"QMRITools`SegmentationTools`$debugUnet", "=", "False"}], 
  ";"}]}], "Input",
 CellLabel->
  "In[108]:=",ExpressionUUID->"95ee7afd-0268-2748-b151-ecedb94e7541"],

Cell[CellGroupData[{

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1:eJztnFFu1DAQhlfwwiNXQHsJxBtPK15BHKAVpdqXIrVIiCPsSXqQvQQvPYsZ
dqTRMDN2x3G6DeH/pFYbbzKx4z92bP+bN5ffPn59sdls7l7Rv48XP97f3l78
/PSaNj7f3O2vb66+fLj5fnV9dfv28iUlvqO/X/T353MBYGGQLPf7vWxut9vN
iePxmIzgDzkcDl0RwH/O8YRsHk5werLZbBxyf38/a2bBajE6FB4eHnq7b38I
dAiS1HRIEtrtdl2h/CHQIUhCUqF2zCRyy+bTG4SHcH8NQBtqCWmIYRJZUV1D
jNoh1DxCiiCD6ZdDRXGiHlP7b2ud+7y5BWvF6JDEtlFIa7Y9EUaoHVKgQ5Cm
Nk4x7E/0BocOQZJ2nys79I6dMY8NAAAAAAAAAOBfB74v8OzA9wWWAHxfYAnA
9wWWAHxf4NmB7wssBPi+wBKA7wssAfi+wBKA7wsAAAAAAAAAAABgsZh5m91u
xzPSjdk/nswRkivRFFAOGZ9axNTQmvD+Q9FkQ2CUXlteaZyo1zuRAVPl68Do
kNTFmyybmkthgg6pmfWa0e0qn5f2oRuBDd58CmOvpUQdBzpcB0aHXOPcgeq2
0aD1k1zvE4VrRH4iNj41q0ukSx94N69/6HAdGP8ha4DruqFDjWmgGrsZHdKm
Xi6kHSgn2kxLZ+fI3EgW9RsEAb6yFeD9h7TpZdCGdsuIwffLeR3ytxzEPGHC
4rgOar+TMv5q7i59x6rNh23LBEcwiXIKaYRrOuTP3m6BfnkdeN9X+LtRM0nC
j3N+t4ZNUYLoeRsdRwQZ6pD39KqDDtdB0n+YZJpNcQTocB086j/sitNrUxwB
89gAAAAAAAAAAJ6UcLysE/28XxIeROsfQTeGt37Nrk3NRTZ5HG2uQxhfJjzz
Ng/Oj7nCElynz5XzElWZ2Pn0tAavYclRZvm+XV+mIJlaaBQwnD8cfxkdYyZz
5tWhPotXRe+8YmMeVceXikvOlPJuZqVeFo9CxnPO1W12C/1O4zqsHcuEZQkT
u3RY1EqcttxIWfRtWFR7yKeWcslNxDk3rtreNsGsUzcK2w5SO2kYP2kCCXc2
tW8Yz3mon6fWYb4WxnWob2T5IJn3d4QsUnMOuVyyWZSRpkxqD+WVJr5aZ9Fh
I35YrTW0DvkqSeTxlUqTc3kLpTxC+H5ZMjOLDntroZYYHq4TTStXohZMcq7z
I9eEssplpHLpJwrda4/0y/4i9IYKr0MtPgXvWjkyOhRthC87Hcy5iSlr9Gfo
l5O14BO97ytMFIXwjewzbBA16nuTXdasw7BHm6zDooyyOiUfLbwOtfgUtteL
7ttD+cr30eM51w82Z9NhSddCmDhhnMI5D/sUfS6+T3VTyeU6Vn6o4huZ5Np3
2KqYvD0aqj1OkfihCB8Nbp4Ppb5CFY3nnG95+ZzXYYkc8pk8lFwtNBJ7xylU
HGkSTd96VCYuTtF50w5G3TXrW8OPUxpGMv+00C5s25NWG3Wa+OZpRCqxFlwH
Md2xiTBjzsvfLwNsz9tIIlfrsdPR11sLtcSMDp+RyUYyX9h2qMEiz2h4O3PO
k8z44sEwMWxy5zKDjTDZSOYnSzOhJhd5RsPbmXOeZMYXD8KqB5bJb4Anclw=

    "], {{0, 43.5}, {162., 0}}, {0, 255},
    ColorFunction->RGBColor,
    ImageResolution->{96., 96.},
    RasterInterpolation->"High"],
   BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSize->Automatic,
  ImageSizeRaw->{162., 43.5},
  PlotRange->{{0, 162.}, {0, 43.5}}]], "Print",
 CellLabel->
  "During evaluation of \
In[108]:=",ExpressionUUID->"b13d19bd-7a33-fd4e-a310-ccccf11daab7"],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1: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
WGS/gU7CQMaIDkhJaQh46Hv7/wER5Kho
    "], {{0, 33.75}, {190.5, 0}}, {0, 255},
    ColorFunction->RGBColor,
    ImageResolution->{96., 96.},
    RasterInterpolation->"High"],
   BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSize->Automatic,
  ImageSizeRaw->{190.5, 33.75},
  PlotRange->{{0, 190.5}, {0, 33.75}}]], "Print",
 CellLabel->
  "During evaluation of \
In[108]:=",ExpressionUUID->"e6d204e7-2d90-714b-a293-0452b148f279"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Using MakeUnet", "Subsection",ExpressionUUID->"b7d9ef9c-b9cd-be44-a5c4-2cfa97e18675"],

Cell[CellGroupData[{

Cell["Make a Unet", "Subsubsection",ExpressionUUID->"1772b886-564d-db45-b4de-1df343a1afa5"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"chanIn", "=", "1"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"featOut", "=", "20"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"patch", "=", 
   RowBox[{"{", 
    RowBox[{"32", ",", "112", ",", "112"}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"net", "=", 
  RowBox[{"MakeUnet", "[", 
   RowBox[{"chanIn", ",", "featOut", ",", "patch"}], "]"}]}]}], "Input",
 CellLabel->"In[15]:=",ExpressionUUID->"026f59d9-747b-8048-b0fb-1ada69b3a1f2"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["NetGraph",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"], 
               ImageSizeCache -> {
                8.151761419745162, {0., 8.151761419745162}}], Appearance -> 
              None, BaseStyle -> {}, 
              ButtonFunction :> (Typeset`open$$ = True), Evaluator -> 
              Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{
              InsetBox[
               GraphicsBox[{{
                  EdgeForm[{
                    RGBColor[
                    0.817375, 0.31808499999999995`, 0.3521274999999998], 
                    Thickness[0.03]}], 
                  FaceForm[
                   RGBColor[0.9939125, 0.9772695, 0.97840425]], 
                  
                  RectangleBox[{-1.5, -1.5}, {29.5, 29.5}, RoundingRadius -> 
                   7]}, {
                  Thickness[0.03571428571428571], {
                   RGBColor[
                   0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                   Opacity[1.], 
                   CapForm["Round"], 
                   JoinForm["Round"], 
                   
                   JoinedCurveBox[{{{1, 4, 3}}}, {{{19.903200149536133`, 
                    20.}, {19.903200149536133`, 16.}, {17.903200149536133`, 
                    14.}, {13.903200149536133`, 14.}}}, CurveClosed -> {0}]}, {
                   RGBColor[
                   0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                   Opacity[1.], 
                   CapForm["Round"], 
                   JoinForm["Round"], 
                   
                   JoinedCurveBox[{{{1, 4, 3}}}, {{{13.903200149536133`, 
                    14.}, {9.903200149536133, 14.}, {7.903200149536133, 
                    16.}, {7.903200149536133, 20.}}}, CurveClosed -> {0}]}, {
                   RGBColor[
                   0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                   Opacity[1.], 
                   CapForm["Round"], 
                   JoinForm["Round"], 
                   
                   JoinedCurveBox[{{{1, 4, 3}}}, {{{13.903200149536133`, 
                    14.}, {9.903200149536133, 14.}, {7.903200149536133, 
                    12.}, {7.903200149536133, 8.}}}, CurveClosed -> {0}]}, {
                   FaceForm[{
                    Hue[
                    0.9744623655913979, 0.4881889763779528, 
                    0.996078431372549], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{18., 21.}, {22., 21.}, {22., 17.}, {18., 17.}, {
                    18., 21.}}}]}, {
                   FaceForm[{
                    RGBColor[0.7565, 0.09078, 0.1361699999999998], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{12., 16.}, {16., 16.}, {16., 12.}, {12., 12.}, {
                    12., 16.}}}]}, {
                   FaceForm[{
                    Hue[0.033923303834808266`, 0.44313725490196076`, 1.], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{6., 21.}, {10., 21.}, {10., 17.}, {6., 17.}, {6.,
                     21.}}}]}, {
                   FaceForm[{
                    Hue[0.04791666666666667, 0.6274509803921569, 1.], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{6., 10.}, {10., 10.}, {10., 6.}, {6., 6.}, {6., 
                    10.}}}]}}}, Background -> GrayLevel[1, 0], BaseStyle -> 
                GrayLevel[1], ImageSize -> 36, 
                PlotRange -> {{-2, 30}, {-2, 30}}], Center, Center, 32], 
              InsetBox[
               FrameBox[
                StyleBox[
                "\"uninitialized\"", StripOnInput -> False, LineColor -> 
                 RGBColor[0.66, 0, 0], FrontFaceColor -> RGBColor[0.66, 0, 0],
                  BackFaceColor -> RGBColor[0.66, 0, 0], GraphicsColor -> 
                 RGBColor[0.66, 0, 0], FontSize -> -3 + Inherited, FontColor -> 
                 RGBColor[0.66, 0, 0]], Background -> GrayLevel[1, 0.9], 
                BaselinePosition -> (Center -> Center), 
                FrameMargins -> {{0, 0}, {-1.5, -1.5}}, FrameStyle -> None, 
                RoundingRadius -> 3, StripOnInput -> False], {14, 14}]}, 
             ImagePadding -> {{0, 1}, {1, 0}}, ImageSize -> 
             Dynamic[{
               Automatic, 
                4 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], PlotRange -> {{-12, 40}, {-2, 30}}], 
            GridBox[{{
               TagBox[
                StyleBox[
                 TemplateBox[{
                   TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\"port\""}, 
                    "RowWithSeparators"], "\":\""}, "RowDefault"], 
                 "SummaryItemAnnotation"], "SummaryItem"], 
               TagBox[
                StyleBox[
                 TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                   StyleBox[
                   "\"(\[VeryThinSpace]size: \
1\[Times]32\[Times]112\[Times]112\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                  "RowWithSeparators"], "SummaryItem"], "SummaryItem"]}, {
               TagBox[
                StyleBox[
                 TemplateBox[{
                   TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\"port\""}, 
                    "RowWithSeparators"], "\":\""}, "RowDefault"], 
                 "SummaryItemAnnotation"], "SummaryItem"], 
               TagBox[
                StyleBox[
                 TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                   StyleBox[
                   "\"(\[VeryThinSpace]size: \
32\[Times]112\[Times]112\[Times]20\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                  "RowWithSeparators"], "SummaryItem"], "SummaryItem"]}}, 
             AutoDelete -> False, 
             BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {
              "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, AutoDelete -> 
          False, BaselinePosition -> {1, 1}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], True -> 
        GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"], 
               ImageSizeCache -> {
                8.151761419745162, {0., 8.151761419745162}}], Appearance -> 
              None, BaseStyle -> {}, 
              ButtonFunction :> (Typeset`open$$ = False), Evaluator -> 
              Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{
              InsetBox[
               GraphicsBox[{{
                  EdgeForm[{
                    RGBColor[
                    0.817375, 0.31808499999999995`, 0.3521274999999998], 
                    Thickness[0.03]}], 
                  FaceForm[
                   RGBColor[0.9939125, 0.9772695, 0.97840425]], 
                  
                  RectangleBox[{-1.5, -1.5}, {29.5, 29.5}, RoundingRadius -> 
                   7]}, {
                  Thickness[0.03571428571428571], {
                   RGBColor[
                   0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                   Opacity[1.], 
                   CapForm["Round"], 
                   JoinForm["Round"], 
                   
                   JoinedCurveBox[{{{1, 4, 3}}}, {{{19.903200149536133`, 
                    20.}, {19.903200149536133`, 16.}, {17.903200149536133`, 
                    14.}, {13.903200149536133`, 14.}}}, CurveClosed -> {0}]}, {
                   RGBColor[
                   0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                   Opacity[1.], 
                   CapForm["Round"], 
                   JoinForm["Round"], 
                   
                   JoinedCurveBox[{{{1, 4, 3}}}, {{{13.903200149536133`, 
                    14.}, {9.903200149536133, 14.}, {7.903200149536133, 
                    16.}, {7.903200149536133, 20.}}}, CurveClosed -> {0}]}, {
                   RGBColor[
                   0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                   Opacity[1.], 
                   CapForm["Round"], 
                   JoinForm["Round"], 
                   
                   JoinedCurveBox[{{{1, 4, 3}}}, {{{13.903200149536133`, 
                    14.}, {9.903200149536133, 14.}, {7.903200149536133, 
                    12.}, {7.903200149536133, 8.}}}, CurveClosed -> {0}]}, {
                   FaceForm[{
                    Hue[
                    0.9744623655913979, 0.4881889763779528, 
                    0.996078431372549], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{18., 21.}, {22., 21.}, {22., 17.}, {18., 17.}, {
                    18., 21.}}}]}, {
                   FaceForm[{
                    RGBColor[0.7565, 0.09078, 0.1361699999999998], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{12., 16.}, {16., 16.}, {16., 12.}, {12., 12.}, {
                    12., 16.}}}]}, {
                   FaceForm[{
                    Hue[0.033923303834808266`, 0.44313725490196076`, 1.], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{6., 21.}, {10., 21.}, {10., 17.}, {6., 17.}, {6.,
                     21.}}}]}, {
                   FaceForm[{
                    Hue[0.04791666666666667, 0.6274509803921569, 1.], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{6., 10.}, {10., 10.}, {10., 6.}, {6., 6.}, {6., 
                    10.}}}]}}}, Background -> GrayLevel[1, 0], BaseStyle -> 
                GrayLevel[1], ImageSize -> 36, 
                PlotRange -> {{-2, 30}, {-2, 30}}], Center, Center, 32], 
              InsetBox[
               FrameBox[
                StyleBox[
                "\"uninitialized\"", StripOnInput -> False, LineColor -> 
                 RGBColor[0.66, 0, 0], FrontFaceColor -> RGBColor[0.66, 0, 0],
                  BackFaceColor -> RGBColor[0.66, 0, 0], GraphicsColor -> 
                 RGBColor[0.66, 0, 0], FontSize -> -3 + Inherited, FontColor -> 
                 RGBColor[0.66, 0, 0]], Background -> GrayLevel[1, 0.9], 
                BaselinePosition -> (Center -> Center), 
                FrameMargins -> {{0, 0}, {-1.5, -1.5}}, FrameStyle -> None, 
                RoundingRadius -> 3, StripOnInput -> False], {14, 14}]}, 
             ImagePadding -> {{0, 1}, {1, 0}}, ImageSize -> 
             Dynamic[{
               Automatic, 
                4 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], PlotRange -> {{-12, 40}, {-2, 30}}], 
            GridBox[{{
               TagBox[
                
                DynamicModuleBox[{
                 NeuralNetworks`Private`NetGraph`selection = None}, 
                 GridBox[{{
                    TagBox[
                    GraphicsBox[{{
                    StyleBox[{
                    InsetBox["\"Input\"", 
                    
                    Offset[{0, -9}, {-11.999999999999996`, 
                    3.2153876434941414`*^-7}], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox["\"start\"", 
                    NCache[
                    Offset[{0, 
                    Rational[-41, 2]}, {-10.999999999999996`, 
                    2.9474386732029625`*^-7}], 
                    
                    Offset[{0, -20.5}, {-10.999999999999996`, 
                    2.9474386732029625`*^-7}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox["\"dec_1\"", 
                    NCache[
                    Offset[{0, 
                    Rational[-41, 2]}, {-1.9999999999999993`, 
                    5.3589794058235685`*^-8}], 
                    
                    Offset[{0, -20.5}, {-1.9999999999999993`, 
                    5.3589794058235685`*^-8}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox["\"map\"", 
                    NCache[
                    Offset[{0, 
                    Rational[-41, 2]}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}], 
                    
                    Offset[{0, -20.5}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox["\"dec_2\"", 
                    NCache[
                    Offset[{0, 
                    
                    Rational[-41, 
                    2]}, {-3.000000026794896, -0.9999999196153085}], 
                    
                    Offset[{
                    0, -20.5}, {-3.000000026794896, -0.9999999196153085}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox["\"dec_3\"", 
                    NCache[
                    Offset[{0, 
                    
                    Rational[-41, 
                    2]}, {-4.000000053589793, -1.9999998928204112`}], 
                    
                    Offset[{
                    0, -20.5}, {-4.000000053589793, -1.9999998928204112`}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox["\"dec_4\"", 
                    NCache[
                    Offset[{0, 
                    
                    Rational[-41, 
                    2]}, {-5.000000080384689, -2.999999866025514}], 
                    
                    Offset[{
                    0, -20.5}, {-5.000000080384689, -2.999999866025514}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox["\"enc_1\"", 
                    NCache[
                    Offset[{0, 
                    Rational[-41, 2]}, {-9.999999999999996, 
                    2.679489702911784*^-7}], 
                    
                    Offset[{0, -20.5}, {-9.999999999999996, 
                    2.679489702911784*^-7}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox["\"enc_2\"", 
                    NCache[
                    Offset[{0, 
                    
                    Rational[-41, 
                    2]}, {-9.000000026794893, -0.9999997588459264}], 
                    
                    Offset[{
                    0, -20.5}, {-9.000000026794893, -0.9999997588459264}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox["\"enc_3\"", 
                    NCache[
                    Offset[{0, 
                    
                    Rational[-41, 
                    2]}, {-8.000000053589792, -1.9999997856408231`}], 
                    
                    Offset[{
                    0, -20.5}, {-8.000000053589792, -1.9999997856408231`}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox["\"enc_4\"", 
                    NCache[
                    Offset[{0, 
                    
                    Rational[-41, 
                    2]}, {-7.000000080384688, -2.99999981243572}], 
                    
                    Offset[{
                    0, -20.5}, {-7.000000080384688, -2.99999981243572}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox["\"enc_5\"", 
                    NCache[
                    Offset[{0, 
                    
                    Rational[-41, 
                    2]}, {-6.000000107179586, -3.9999998392306164`}], 
                    
                    Offset[{
                    0, -20.5}, {-6.000000107179586, -3.9999998392306164`}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox["\"Output\"", 
                    Offset[{0, -9}, {0., 0.}], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}]}, 
                    StripOnInput -> False, FontColor -> 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824]], 
                    StyleBox[{
                    InsetBox[
                    StyleBox[
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"1\"", "\"32\"", "\"112\"", 
                    "\"112\""}, "RowWithSeparators"], StripOnInput -> False, 
                    LineColor -> 
                    RGBColor[
                    0.5615686274509804, 0.6211764705882353, 
                    0.6305882352941177], FrontFaceColor -> 
                    RGBColor[
                    0.5615686274509804, 0.6211764705882353, 
                    0.6305882352941177], BackFaceColor -> 
                    RGBColor[
                    0.5615686274509804, 0.6211764705882353, 
                    0.6305882352941177], GraphicsColor -> 
                    RGBColor[
                    0.5615686274509804, 0.6211764705882353, 
                    0.6305882352941177], FontColor -> 
                    RGBColor[
                    0.5615686274509804, 0.6211764705882353, 
                    0.6305882352941177]], 
                    
                    Offset[{2.1435917623294298`*^-7, 
                    5.4999999999999964`}, {-11.449999999999996`, 
                    3.0680157098339927`*^-7}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999993, -3.8974395678716905`*^-8}], 
                    InsetBox[
                    StyleBox[
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"32\"", "\"32\"", "\"112\"",
                     "\"112\""}, "RowWithSeparators"], StripOnInput -> False, 
                    LineColor -> 
                    RGBColor[
                    0.5615686274509804, 0.6211764705882353, 
                    0.6305882352941177], FrontFaceColor -> 
                    RGBColor[
                    0.5615686274509804, 0.6211764705882353, 
                    0.6305882352941177], BackFaceColor -> 
                    RGBColor[
                    0.5615686274509804, 0.6211764705882353, 
                    0.6305882352941177], GraphicsColor -> 
                    RGBColor[
                    0.5615686274509804, 0.6211764705882353, 
                    0.6305882352941177], FontColor -> 
                    RGBColor[
                    0.5615686274509804, 0.6211764705882353, 
                    0.6305882352941177]], 
                    
                    Offset[{2.1435917623294266`*^-7, 
                    5.499999999999996}, {-1.4499999999999993`, 
                    3.885260069222087*^-8}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999992, -3.8974395678716846`*^-8}], 
                    InsetBox[
                    StyleBox[
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"64\"", "\"16\"", "\"56\"", 
                    "\"56\""}, "RowWithSeparators"], StripOnInput -> False, 
                    LineColor -> 
                    RGBColor[
                    0.5615686274509804, 0.6211764705882353, 
                    0.6305882352941177], FrontFaceColor -> 
                    RGBColor[
                    0.5615686274509804, 0.6211764705882353, 
                    0.6305882352941177], BackFaceColor -> 
                    RGBColor[
                    0.5615686274509804, 0.6211764705882353, 
                    0.6305882352941177], GraphicsColor -> 
                    RGBColor[
                    0.5615686274509804, 0.6211764705882353, 
                    0.6305882352941177], FontColor -> 
                    RGBColor[
                    0.5615686274509804, 0.6211764705882353, 
                    0.6305882352941177]], 
                    
                    Offset[{-4.532230505142574, 
                    3.1159086392664173`}, {-2.4500000120577026`, \
-0.4499999343525021}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {0.5665288435029849,
                     0.8240419100259225}], 
                    InsetBox[
                    StyleBox[
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"128\"", "\"8\"", "\"28\"", 
                    "\"28\""}, "RowWithSeparators"], StripOnInput -> False, 
                    LineColor -> 
                    RGBColor[
                    0.5615686274509804, 0.6211764705882353, 
                    0.6305882352941177], FrontFaceColor -> 
                    RGBColor[
                    0.5615686274509804, 0.6211764705882353, 
                    0.6305882352941177], BackFaceColor -> 
                    RGBColor[
                    0.5615686274509804, 0.6211764705882353, 
                    0.6305882352941177], GraphicsColor -> 
                    RGBColor[
                    0.5615686274509804, 0.6211764705882353, 
                    0.6305882352941177], FontColor -> 
                    RGBColor[
                    0.5615686274509804, 0.6211764705882353, 
                    0.6305882352941177]], 
                    
                    Offset[{-4.532230505142572, 
                    3.1159086392664177`}, {-3.4500000388525995`, \
-1.4499999075576047`}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {0.566528843502985, 
                    0.8240419100259223}], 
                    InsetBox[
                    StyleBox[
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"256\"", "\"4\"", "\"14\"", 
                    "\"14\""}, "RowWithSeparators"], StripOnInput -> False, 
                    LineColor -> 
                    RGBColor[
                    0.5615686274509804, 0.6211764705882353, 
                    0.6305882352941177], FrontFaceColor -> 
                    RGBColor[
                    0.5615686274509804, 0.6211764705882353, 
                    0.6305882352941177], BackFaceColor -> 
                    RGBColor[
                    0.5615686274509804, 0.6211764705882353, 
                    0.6305882352941177], GraphicsColor -> 
                    RGBColor[
                    0.5615686274509804, 0.6211764705882353, 
                    0.6305882352941177], FontColor -> 
                    RGBColor[
                    0.5615686274509804, 0.6211764705882353, 
                    0.6305882352941177]], 
                    
                    Offset[{-4.532230505142574, 
                    3.1159086392664155`}, {-4.450000065647496, \
-2.4499998807627072`}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {0.5665288435029846,
                     0.8240419100259225}], 
                    InsetBox[
                    StyleBox[
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"32\"", "\"16\"", "\"56\"", 
                    "\"56\""}, "RowWithSeparators"], StripOnInput -> False, 
                    LineColor -> 
                    RGBColor[
                    0.5615686274509804, 0.6211764705882353, 
                    0.6305882352941177], FrontFaceColor -> 
                    RGBColor[
                    0.5615686274509804, 0.6211764705882353, 
                    0.6305882352941177], BackFaceColor -> 
                    RGBColor[
                    0.5615686274509804, 0.6211764705882353, 
                    0.6305882352941177], GraphicsColor -> 
                    RGBColor[
                    0.5615686274509804, 0.6211764705882353, 
                    0.6305882352941177], FontColor -> 
                    RGBColor[
                    0.5615686274509804, 0.6211764705882353, 
                    0.6305882352941177]], 
                    
                    Offset[{4.532230661050465, 
                    3.1159084124913012`}, {-9.45000001473719, \
-0.5499997467882229}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.5665288022711457, -0.8240419383728118}], 
                    InsetBox[
                    StyleBox[
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"32\"", "\"32\"", "\"112\"",
                     "\"112\""}, "RowWithSeparators"], StripOnInput -> False, 
                    LineColor -> 
                    RGBColor[
                    0.5615686274509804, 0.6211764705882353, 
                    0.6305882352941177], FrontFaceColor -> 
                    RGBColor[
                    0.5615686274509804, 0.6211764705882353, 
                    0.6305882352941177], BackFaceColor -> 
                    RGBColor[
                    0.5615686274509804, 0.6211764705882353, 
                    0.6305882352941177], GraphicsColor -> 
                    RGBColor[
                    0.5615686274509804, 0.6211764705882353, 
                    0.6305882352941177], FontColor -> 
                    RGBColor[
                    0.5615686274509804, 0.6211764705882353, 
                    0.6305882352941177]], 
                    
                    Offset[{2.1435917623294266`*^-7, 
                    5.499999999999996}, {-6.499999999999997, 
                    1.7416683068926599`*^-7}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999992, -3.8974395678716846`*^-8}], 
                    InsetBox[
                    StyleBox[
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"64\"", "\"8\"", "\"28\"", 
                    "\"28\""}, "RowWithSeparators"], StripOnInput -> False, 
                    LineColor -> 
                    RGBColor[
                    0.5615686274509804, 0.6211764705882353, 
                    0.6305882352941177], FrontFaceColor -> 
                    RGBColor[
                    0.5615686274509804, 0.6211764705882353, 
                    0.6305882352941177], BackFaceColor -> 
                    RGBColor[
                    0.5615686274509804, 0.6211764705882353, 
                    0.6305882352941177], GraphicsColor -> 
                    RGBColor[
                    0.5615686274509804, 0.6211764705882353, 
                    0.6305882352941177], FontColor -> 
                    RGBColor[
                    0.5615686274509804, 0.6211764705882353, 
                    0.6305882352941177]], 
                    
                    Offset[{4.532230661050468, 
                    3.1159084124912972`}, {-8.450000041532087, \
-1.5499997735831197`}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.566528802271145, -0.8240419383728124}], 
                    InsetBox[
                    StyleBox[
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"64\"", "\"16\"", "\"56\"", 
                    "\"56\""}, "RowWithSeparators"], StripOnInput -> False, 
                    LineColor -> 
                    RGBColor[
                    0.5615686274509804, 0.6211764705882353, 
                    0.6305882352941177], FrontFaceColor -> 
                    RGBColor[
                    0.5615686274509804, 0.6211764705882353, 
                    0.6305882352941177], BackFaceColor -> 
                    RGBColor[
                    0.5615686274509804, 0.6211764705882353, 
                    0.6305882352941177], GraphicsColor -> 
                    RGBColor[
                    0.5615686274509804, 0.6211764705882353, 
                    0.6305882352941177], FontColor -> 
                    RGBColor[
                    0.5615686274509804, 0.6211764705882353, 
                    0.6305882352941177]], 
                    
                    Offset[{2.1435917541001667`*^-7, 
                    5.499999999999996}, {-6.311111137906005, \
-0.9999998308944273}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999992, -3.897439552909394*^-8}], 
                    InsetBox[
                    StyleBox[
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"128\"", "\"4\"", "\"14\"", 
                    "\"14\""}, "RowWithSeparators"], StripOnInput -> False, 
                    LineColor -> 
                    RGBColor[
                    0.5615686274509804, 0.6211764705882353, 
                    0.6305882352941177], FrontFaceColor -> 
                    RGBColor[
                    0.5615686274509804, 0.6211764705882353, 
                    0.6305882352941177], BackFaceColor -> 
                    RGBColor[
                    0.5615686274509804, 0.6211764705882353, 
                    0.6305882352941177], GraphicsColor -> 
                    RGBColor[
                    0.5615686274509804, 0.6211764705882353, 
                    0.6305882352941177], FontColor -> 
                    RGBColor[
                    0.5615686274509804, 0.6211764705882353, 
                    0.6305882352941177]], 
                    
                    Offset[{4.532230661050464, 
                    3.1159084124913035`}, {-7.450000068326985, \
-2.5499998003780164`}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.5665288022711461, -0.8240419383728117}], 
                    InsetBox[
                    StyleBox[
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"128\"", "\"8\"", "\"28\"", 
                    "\"28\""}, "RowWithSeparators"], StripOnInput -> False, 
                    LineColor -> 
                    RGBColor[
                    0.5615686274509804, 0.6211764705882353, 
                    0.6305882352941177], FrontFaceColor -> 
                    RGBColor[
                    0.5615686274509804, 0.6211764705882353, 
                    0.6305882352941177], BackFaceColor -> 
                    RGBColor[
                    0.5615686274509804, 0.6211764705882353, 
                    0.6305882352941177], GraphicsColor -> 
                    RGBColor[
                    0.5615686274509804, 0.6211764705882353, 
                    0.6305882352941177], FontColor -> 
                    RGBColor[
                    0.5615686274509804, 0.6211764705882353, 
                    0.6305882352941177]], 
                    
                    Offset[{2.1435919039802859`*^-7, 
                    5.4999999999999964`}, {-6.000000053589792, \
-1.9999998392306173`}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999993, -3.8974398254187014`*^-8}], 
                    InsetBox[
                    StyleBox[
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"256\"", "\"2\"", "\"7\"", 
                    "\"7\""}, "RowWithSeparators"], StripOnInput -> False, 
                    LineColor -> 
                    RGBColor[
                    0.5615686274509804, 0.6211764705882353, 
                    0.6305882352941177], FrontFaceColor -> 
                    RGBColor[
                    0.5615686274509804, 0.6211764705882353, 
                    0.6305882352941177], BackFaceColor -> 
                    RGBColor[
                    0.5615686274509804, 0.6211764705882353, 
                    0.6305882352941177], GraphicsColor -> 
                    RGBColor[
                    0.5615686274509804, 0.6211764705882353, 
                    0.6305882352941177], FontColor -> 
                    RGBColor[
                    0.5615686274509804, 0.6211764705882353, 
                    0.6305882352941177]], 
                    
                    Offset[{4.532230661050466, 
                    3.1159084124913}, {-6.450000095121882, \
-3.549999827172913}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.5665288022711454, -0.824041938372812}], 
                    InsetBox[
                    StyleBox[
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"256\"", "\"4\"", "\"14\"", 
                    "\"14\""}, "RowWithSeparators"], StripOnInput -> False, 
                    LineColor -> 
                    RGBColor[
                    0.5615686274509804, 0.6211764705882353, 
                    0.6305882352941177], FrontFaceColor -> 
                    RGBColor[
                    0.5615686274509804, 0.6211764705882353, 
                    0.6305882352941177], BackFaceColor -> 
                    RGBColor[
                    0.5615686274509804, 0.6211764705882353, 
                    0.6305882352941177], GraphicsColor -> 
                    RGBColor[
                    0.5615686274509804, 0.6211764705882353, 
                    0.6305882352941177], FontColor -> 
                    RGBColor[
                    0.5615686274509804, 0.6211764705882353, 
                    0.6305882352941177]], 
                    
                    Offset[{2.1435917041401197`*^-7, 
                    5.499999999999996}, {-5.9111111914958006`, \
-2.9999998416123854`}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999992, -3.897439462072945*^-8}], 
                    InsetBox[
                    StyleBox[
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"512\"", "\"2\"", "\"7\"", 
                    "\"7\""}, "RowWithSeparators"], StripOnInput -> False, 
                    LineColor -> 
                    RGBColor[
                    0.5615686274509804, 0.6211764705882353, 
                    0.6305882352941177], FrontFaceColor -> 
                    RGBColor[
                    0.5615686274509804, 0.6211764705882353, 
                    0.6305882352941177], BackFaceColor -> 
                    RGBColor[
                    0.5615686274509804, 0.6211764705882353, 
                    0.6305882352941177], GraphicsColor -> 
                    RGBColor[
                    0.5615686274509804, 0.6211764705882353, 
                    0.6305882352941177], FontColor -> 
                    RGBColor[
                    0.5615686274509804, 0.6211764705882353, 
                    0.6305882352941177]], 
                    
                    Offset[{-4.532230505142572, 
                    3.1159086392664177`}, {-5.450000092442393, \
-3.4499998539678103`}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {0.566528843502985, 
                    0.8240419100259223}], 
                    InsetBox[
                    StyleBox[
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"32\"", "\"112\"", 
                    "\"112\"", "\"20\""}, "RowWithSeparators"], StripOnInput -> 
                    False, LineColor -> 
                    RGBColor[
                    0.5615686274509804, 0.6211764705882353, 
                    0.6305882352941177], FrontFaceColor -> 
                    RGBColor[
                    0.5615686274509804, 0.6211764705882353, 
                    0.6305882352941177], BackFaceColor -> 
                    RGBColor[
                    0.5615686274509804, 0.6211764705882353, 
                    0.6305882352941177], GraphicsColor -> 
                    RGBColor[
                    0.5615686274509804, 0.6211764705882353, 
                    0.6305882352941177], FontColor -> 
                    RGBColor[
                    0.5615686274509804, 0.6211764705882353, 
                    0.6305882352941177]], 
                    
                    Offset[{2.1435917623294266`*^-7, 
                    5.499999999999996}, {-0.4499999999999998, 
                    1.2057703663103027`*^-8}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999992, -3.8974395678716846`*^-8}], 
                    InsetBox[
                    StyleBox[
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"16\"", "\"32\"", "\"112\"",
                     "\"112\""}, "RowWithSeparators"], StripOnInput -> False, 
                    LineColor -> 
                    RGBColor[
                    0.5615686274509804, 0.6211764705882353, 
                    0.6305882352941177], FrontFaceColor -> 
                    RGBColor[
                    0.5615686274509804, 0.6211764705882353, 
                    0.6305882352941177], BackFaceColor -> 
                    RGBColor[
                    0.5615686274509804, 0.6211764705882353, 
                    0.6305882352941177], GraphicsColor -> 
                    RGBColor[
                    0.5615686274509804, 0.6211764705882353, 
                    0.6305882352941177], FontColor -> 
                    RGBColor[
                    0.5615686274509804, 0.6211764705882353, 
                    0.6305882352941177]], 
                    
                    Offset[{2.1435917623294253`*^-7, 
                    5.4999999999999964`}, {-10.449999999999996`, 
                    2.8000667395428143`*^-7}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999993, -3.8974395678716826`*^-8}]}, 
                    StripOnInput -> False, FontSize -> 8, FontWeight -> 
                    "Thin", FontColor -> GrayLevel[0.7]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-11.999999999999996`, 
                    3.2153876434941414`*^-7}, {-10.999999999999996`, 
                    2.9474386732029625`*^-7}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: \
1\[Times]32\[Times]112\[Times]112\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Input\"", 
                    GraphicsBox[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"array", 
                    Style[
                    "(\[VeryThinSpace]size: 1\[Times]32\[Times]112\[Times]112\
\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Input", 
                    Graphics[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {
                    TooltipBoxOptions -> {TooltipDelay -> 0.08}}], "Input"}], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-1.9999999999999993`, 
                    5.3589794058235685`*^-8}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: \
32\[Times]32\[Times]112\[Times]112\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Up\"", 
                    GraphicsBox[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"array", 
                    Style[
                    "(\[VeryThinSpace]size: \
32\[Times]32\[Times]112\[Times]112\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Up", 
                    Graphics[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {
                    TooltipBoxOptions -> {TooltipDelay -> 0.08}}], "Input"}], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-3.000000026794896, -0.9999999196153085}, \
{-1.9999999999999993`, 5.3589794058235685`*^-8}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: \
64\[Times]16\[Times]56\[Times]56\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Up\"", 
                    GraphicsBox[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Scale\""}, "RowDefault"], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"array", 
                    Style[
                    "(\[VeryThinSpace]size: 64\[Times]16\[Times]56\[Times]56\
\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Up", 
                    Graphics[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {
                    TooltipBoxOptions -> {TooltipDelay -> 0.08}}], "Scale"}], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-4.000000053589793, -1.9999998928204112`}, \
{-3.000000026794896, -0.9999999196153085}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: \
128\[Times]8\[Times]28\[Times]28\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Up\"", 
                    GraphicsBox[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Scale\""}, "RowDefault"], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"array", 
                    Style[
                    "(\[VeryThinSpace]size: 128\[Times]8\[Times]28\[Times]28\
\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Up", 
                    Graphics[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {
                    TooltipBoxOptions -> {TooltipDelay -> 0.08}}], "Scale"}], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-5.000000080384689, -2.999999866025514}, \
{-4.000000053589793, -1.9999998928204112`}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: \
256\[Times]4\[Times]14\[Times]14\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Up\"", 
                    GraphicsBox[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Scale\""}, "RowDefault"], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"array", 
                    Style[
                    "(\[VeryThinSpace]size: 256\[Times]4\[Times]14\[Times]14\
\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Up", 
                    Graphics[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {
                    TooltipBoxOptions -> {TooltipDelay -> 0.08}}], "Scale"}], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-9.999999999999996, 
                    2.679489702911784*^-7}, {-9.000000026794893, \
-0.9999997588459264}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: \
32\[Times]16\[Times]56\[Times]56\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Down\"", 
                    GraphicsBox[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"array", 
                    Style[
                    "(\[VeryThinSpace]size: 32\[Times]16\[Times]56\[Times]56\
\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Down", 
                    Graphics[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {
                    TooltipBoxOptions -> {TooltipDelay -> 0.08}}], "Input"}], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    LineBox[CompressedData["
1:eJwt1HtQVHUUB/B1eYPgIsvyjn0Q4OhuiJBEeFAhSxIo1MQhacUggnVRWBbk
vQssuzz3QvJQhEqNGWtItEFHQA6J4oi4RGAM5mDA8igiMK2ghLy/2e/87tx/
fr8zn3Pm3h8vLiUqnslgMKJePvR7dY2OAHNzL5sf+JeCH7fJl1ZmBNgpjc7r
0FOwOcq0STogQKE+jvF4gAKTmMsvlwAHnugqr1+lQBwh80atAM8cbd4UUUfB
ji30AQHWf/LD4LlMCpqe7W1+tleAt5/GF7UcoiC/JebPW3wBco2OhCb7UTAV
WsJcv8zHb+rbWXM2FNy7T4ePCVdT57gzWliijzfz8TpLfNf/phZc+k669p3k
o6U0vCXstBZCQunw8Uh/oOojiRaSejiSHg4fW72942UhWqiGuRqY4yFDZR+q
cdbCjQ46PDx/x2RP0GQVTARUTgZU8vAdxROjBKoKLNvFVu1iHs6/2dFTFVwF
/cTDxQLn75Pq/CvhKfFwUTDS6N0zWWHwcPFuVcb0r1QFEE4oFyVhURfYOysg
mXi4yDIRxsFCOXjkDnnlDrnjd91m3MTGckjPoOOO0VkTj6mwcuily7m6439+
XWc7/ikDtoQu8Ap+/kfdYf1XZVDbQMcN/R40MX9vLAV9Dd2gG46qTyHn3VJ4
nW5n0hVzQg7k7VzWgEpNxxV5q6KgpBYNjCiFo0qhK/Zet1ipOagBT+JxwcS0
qWtdRhqQEY8Lrhd1p8+0qeE28bjg5dmGbbZitcHjjAfOy5YCbdRQRzxOOKvI
PrPbuASmiccJy4M+iJZcUcF24nFEn799OLViFZQQjyOOtFkNd9uo4CHxOGKm
ZJqa6yw2eBzQxasn0i65GOTE44D4y1nrHU7FcId4HPDjRnl/Ql8R2BMPB80P
va/RphdBPfHYY6N/tG99cqHBY4/Bi76LPU6FBg8bpy5Zt/7WpwTCUbNRHT+b
bC9Xwk/Ew8bN3Fubgj2U8Crx2KFu7NxM4pDC4LHDtNOZF6sLFIb52CHnvf3H
OkUKg2cj3rAU8aZ/LjB4bLF56NPPHl3MhxniscXpt91ZrzHzgXx+kywUdQ2X
KWPzDPNhYYZvqdnDG7kGDwtvtgQXbnLIhX0rFyJXLmxAU7fnqzlpOTC/QMcG
I6ovZQ3qsqGcLhdgg7Vm4r8EW7Jh8yhdwBrHc+xTM9RZsHUbHSs0DRT0qmSZ
oPOiG7TE8G9Hg8cGM4C002eBtR6VHUJhBrBs6VjgeEPIdoVGDq3kAjBHzw3L
V4b16RBBPGYoLWoVee9OB8JZMMX25WOXsptkUEE8pvhC6uSpW0kDIfGY4J6p
B1/wD6UB+b3uG2PF4SI3+dVUiJ+feK5zMUZ5r6zgIDsVlo9SvosyI/zS+VHb
vryTUEgKMHHjh9faYpZOADPy2nTJW0zsVVsUKI+fgFN3RLFrneswfdf5N5T6
FJgl815nmHcKhNPb7zFw3KOk0GqrFL728QpkixkYOzpW45B6HF6Q+3CtOy7O
edf+2xL4Hzhydzk=
                    "]], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: \
32\[Times]32\[Times]112\[Times]112\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Skip\"", 
                    GraphicsBox[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Skip\""}, "RowDefault"], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"array", 
                    Style[
                    "(\[VeryThinSpace]size: \
32\[Times]32\[Times]112\[Times]112\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Skip", 
                    Graphics[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {
                    TooltipBoxOptions -> {TooltipDelay -> 0.08}}], "Skip"}], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-9.000000026794893, -0.9999997588459264}, \
{-8.000000053589792, -1.9999997856408231`}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 64\[Times]8\[Times]28\[Times]28\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Down\"", 
                    GraphicsBox[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"array", 
                    Style[
                    "(\[VeryThinSpace]size: 64\[Times]8\[Times]28\[Times]28\
\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Down", 
                    Graphics[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {
                    TooltipBoxOptions -> {TooltipDelay -> 0.08}}], "Input"}], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    LineBox[CompressedData["
1:eJxF038s1HEcx/Fbmg6XyOHOkTttGc2mZXarsX64Fa0fYuTHFCOb+bnZqEgp
PxKWKTtunX6Qn5VJEsrrQofOb801q1WmX0yprI5K3p9/vn98Pp89/nvu8/m8
ZVFJR2PW8Hi8XauLTqXrh9XdCcdM8s+urHztio8I/770UYa6QY8sck/GnDpx
UIYKzQ/mypwy47AmGZxnes6Rl9JDXXBFBn957XmyPki+Tp0og03H9Wyy3NH9
xk9fGU4nVF8g243t/tnttOrDXRfJ55ISjAQGKcSRsznkk7+aB3U6KY7ecskj
F6XmLPpWShGynJxPfrgQ7KBNkSI6sO0S+U2iq8LHR4rEuysFZOO5P/EaGylS
jfcVksPG1C6ZY47IOF5cRG7Q7T2VluaI3LaXxaz/+ae+FHtHFFs6XCH7aopE
8ZpNUMZFl5AH5mNU5eUO+HGg8BpZ9Nl0ttTbActV42XkuOn7O4qn7bH2n52S
3P46sCA/3x7rg6PKyXy94VW2mz2sm+oqyKGsR4JNJgsqci3rkWBLlPw6+Tfr
kcC9I0vN9dhBLtRWkl+wHjGuLs7fZvfJesRQHfKs5npEqK7JvMP1iHCf11tD
NmU9IrSGCOq4Hls8bQ6oJ9exHltozVQNZAPrscVw9PtGrscG+icu98g61mON
7ZX+zVyPNXb+Vj5g/4n1CKHwf9tC7mQ9Qhyqd27leoQIMkp6xPVYISK8tY1c
z3qsEPvw72PuvayQbK7oIPuxno1Ijy3s5HosMbG/BWQJ67HE1M1lDddjgZml
Pd1cjwUWAgp6yGasxwK/Gkd7ya1VXgFLVRvAMxZryUHled/n583BP36ij7xY
NFoyLTeHRVtNP7ksW7JNn70eYsuvA2SPtJgRnU4ApzhPHXmo7IxhWCJAWEPq
IDlS4Or5LdUMhs4bQ+TZyeRcN70pltXtw+w9DYe/5ClMEeH/bIT8LlkbudJp
gs0Tj0bJR7wn50q9TXDQWTXG5iMy67JigA+9X/w4eeNUl5fwBB/93lsn2HzV
K414PD4kRnrm/1gUfYs=
                    "]], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: \
64\[Times]16\[Times]56\[Times]56\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Skip\"", 
                    GraphicsBox[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Skip\""}, "RowDefault"], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"array", 
                    Style[
                    "(\[VeryThinSpace]size: 64\[Times]16\[Times]56\[Times]56\
\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Skip", 
                    Graphics[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {
                    TooltipBoxOptions -> {TooltipDelay -> 0.08}}], "Skip"}], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-8.000000053589792, -1.9999997856408231`}, \
{-7.000000080384688, -2.99999981243572}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: \
128\[Times]4\[Times]14\[Times]14\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Down\"", 
                    GraphicsBox[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"array", 
                    Style[
                    "(\[VeryThinSpace]size: 128\[Times]4\[Times]14\[Times]14\
\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Down", 
                    Graphics[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {
                    TooltipBoxOptions -> {TooltipDelay -> 0.08}}], "Input"}], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    LineBox[CompressedData["
1:eJxF0ltI0wEUx/F/plHG5O8253T/bU6IKbtUsxthm9iNLiiFBbUICTVGQhqE
kTNneEvWCEaRpgiWBLqHii5QhkciZ7qluZbNXdIplRIRYakRrs55+T8cfnze
vg9Hdeb80dI4hmH0/w8355hnFcNkQPWJi4OxWKyfFTZ8/jWqhLsvRsj9Bd2m
cJsSOrZq3OgLxctJT4uVUOJ2krP31xXZVEpYrEgYQs/G7WJzwwowG2zkbqc2
f86pgOvr49+gLcuF8017FWD/e4Ns2HJ/rfSnHMwJ6mH0ym5DR2urHJY2DJIP
Gye+OY1ysI5bRtAdO6y5jhkOmFqBB/3doLI3N3PQqHlINuoGg1d1HCR+LPKi
7epzmppxGTjql8ghFVtdVSUD4eb2t2gt92S4kpPBrbBpFG2VnEwvH0iH9JYZ
MrMHe9Jg6PLiO3QB9aTBIfWdcXQn9UhhzGf0oX9QjxSO26I+vkcKAW3je7SD
elLhdCDbj45QTypEG7xkHfWkQpmh8gO6hnokMB8RT/A9KdA6mhVAF1JPCsis
ngDfI4aurIpJvkcMar8oiDZRjxh6654F+R4R6PXmEN8jgseTKyG+RwTbmrrC
6CvUI4S+nH0RtJeNWcrKhJA3NUduy2hZ+SIQQoi59gldYp7mLj1Pht51yin6
l4H415LyZHD96SV/PbLw+1VmMkR8G6fR9wQPHtVGWMi72UM+tbB96UAnC34j
F0UnrbG7M0tZaB+rJ7/Md2UkbmLBeXCWfLbn9mqGYaHPtXMG/Q/r4Lsk
                    "]], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: \
128\[Times]8\[Times]28\[Times]28\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Skip\"", 
                    GraphicsBox[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Skip\""}, "RowDefault"], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"array", 
                    Style[
                    "(\[VeryThinSpace]size: 128\[Times]8\[Times]28\[Times]28\
\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Skip", 
                    Graphics[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {
                    TooltipBoxOptions -> {TooltipDelay -> 0.08}}], "Skip"}], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-7.000000080384688, -2.99999981243572}, \
{-6.000000107179586, -3.9999998392306164`}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 256\[Times]2\[Times]7\[Times]7\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Down\"", 
                    GraphicsBox[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"array", 
                    Style[
                    "(\[VeryThinSpace]size: 256\[Times]2\[Times]7\[Times]7\
\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Down", 
                    Graphics[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {
                    TooltipBoxOptions -> {TooltipDelay -> 0.08}}], "Input"}], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    LineBox[CompressedData["
1:eJwd0V0oQ3EcxvHRJEpJZ2dn5yxlItEkykstr624oLhAccGJSZs0mkkTdsEo
lIkOQlESFuWl1OrHooSE8tamRBzMGqVEGf/fxdO3z/UTwzeX1QdLJBLl/0iF
QF3IvyCu4vwxEAiF/IZS8fOEgyzbL/p9zpjnmeAgXZv8RDy/sRe5WcMBO8Sj
q6eKy7tjOHjgJ9FMZViUxsPCmOsKfSV+FTzbWUheZUXiqRKlt0/LgiOhFq3r
bw1nPhRAq5fRacLvtCAooM75g7ba53z2bAXM24ufic8HC7OH7hkQG2fQsba3
QZuNgcTcd3SLdcRjVTNgoAteiF2WDHXnmRwc3lF0lNltMZvl4N99RPPGniOj
Ug6pQuYr8Zo+XmnYocHUPIAO0h3qdToatrRu9LGpXCJG0CC9SPISj6+uRLdv
y6Dppg1dTZ/u0wYZ+MqcaG4BvlwqGfTmBNCXvGW965aCjFnNG/FwkfS7aIaC
YJMJnVdVeaCqp+DBuYj2j7erwlMouOu4Rk/gXxR8Lkl9xH8gavz1
                    "]], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: \
256\[Times]4\[Times]14\[Times]14\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Skip\"", 
                    GraphicsBox[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Skip\""}, "RowDefault"], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"array", 
                    Style[
                    "(\[VeryThinSpace]size: 256\[Times]4\[Times]14\[Times]14\
\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Skip", 
                    Graphics[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {
                    TooltipBoxOptions -> {TooltipDelay -> 0.08}}], "Skip"}], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-6.000000107179586, -3.9999998392306164`}, \
{-5.000000080384689, -2.999999866025514}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 512\[Times]2\[Times]7\[Times]7\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Skip\"", 
                    GraphicsBox[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Scale\""}, "RowDefault"], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"array", 
                    Style[
                    "(\[VeryThinSpace]size: 512\[Times]2\[Times]7\[Times]7\
\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Skip", 
                    Graphics[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {
                    TooltipBoxOptions -> {TooltipDelay -> 0.08}}], "Scale"}], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: \
32\[Times]112\[Times]112\[Times]20\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    Offset[{0, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Output\""}, "RowDefault"], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"array", 
                    Style[
                    "(\[VeryThinSpace]size: \
32\[Times]112\[Times]112\[Times]20\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["", 
                    Offset[{0, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {
                    TooltipBoxOptions -> {TooltipDelay -> 0.08}}], "Output"}], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-10.999999999999996`, 
                    2.9474386732029625`*^-7}, {-9.999999999999996, 
                    2.679489702911784*^-7}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: \
16\[Times]32\[Times]112\[Times]112\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"array", 
                    Style[
                    "(\[VeryThinSpace]size: \
16\[Times]32\[Times]112\[Times]112\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {
                    TooltipBoxOptions -> {TooltipDelay -> 0.08}}], "Input"}], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824]]}, Center], "Tooltip"]& ]}, {
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-11.449999999999996`,
                     3.0680157098339927`*^-7}, {-0.25, 0}, 
                    Offset[10], {1., -3.897439567871693*^-8}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: \
1\[Times]32\[Times]112\[Times]112\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Input\"", 
                    GraphicsBox[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"array", 
                    Style[
                    "(\[VeryThinSpace]size: 1\[Times]32\[Times]112\[Times]112\
\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Input", 
                    Graphics[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {
                    TooltipBoxOptions -> {TooltipDelay -> 0.08}}], "Input"}], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-1.4499999999999993`,
                     3.885260069222087*^-8}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -3.8974395678716865`*^-8}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: \
32\[Times]32\[Times]112\[Times]112\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Up\"", 
                    GraphicsBox[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"array", 
                    Style[
                    
                    "(\[VeryThinSpace]size: \
32\[Times]32\[Times]112\[Times]112\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Up", 
                    Graphics[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {
                    TooltipBoxOptions -> {TooltipDelay -> 0.08}}], "Input"}], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 
                    0.3333333333333333}}]}], {-2.4500000120577026`, \
-0.4499999343525021}, {-0.25, 0}, 
                    Offset[10], {1.0000000267948967`, 1.4545454155710584`}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: \
64\[Times]16\[Times]56\[Times]56\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Up\"", 
                    GraphicsBox[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Scale\""}, "RowDefault"], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"array", 
                    Style[
                    "(\[VeryThinSpace]size: 64\[Times]16\[Times]56\[Times]56\
\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Up", 
                    Graphics[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {
                    TooltipBoxOptions -> {TooltipDelay -> 0.08}}], "Scale"}], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 
                    0.3333333333333333}}]}], {-3.4500000388525995`, \
-1.4499999075576047`}, {-0.25, 0}, 
                    Offset[10], {1.000000026794897, 1.4545454155710584`}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: \
128\[Times]8\[Times]28\[Times]28\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Up\"", 
                    GraphicsBox[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Scale\""}, "RowDefault"], 
                    RGBColor[0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"array", 
                    Style[
                    "(\[VeryThinSpace]size: 128\[Times]8\[Times]28\[Times]28\
\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Up", 
                    Graphics[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {
                    TooltipBoxOptions -> {TooltipDelay -> 0.08}}], "Scale"}], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 
                    0.3333333333333333}}]}], {-4.450000065647496, \
-2.4499998807627072`}, {-0.25, 0}, 
                    Offset[10], {1.000000026794896, 1.4545454155710584`}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: \
256\[Times]4\[Times]14\[Times]14\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Up\"", 
                    GraphicsBox[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Scale\""}, "RowDefault"], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"array", 
                    Style[
                    "(\[VeryThinSpace]size: 256\[Times]4\[Times]14\[Times]14\
\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Up", 
                    Graphics[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {
                    TooltipBoxOptions -> {TooltipDelay -> 0.08}}], "Scale"}], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 
                    0.3333333333333333}}]}], {-9.45000001473719, \
-0.5499997467882229}, {-0.25, 0}, 
                    Offset[10], {0.999999973205103, -1.4545454935198499`}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: \
32\[Times]16\[Times]56\[Times]56\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Down\"", 
                    GraphicsBox[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"array", 
                    Style[
                    "(\[VeryThinSpace]size: 32\[Times]16\[Times]56\[Times]56\
\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Down", 
                    Graphics[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {
                    TooltipBoxOptions -> {TooltipDelay -> 0.08}}], "Input"}], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-6.499999999999997, 
                    1.7416683068926599`*^-7}, {-0.25, 0}, 
                    Offset[10], {
                    0.3777777777777782, -1.4723660589737502`*^-8}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: \
32\[Times]32\[Times]112\[Times]112\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Skip\"", 
                    GraphicsBox[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Skip\""}, "RowDefault"], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"array", 
                    Style[
                    "(\[VeryThinSpace]size: \
32\[Times]32\[Times]112\[Times]112\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Skip", 
                    Graphics[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {
                    TooltipBoxOptions -> {TooltipDelay -> 0.08}}], "Skip"}], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 
                    0.3333333333333333}}]}], {-8.450000041532087, \
-1.5499997735831197`}, {-0.25, 0}, 
                    Offset[10], {0.9999999732051013, -1.4545454935198499`}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 64\[Times]8\[Times]28\[Times]28\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Down\"", 
                    GraphicsBox[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"array", 
                    Style[
                    "(\[VeryThinSpace]size: 64\[Times]8\[Times]28\[Times]28\
\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Down", 
                    Graphics[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {
                    TooltipBoxOptions -> {TooltipDelay -> 0.08}}], "Input"}], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 
                    0.3333333333333333}}]}], {-6.311111137906005, \
-0.9999998308944273}, {-0.25, 0}, 
                    Offset[10], {
                    0.17777777777777803`, -6.928781427394494*^-9}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: \
64\[Times]16\[Times]56\[Times]56\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Skip\"", 
                    GraphicsBox[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Skip\""}, "RowDefault"], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"array", 
                    Style[
                    "(\[VeryThinSpace]size: 64\[Times]16\[Times]56\[Times]56\
\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Skip", 
                    Graphics[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {
                    TooltipBoxOptions -> {TooltipDelay -> 0.08}}], "Skip"}], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 
                    0.3333333333333333}}]}], {-7.450000068326985, \
-2.5499998003780164`}, {-0.25, 0}, 
                    Offset[10], {0.9999999732051039, -1.4545454935198499`}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: \
128\[Times]4\[Times]14\[Times]14\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Down\"", 
                    GraphicsBox[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"array", 
                    Style[
                    "(\[VeryThinSpace]size: 128\[Times]4\[Times]14\[Times]14\
\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Down", 
                    Graphics[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {
                    TooltipBoxOptions -> {TooltipDelay -> 0.08}}], "Input"}], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 
                    0.3333333333333333}}]}], {-6.000000053589792, \
-1.9999998392306173`}, {-0.25, 0}, 
                    Offset[10], {
                    0.08888888888888857, -3.464390955927725*^-9}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: \
128\[Times]8\[Times]28\[Times]28\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Skip\"", 
                    GraphicsBox[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Skip\""}, "RowDefault"], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"array", 
                    Style[
                    "(\[VeryThinSpace]size: 128\[Times]8\[Times]28\[Times]28\
\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Skip", 
                    Graphics[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {
                    TooltipBoxOptions -> {TooltipDelay -> 0.08}}], "Skip"}], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 
                    0.3333333333333333}}]}], {-6.450000095121882, \
-3.549999827172913}, {-0.25, 0}, 
                    Offset[10], {0.9999999732051021, -1.4545454935198496`}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 256\[Times]2\[Times]7\[Times]7\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Down\"", 
                    GraphicsBox[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"array", 
                    Style[
                    "(\[VeryThinSpace]size: 256\[Times]2\[Times]7\[Times]7\
\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Down", 
                    Graphics[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["]", 
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {
                    TooltipBoxOptions -> {TooltipDelay -> 0.08}}], "Input"}], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 
                    0.3333333333333333}}]}], {-5.9111111914958006`, \
-2.9999998416123854`}, {-0.25, 0}, 
                    Offset[10], {
                    0.08888888888888946, -3.464390632953754*^-9}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: \
256\[Times]4\[Times]14\[Times]14\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Skip\"", 
                    GraphicsBox[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Skip\""}, "RowDefault"], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"array", 
                    Style[
                    "(\[VeryThinSpace]size: 256\[Times]4\[Times]14\[Times]14\
\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Skip", 
                    Graphics[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {
                    TooltipBoxOptions -> {TooltipDelay -> 0.08}}], "Skip"}], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 
                    0.3333333333333333}}]}], {-5.450000092442393, \
-3.4499998539678103`}, {-0.25, 0}, 
                    Offset[10], {1.000000026794897, 1.4545454155710584`}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 512\[Times]2\[Times]7\[Times]7\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Skip\"", 
                    GraphicsBox[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Scale\""}, "RowDefault"], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"array", 
                    Style[
                    "(\[VeryThinSpace]size: 512\[Times]2\[Times]7\[Times]7\
\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Skip", 
                    Graphics[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {
                    TooltipBoxOptions -> {TooltipDelay -> 0.08}}], "Scale"}], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -3.8974395678716865`*^-8}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: \
32\[Times]112\[Times]112\[Times]20\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    Offset[{0, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Output\""}, "RowDefault"], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"array", 
                    Style[
                    "(\[VeryThinSpace]size: \
32\[Times]112\[Times]112\[Times]20\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["", 
                    Offset[{0, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {
                    TooltipBoxOptions -> {TooltipDelay -> 0.08}}], "Output"}], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-10.449999999999996`,
                     2.8000667395428143`*^-7}, {-0.25, 0}, 
                    Offset[10], {1., -3.897439567871685*^-8}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: \
16\[Times]32\[Times]112\[Times]112\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"array", 
                    Style[
                    "(\[VeryThinSpace]size: \
16\[Times]32\[Times]112\[Times]112\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {
                    TooltipBoxOptions -> {TooltipDelay -> 0.08}}], "Input"}], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824]]}, Center], "Tooltip"]& ]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], 
                    StyleBox[{
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{-11.999999999999996`, 3.2153876434941414`*^-7}, 
                    Offset[{2., 2.}, {0., 0.}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Input\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["Input", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 1), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{{
                    EdgeForm[{
                    RGBColor[
                    0.817375, 0.31808499999999995`, 0.3521274999999998], 
                    Thickness[0.03]}], 
                    FaceForm[
                    RGBColor[0.9939125, 0.9772695, 0.97840425]], 
                    
                    RectangleBox[{-1.5, -1.5}, {29.5, 29.5}, RoundingRadius -> 
                    7]}, {
                    Thickness[0.03571428571428571], {
                    RGBColor[
                    0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                    Opacity[1.], 
                    CapForm["Round"], 
                    JoinForm["Round"], 
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{19.903200149536133`, 
                    20.}, {19.903200149536133`, 16.}, {17.903200149536133`, 
                    14.}, {13.903200149536133`, 14.}}}, CurveClosed -> {0}]}, {
                    RGBColor[
                    0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                    Opacity[1.], 
                    CapForm["Round"], 
                    JoinForm["Round"], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{13.903200149536133`, 
                    14.}, {9.903200149536133, 14.}, {7.903200149536133, 
                    16.}, {7.903200149536133, 20.}}}, CurveClosed -> {0}]}, {
                    RGBColor[
                    0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                    Opacity[1.], 
                    CapForm["Round"], 
                    JoinForm["Round"], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{13.903200149536133`, 
                    14.}, {9.903200149536133, 14.}, {7.903200149536133, 
                    12.}, {7.903200149536133, 8.}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    Hue[
                    0.9744623655913979, 0.4881889763779528, 
                    0.996078431372549], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{18., 21.}, {22., 21.}, {22., 17.}, {18., 17.}, {
                    18., 21.}}}]}, {
                    FaceForm[{
                    RGBColor[0.7565, 0.09078, 0.1361699999999998], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{12., 16.}, {16., 16.}, {16., 12.}, {12., 12.}, {
                    12., 16.}}}]}, {
                    FaceForm[{
                    Hue[0.033923303834808266`, 0.44313725490196076`, 1.], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{6., 21.}, {10., 21.}, {10., 17.}, {6., 17.}, {6.,
                     21.}}}]}, {
                    FaceForm[{
                    Hue[0.04791666666666667, 0.6274509803921569, 1.], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{6., 10.}, {10., 10.}, {10., 6.}, {6., 6.}, {6., 
                    10.}}}]}}}, Background -> GrayLevel[1, 0], BaseStyle -> 
                    GrayLevel[1], ImageSize -> 36, 
                    PlotRange -> {{-2, 30}, {-2, 30}}], {-10.999999999999996`,
                     2.9474386732029625`*^-7}], 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"start\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    "NetGraph", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["start", Bold], 
                    Style[
                    NetGraph, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 2), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{{
                    EdgeForm[{
                    RGBColor[
                    0.817375, 0.31808499999999995`, 0.3521274999999998], 
                    Thickness[0.03]}], 
                    FaceForm[
                    RGBColor[0.9939125, 0.9772695, 0.97840425]], 
                    
                    RectangleBox[{-1.5, -1.5}, {29.5, 29.5}, RoundingRadius -> 
                    7]}, {
                    Thickness[0.03571428571428571], {
                    RGBColor[
                    0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                    Opacity[1.], 
                    CapForm["Round"], 
                    JoinForm["Round"], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{19.903200149536133`, 
                    20.}, {19.903200149536133`, 16.}, {17.903200149536133`, 
                    14.}, {13.903200149536133`, 14.}}}, CurveClosed -> {0}]}, {
                    RGBColor[
                    0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                    Opacity[1.], 
                    CapForm["Round"], 
                    JoinForm["Round"], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{13.903200149536133`, 
                    14.}, {9.903200149536133, 14.}, {7.903200149536133, 
                    16.}, {7.903200149536133, 20.}}}, CurveClosed -> {0}]}, {
                    RGBColor[
                    0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                    Opacity[1.], 
                    CapForm["Round"], 
                    JoinForm["Round"], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{13.903200149536133`, 
                    14.}, {9.903200149536133, 14.}, {7.903200149536133, 
                    12.}, {7.903200149536133, 8.}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    Hue[
                    0.9744623655913979, 0.4881889763779528, 
                    0.996078431372549], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{18., 21.}, {22., 21.}, {22., 17.}, {18., 17.}, {
                    18., 21.}}}]}, {
                    FaceForm[{
                    RGBColor[0.7565, 0.09078, 0.1361699999999998], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{12., 16.}, {16., 16.}, {16., 12.}, {12., 12.}, {
                    12., 16.}}}]}, {
                    FaceForm[{
                    Hue[0.033923303834808266`, 0.44313725490196076`, 1.], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{6., 21.}, {10., 21.}, {10., 17.}, {6., 17.}, {6.,
                     21.}}}]}, {
                    FaceForm[{
                    Hue[0.04791666666666667, 0.6274509803921569, 1.], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{6., 10.}, {10., 10.}, {10., 6.}, {6., 6.}, {6., 
                    10.}}}]}}}, Background -> GrayLevel[1, 0], BaseStyle -> 
                    GrayLevel[1], ImageSize -> 36, 
                    PlotRange -> {{-2, 30}, {-2, 30}}], {-1.9999999999999993`,
                     5.3589794058235685`*^-8}], 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"dec_1\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    "NetGraph", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["dec_1", Bold], 
                    Style[
                    NetGraph, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 3), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{{
                    EdgeForm[{
                    RGBColor[
                    0.817375, 0.31808499999999995`, 0.3521274999999998], 
                    Thickness[0.03]}], 
                    FaceForm[
                    RGBColor[0.9939125, 0.9772695, 0.97840425]], 
                    
                    RectangleBox[{-1.5, -1.5}, {29.5, 29.5}, RoundingRadius -> 
                    7]}, {
                    Thickness[0.03571428571428571], {
                    RGBColor[
                    0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                    Opacity[1.], 
                    CapForm["Round"], 
                    JoinForm["Round"], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{19.903200149536133`, 
                    20.}, {19.903200149536133`, 16.}, {17.903200149536133`, 
                    14.}, {13.903200149536133`, 14.}}}, CurveClosed -> {0}]}, {
                    RGBColor[
                    0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                    Opacity[1.], 
                    CapForm["Round"], 
                    JoinForm["Round"], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{13.903200149536133`, 
                    14.}, {9.903200149536133, 14.}, {7.903200149536133, 
                    16.}, {7.903200149536133, 20.}}}, CurveClosed -> {0}]}, {
                    RGBColor[
                    0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                    Opacity[1.], 
                    CapForm["Round"], 
                    JoinForm["Round"], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{13.903200149536133`, 
                    14.}, {9.903200149536133, 14.}, {7.903200149536133, 
                    12.}, {7.903200149536133, 8.}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    Hue[
                    0.9744623655913979, 0.4881889763779528, 
                    0.996078431372549], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{18., 21.}, {22., 21.}, {22., 17.}, {18., 17.}, {
                    18., 21.}}}]}, {
                    FaceForm[{
                    RGBColor[0.7565, 0.09078, 0.1361699999999998], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{12., 16.}, {16., 16.}, {16., 12.}, {12., 12.}, {
                    12., 16.}}}]}, {
                    FaceForm[{
                    Hue[0.033923303834808266`, 0.44313725490196076`, 1.], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{6., 21.}, {10., 21.}, {10., 17.}, {6., 17.}, {6.,
                     21.}}}]}, {
                    FaceForm[{
                    Hue[0.04791666666666667, 0.6274509803921569, 1.], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{6., 10.}, {10., 10.}, {10., 6.}, {6., 6.}, {6., 
                    10.}}}]}}}, Background -> GrayLevel[1, 0], BaseStyle -> 
                    GrayLevel[1], ImageSize -> 36, 
                    PlotRange -> {{-2, 30}, {-2, 30}}], {-0.9999999999999997, 
                    2.6794897029117842`*^-8}], 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"map\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    "NetGraph", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["map", Bold], 
                    Style[
                    NetGraph, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 4), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{{
                    EdgeForm[{
                    RGBColor[
                    0.817375, 0.31808499999999995`, 0.3521274999999998], 
                    Thickness[0.03]}], 
                    FaceForm[
                    RGBColor[0.9939125, 0.9772695, 0.97840425]], 
                    
                    RectangleBox[{-1.5, -1.5}, {29.5, 29.5}, RoundingRadius -> 
                    7]}, {
                    Thickness[0.03571428571428571], {
                    RGBColor[
                    0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                    Opacity[1.], 
                    CapForm["Round"], 
                    JoinForm["Round"], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{19.903200149536133`, 
                    20.}, {19.903200149536133`, 16.}, {17.903200149536133`, 
                    14.}, {13.903200149536133`, 14.}}}, CurveClosed -> {0}]}, {
                    RGBColor[
                    0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                    Opacity[1.], 
                    CapForm["Round"], 
                    JoinForm["Round"], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{13.903200149536133`, 
                    14.}, {9.903200149536133, 14.}, {7.903200149536133, 
                    16.}, {7.903200149536133, 20.}}}, CurveClosed -> {0}]}, {
                    RGBColor[
                    0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                    Opacity[1.], 
                    CapForm["Round"], 
                    JoinForm["Round"], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{13.903200149536133`, 
                    14.}, {9.903200149536133, 14.}, {7.903200149536133, 
                    12.}, {7.903200149536133, 8.}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    Hue[
                    0.9744623655913979, 0.4881889763779528, 
                    0.996078431372549], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{18., 21.}, {22., 21.}, {22., 17.}, {18., 17.}, {
                    18., 21.}}}]}, {
                    FaceForm[{
                    RGBColor[0.7565, 0.09078, 0.1361699999999998], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{12., 16.}, {16., 16.}, {16., 12.}, {12., 12.}, {
                    12., 16.}}}]}, {
                    FaceForm[{
                    Hue[0.033923303834808266`, 0.44313725490196076`, 1.], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{6., 21.}, {10., 21.}, {10., 17.}, {6., 17.}, {6.,
                     21.}}}]}, {
                    FaceForm[{
                    Hue[0.04791666666666667, 0.6274509803921569, 1.], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{6., 10.}, {10., 10.}, {10., 6.}, {6., 6.}, {6., 
                    10.}}}]}}}, Background -> GrayLevel[1, 0], BaseStyle -> 
                    GrayLevel[1], ImageSize -> 36, 
                    PlotRange -> {{-2, 30}, {-2, 
                    30}}], {-3.000000026794896, -0.9999999196153085}], 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"dec_2\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    "NetGraph", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["dec_2", Bold], 
                    Style[
                    NetGraph, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 5), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{{
                    EdgeForm[{
                    RGBColor[
                    0.817375, 0.31808499999999995`, 0.3521274999999998], 
                    Thickness[0.03]}], 
                    FaceForm[
                    RGBColor[0.9939125, 0.9772695, 0.97840425]], 
                    
                    RectangleBox[{-1.5, -1.5}, {29.5, 29.5}, RoundingRadius -> 
                    7]}, {
                    Thickness[0.03571428571428571], {
                    RGBColor[
                    0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                    Opacity[1.], 
                    CapForm["Round"], 
                    JoinForm["Round"], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{19.903200149536133`, 
                    20.}, {19.903200149536133`, 16.}, {17.903200149536133`, 
                    14.}, {13.903200149536133`, 14.}}}, CurveClosed -> {0}]}, {
                    RGBColor[
                    0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                    Opacity[1.], 
                    CapForm["Round"], 
                    JoinForm["Round"], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{13.903200149536133`, 
                    14.}, {9.903200149536133, 14.}, {7.903200149536133, 
                    16.}, {7.903200149536133, 20.}}}, CurveClosed -> {0}]}, {
                    RGBColor[
                    0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                    Opacity[1.], 
                    CapForm["Round"], 
                    JoinForm["Round"], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{13.903200149536133`, 
                    14.}, {9.903200149536133, 14.}, {7.903200149536133, 
                    12.}, {7.903200149536133, 8.}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    Hue[
                    0.9744623655913979, 0.4881889763779528, 
                    0.996078431372549], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{18., 21.}, {22., 21.}, {22., 17.}, {18., 17.}, {
                    18., 21.}}}]}, {
                    FaceForm[{
                    RGBColor[0.7565, 0.09078, 0.1361699999999998], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{12., 16.}, {16., 16.}, {16., 12.}, {12., 12.}, {
                    12., 16.}}}]}, {
                    FaceForm[{
                    Hue[0.033923303834808266`, 0.44313725490196076`, 1.], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{6., 21.}, {10., 21.}, {10., 17.}, {6., 17.}, {6.,
                     21.}}}]}, {
                    FaceForm[{
                    Hue[0.04791666666666667, 0.6274509803921569, 1.], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{6., 10.}, {10., 10.}, {10., 6.}, {6., 6.}, {6., 
                    10.}}}]}}}, Background -> GrayLevel[1, 0], BaseStyle -> 
                    GrayLevel[1], ImageSize -> 36, 
                    PlotRange -> {{-2, 30}, {-2, 
                    30}}], {-4.000000053589793, -1.9999998928204112`}], 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"dec_3\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    "NetGraph", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["dec_3", Bold], 
                    Style[
                    NetGraph, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 6), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{{
                    EdgeForm[{
                    RGBColor[
                    0.817375, 0.31808499999999995`, 0.3521274999999998], 
                    Thickness[0.03]}], 
                    FaceForm[
                    RGBColor[0.9939125, 0.9772695, 0.97840425]], 
                    
                    RectangleBox[{-1.5, -1.5}, {29.5, 29.5}, RoundingRadius -> 
                    7]}, {
                    Thickness[0.03571428571428571], {
                    RGBColor[
                    0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                    Opacity[1.], 
                    CapForm["Round"], 
                    JoinForm["Round"], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{19.903200149536133`, 
                    20.}, {19.903200149536133`, 16.}, {17.903200149536133`, 
                    14.}, {13.903200149536133`, 14.}}}, CurveClosed -> {0}]}, {
                    RGBColor[
                    0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                    Opacity[1.], 
                    CapForm["Round"], 
                    JoinForm["Round"], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{13.903200149536133`, 
                    14.}, {9.903200149536133, 14.}, {7.903200149536133, 
                    16.}, {7.903200149536133, 20.}}}, CurveClosed -> {0}]}, {
                    RGBColor[
                    0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                    Opacity[1.], 
                    CapForm["Round"], 
                    JoinForm["Round"], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{13.903200149536133`, 
                    14.}, {9.903200149536133, 14.}, {7.903200149536133, 
                    12.}, {7.903200149536133, 8.}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    Hue[
                    0.9744623655913979, 0.4881889763779528, 
                    0.996078431372549], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{18., 21.}, {22., 21.}, {22., 17.}, {18., 17.}, {
                    18., 21.}}}]}, {
                    FaceForm[{
                    RGBColor[0.7565, 0.09078, 0.1361699999999998], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{12., 16.}, {16., 16.}, {16., 12.}, {12., 12.}, {
                    12., 16.}}}]}, {
                    FaceForm[{
                    Hue[0.033923303834808266`, 0.44313725490196076`, 1.], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{6., 21.}, {10., 21.}, {10., 17.}, {6., 17.}, {6.,
                     21.}}}]}, {
                    FaceForm[{
                    Hue[0.04791666666666667, 0.6274509803921569, 1.], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{6., 10.}, {10., 10.}, {10., 6.}, {6., 6.}, {6., 
                    10.}}}]}}}, Background -> GrayLevel[1, 0], BaseStyle -> 
                    GrayLevel[1], ImageSize -> 36, 
                    PlotRange -> {{-2, 30}, {-2, 
                    30}}], {-5.000000080384689, -2.999999866025514}], 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"dec_4\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    "NetGraph", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["dec_4", Bold], 
                    Style[
                    NetGraph, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 7), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{{
                    EdgeForm[{
                    RGBColor[
                    0.817375, 0.31808499999999995`, 0.3521274999999998], 
                    Thickness[0.03]}], 
                    FaceForm[
                    RGBColor[0.9939125, 0.9772695, 0.97840425]], 
                    
                    RectangleBox[{-1.5, -1.5}, {29.5, 29.5}, RoundingRadius -> 
                    7]}, {
                    Thickness[0.03571428571428571], {
                    RGBColor[
                    0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                    Opacity[1.], 
                    CapForm["Round"], 
                    JoinForm["Round"], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{19.903200149536133`, 
                    20.}, {19.903200149536133`, 16.}, {17.903200149536133`, 
                    14.}, {13.903200149536133`, 14.}}}, CurveClosed -> {0}]}, {
                    RGBColor[
                    0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                    Opacity[1.], 
                    CapForm["Round"], 
                    JoinForm["Round"], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{13.903200149536133`, 
                    14.}, {9.903200149536133, 14.}, {7.903200149536133, 
                    16.}, {7.903200149536133, 20.}}}, CurveClosed -> {0}]}, {
                    RGBColor[
                    0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                    Opacity[1.], 
                    CapForm["Round"], 
                    JoinForm["Round"], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{13.903200149536133`, 
                    14.}, {9.903200149536133, 14.}, {7.903200149536133, 
                    12.}, {7.903200149536133, 8.}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    Hue[
                    0.9744623655913979, 0.4881889763779528, 
                    0.996078431372549], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{18., 21.}, {22., 21.}, {22., 17.}, {18., 17.}, {
                    18., 21.}}}]}, {
                    FaceForm[{
                    RGBColor[0.7565, 0.09078, 0.1361699999999998], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{12., 16.}, {16., 16.}, {16., 12.}, {12., 12.}, {
                    12., 16.}}}]}, {
                    FaceForm[{
                    Hue[0.033923303834808266`, 0.44313725490196076`, 1.], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{6., 21.}, {10., 21.}, {10., 17.}, {6., 17.}, {6.,
                     21.}}}]}, {
                    FaceForm[{
                    Hue[0.04791666666666667, 0.6274509803921569, 1.], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{6., 10.}, {10., 10.}, {10., 6.}, {6., 6.}, {6., 
                    10.}}}]}}}, Background -> GrayLevel[1, 0], BaseStyle -> 
                    GrayLevel[1], ImageSize -> 36, 
                    PlotRange -> {{-2, 30}, {-2, 30}}], {-9.999999999999996, 
                    2.679489702911784*^-7}], 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"enc_1\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    "NetGraph", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["enc_1", Bold], 
                    Style[NetGraph, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 8), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{{
                    EdgeForm[{
                    RGBColor[
                    0.817375, 0.31808499999999995`, 0.3521274999999998], 
                    Thickness[0.03]}], 
                    FaceForm[
                    RGBColor[0.9939125, 0.9772695, 0.97840425]], 
                    
                    RectangleBox[{-1.5, -1.5}, {29.5, 29.5}, RoundingRadius -> 
                    7]}, {
                    Thickness[0.03571428571428571], {
                    RGBColor[
                    0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                    Opacity[1.], 
                    CapForm["Round"], 
                    JoinForm["Round"], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{19.903200149536133`, 
                    20.}, {19.903200149536133`, 16.}, {17.903200149536133`, 
                    14.}, {13.903200149536133`, 14.}}}, CurveClosed -> {0}]}, {
                    RGBColor[
                    0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                    Opacity[1.], 
                    CapForm["Round"], 
                    JoinForm["Round"], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{13.903200149536133`, 
                    14.}, {9.903200149536133, 14.}, {7.903200149536133, 
                    16.}, {7.903200149536133, 20.}}}, CurveClosed -> {0}]}, {
                    RGBColor[
                    0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                    Opacity[1.], 
                    CapForm["Round"], 
                    JoinForm["Round"], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{13.903200149536133`, 
                    14.}, {9.903200149536133, 14.}, {7.903200149536133, 
                    12.}, {7.903200149536133, 8.}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    Hue[
                    0.9744623655913979, 0.4881889763779528, 
                    0.996078431372549], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{18., 21.}, {22., 21.}, {22., 17.}, {18., 17.}, {
                    18., 21.}}}]}, {
                    FaceForm[{
                    RGBColor[0.7565, 0.09078, 0.1361699999999998], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{12., 16.}, {16., 16.}, {16., 12.}, {12., 12.}, {
                    12., 16.}}}]}, {
                    FaceForm[{
                    Hue[0.033923303834808266`, 0.44313725490196076`, 1.], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{6., 21.}, {10., 21.}, {10., 17.}, {6., 17.}, {6.,
                     21.}}}]}, {
                    FaceForm[{
                    Hue[0.04791666666666667, 0.6274509803921569, 1.], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{6., 10.}, {10., 10.}, {10., 6.}, {6., 6.}, {6., 
                    10.}}}]}}}, Background -> GrayLevel[1, 0], BaseStyle -> 
                    GrayLevel[1], ImageSize -> 36, 
                    PlotRange -> {{-2, 30}, {-2, 
                    30}}], {-9.000000026794893, -0.9999997588459264}], 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"enc_2\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    "NetGraph", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["enc_2", Bold], 
                    Style[
                    NetGraph, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 9), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{{
                    EdgeForm[{
                    RGBColor[
                    0.817375, 0.31808499999999995`, 0.3521274999999998], 
                    Thickness[0.03]}], 
                    FaceForm[
                    RGBColor[0.9939125, 0.9772695, 0.97840425]], 
                    
                    RectangleBox[{-1.5, -1.5}, {29.5, 29.5}, RoundingRadius -> 
                    7]}, {
                    Thickness[0.03571428571428571], {
                    RGBColor[
                    0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                    Opacity[1.], 
                    CapForm["Round"], 
                    JoinForm["Round"], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{19.903200149536133`, 
                    20.}, {19.903200149536133`, 16.}, {17.903200149536133`, 
                    14.}, {13.903200149536133`, 14.}}}, CurveClosed -> {0}]}, {
                    RGBColor[
                    0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                    Opacity[1.], 
                    CapForm["Round"], 
                    JoinForm["Round"], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{13.903200149536133`, 
                    14.}, {9.903200149536133, 14.}, {7.903200149536133, 
                    16.}, {7.903200149536133, 20.}}}, CurveClosed -> {0}]}, {
                    RGBColor[
                    0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                    Opacity[1.], 
                    CapForm["Round"], 
                    JoinForm["Round"], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{13.903200149536133`, 
                    14.}, {9.903200149536133, 14.}, {7.903200149536133, 
                    12.}, {7.903200149536133, 8.}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    Hue[
                    0.9744623655913979, 0.4881889763779528, 
                    0.996078431372549], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{18., 21.}, {22., 21.}, {22., 17.}, {18., 17.}, {
                    18., 21.}}}]}, {
                    FaceForm[{
                    RGBColor[0.7565, 0.09078, 0.1361699999999998], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{12., 16.}, {16., 16.}, {16., 12.}, {12., 12.}, {
                    12., 16.}}}]}, {
                    FaceForm[{
                    Hue[0.033923303834808266`, 0.44313725490196076`, 1.], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{6., 21.}, {10., 21.}, {10., 17.}, {6., 17.}, {6.,
                     21.}}}]}, {
                    FaceForm[{
                    Hue[0.04791666666666667, 0.6274509803921569, 1.], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{6., 10.}, {10., 10.}, {10., 6.}, {6., 6.}, {6., 
                    10.}}}]}}}, Background -> GrayLevel[1, 0], BaseStyle -> 
                    GrayLevel[1], ImageSize -> 36, 
                    PlotRange -> {{-2, 30}, {-2, 
                    30}}], {-8.000000053589792, -1.9999997856408231`}], 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"enc_3\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    "NetGraph", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["enc_3", Bold], 
                    Style[
                    NetGraph, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 10), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{{
                    EdgeForm[{
                    RGBColor[
                    0.817375, 0.31808499999999995`, 0.3521274999999998], 
                    Thickness[0.03]}], 
                    FaceForm[
                    RGBColor[0.9939125, 0.9772695, 0.97840425]], 
                    
                    RectangleBox[{-1.5, -1.5}, {29.5, 29.5}, RoundingRadius -> 
                    7]}, {
                    Thickness[0.03571428571428571], {
                    RGBColor[
                    0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                    Opacity[1.], 
                    CapForm["Round"], 
                    JoinForm["Round"], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{19.903200149536133`, 
                    20.}, {19.903200149536133`, 16.}, {17.903200149536133`, 
                    14.}, {13.903200149536133`, 14.}}}, CurveClosed -> {0}]}, {
                    RGBColor[
                    0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                    Opacity[1.], 
                    CapForm["Round"], 
                    JoinForm["Round"], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{13.903200149536133`, 
                    14.}, {9.903200149536133, 14.}, {7.903200149536133, 
                    16.}, {7.903200149536133, 20.}}}, CurveClosed -> {0}]}, {
                    RGBColor[
                    0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                    Opacity[1.], 
                    CapForm["Round"], 
                    JoinForm["Round"], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{13.903200149536133`, 
                    14.}, {9.903200149536133, 14.}, {7.903200149536133, 
                    12.}, {7.903200149536133, 8.}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    Hue[
                    0.9744623655913979, 0.4881889763779528, 
                    0.996078431372549], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{18., 21.}, {22., 21.}, {22., 17.}, {18., 17.}, {
                    18., 21.}}}]}, {
                    FaceForm[{
                    RGBColor[0.7565, 0.09078, 0.1361699999999998], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{12., 16.}, {16., 16.}, {16., 12.}, {12., 12.}, {
                    12., 16.}}}]}, {
                    FaceForm[{
                    Hue[0.033923303834808266`, 0.44313725490196076`, 1.], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{6., 21.}, {10., 21.}, {10., 17.}, {6., 17.}, {6.,
                     21.}}}]}, {
                    FaceForm[{
                    Hue[0.04791666666666667, 0.6274509803921569, 1.], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{6., 10.}, {10., 10.}, {10., 6.}, {6., 6.}, {6., 
                    10.}}}]}}}, Background -> GrayLevel[1, 0], BaseStyle -> 
                    GrayLevel[1], ImageSize -> 36, 
                    PlotRange -> {{-2, 30}, {-2, 
                    30}}], {-7.000000080384688, -2.99999981243572}], 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"enc_4\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    "NetGraph", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["enc_4", Bold], 
                    Style[
                    NetGraph, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 11), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{{
                    EdgeForm[{
                    RGBColor[
                    0.817375, 0.31808499999999995`, 0.3521274999999998], 
                    Thickness[0.03]}], 
                    FaceForm[
                    RGBColor[0.9939125, 0.9772695, 0.97840425]], 
                    
                    RectangleBox[{-1.5, -1.5}, {29.5, 29.5}, RoundingRadius -> 
                    7]}, {
                    Thickness[0.03571428571428571], {
                    RGBColor[
                    0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                    Opacity[1.], 
                    CapForm["Round"], 
                    JoinForm["Round"], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{19.903200149536133`, 
                    20.}, {19.903200149536133`, 16.}, {17.903200149536133`, 
                    14.}, {13.903200149536133`, 14.}}}, CurveClosed -> {0}]}, {
                    RGBColor[
                    0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                    Opacity[1.], 
                    CapForm["Round"], 
                    JoinForm["Round"], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{13.903200149536133`, 
                    14.}, {9.903200149536133, 14.}, {7.903200149536133, 
                    16.}, {7.903200149536133, 20.}}}, CurveClosed -> {0}]}, {
                    RGBColor[
                    0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                    Opacity[1.], 
                    CapForm["Round"], 
                    JoinForm["Round"], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{13.903200149536133`, 
                    14.}, {9.903200149536133, 14.}, {7.903200149536133, 
                    12.}, {7.903200149536133, 8.}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    Hue[
                    0.9744623655913979, 0.4881889763779528, 
                    0.996078431372549], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{18., 21.}, {22., 21.}, {22., 17.}, {18., 17.}, {
                    18., 21.}}}]}, {
                    FaceForm[{
                    RGBColor[0.7565, 0.09078, 0.1361699999999998], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{12., 16.}, {16., 16.}, {16., 12.}, {12., 12.}, {
                    12., 16.}}}]}, {
                    FaceForm[{
                    Hue[0.033923303834808266`, 0.44313725490196076`, 1.], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{6., 21.}, {10., 21.}, {10., 17.}, {6., 17.}, {6.,
                     21.}}}]}, {
                    FaceForm[{
                    Hue[0.04791666666666667, 0.6274509803921569, 1.], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{6., 10.}, {10., 10.}, {10., 6.}, {6., 6.}, {6., 
                    10.}}}]}}}, Background -> GrayLevel[1, 0], BaseStyle -> 
                    GrayLevel[1], ImageSize -> 36, 
                    PlotRange -> {{-2, 30}, {-2, 
                    30}}], {-6.000000107179586, -3.9999998392306164`}], 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"enc_5\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    "NetGraph", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["enc_5", Bold], 
                    Style[
                    NetGraph, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 12), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2., 2.}, {0., 0.}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Output\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["Output", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 13), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]]}, FontSize -> 10]}, 
                    DynamicBox[
                    Typeset`ToBoxes[
                    If[
                    Not[
                    IntegerQ[NeuralNetworks`Private`NetGraph`selection]], {}, 
                    
                    GeneralUtilities`Graphics`PackagePrivate`\
makeSelectionHighlighter[
                    
                    Part[{{-11.999999999999996`, 
                    3.2153876434941414`*^-7}, {-10.999999999999996`, 
                    2.9474386732029625`*^-7}, {-1.9999999999999993`, 
                    5.3589794058235685`*^-8}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}, {-3.000000026794896, \
-0.9999999196153085}, {-4.000000053589793, -1.9999998928204112`}, \
{-5.000000080384689, -2.999999866025514}, {-9.999999999999996, 
                    2.679489702911784*^-7}, {-9.000000026794893, \
-0.9999997588459264}, {-8.000000053589792, -1.9999997856408231`}, \
{-7.000000080384688, -2.99999981243572}, {-6.000000107179586, \
-3.9999998392306164`}, {0., 0.}}, NeuralNetworks`Private`NetGraph`selection], 
                    
                    Part[{8, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 8}, 
                    NeuralNetworks`Private`NetGraph`selection], 
                    Part[{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    RGBColor[0.817375, 0.318085, 0.3521275], 
                    RGBColor[0.817375, 0.318085, 0.3521275], 
                    RGBColor[0.817375, 0.318085, 0.3521275], 
                    RGBColor[0.817375, 0.318085, 0.3521275], 
                    RGBColor[0.817375, 0.318085, 0.3521275], 
                    RGBColor[0.817375, 0.318085, 0.3521275], 
                    RGBColor[0.817375, 0.318085, 0.3521275], 
                    RGBColor[0.817375, 0.318085, 0.3521275], 
                    RGBColor[0.817375, 0.318085, 0.3521275], 
                    RGBColor[0.817375, 0.318085, 0.3521275], 
                    RGBColor[0.817375, 0.318085, 0.3521275], 
                    RGBColor[0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]}, 
                    NeuralNetworks`Private`NetGraph`selection]]], 
                    StandardForm, Graphics], 
                    ImageSizeCache -> {{
                    4.503599627370496*^15, -4.503599627370496*^15}, {
                    4.503599627370496*^15, -4.503599627370496*^15}}]}, 
                    AspectRatio -> Full, 
                    BaseStyle -> {
                    TooltipBoxOptions -> {TooltipDelay -> 0.08}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    ImagePadding -> {{35., 35.}, {35., 25.}}, 
                    ImageSize -> {729.9999999999998, 380.0000128615505}, 
                    PlotRangePadding -> 0], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = None), Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]]}, {
                    GridBox[{{
                    ItemBox[
                    StyleBox[
                    RowBox[{"Input", " ", "Port"}], FontWeight -> Bold]], 
                    ItemBox[""]}, {
                    StyleBox[
                    TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"Input\"", FrameStyle -> GrayLevel[0, 0], FrameMargins -> 
                    0, ContentPadding -> False, BaselinePosition -> 0, 
                    StripOnInput -> False], True -> 
                    FrameBox["\"Input\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"Input"}, InputForm]], Method -> "Preemptive", 
                    PassEventsDown -> Automatic, PassEventsUp -> True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"Input\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"Input"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                    StyleBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: \
1\[Times]32\[Times]112\[Times]112\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], "SummaryItem"]}, {
                    ItemBox[
                    StyleBox[
                    RowBox[{"Output", " ", "Port"}], FontWeight -> Bold], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox[
                    StyleBox[
                    
                    GraphicsBox[{}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline), 
                    ImageSize -> {1, 11}], CacheGraphics -> False], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]]}, {
                    StyleBox[
                    TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"Output\"", FrameStyle -> GrayLevel[0, 0], FrameMargins -> 
                    0, ContentPadding -> False, BaselinePosition -> 0, 
                    StripOnInput -> False], True -> 
                    FrameBox["\"Output\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"Output"}, InputForm]], Method -> "Preemptive", 
                    PassEventsDown -> Automatic, PassEventsUp -> True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"Output\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"Output"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                    StyleBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: \
32\[Times]112\[Times]112\[Times]20\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], "SummaryItem"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}]}, {
                    DynamicBox[
                    If[
                    IntegerQ[NeuralNetworks`Private`NetGraph`selection], 
                    NeuralNetworks`FormatSelectedParameterGraph[
                    
                    Part[<|"Nodes" -> <|
                    "start" -> <|
                    "Type" -> "Graph", 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{1, 32, 112, 112}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{16, 32, 112, 112}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|
                    "1" -> <|"Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`TensorT[{16, 1, 1, 1, 1}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{16}, NeuralNetworks`RealT]]|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 16, "KernelSize" -> {1, 1, 1}, 
                    "Stride" -> {1, 1, 1}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 3, "Interleaving" -> False, 
                    "$InputChannels" -> 1, "$InputSize" -> {32, 112, 112}, 
                    "$OutputSize" -> {32, 112, 112}, "$WeightsInputChannels" -> 
                    1|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{1, 32, 112, 112}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{16, 32, 112, 112}, 
                    NeuralNetworks`RealT]|>|>, 
                    "2" -> <|"Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`TensorT[{16}, NeuralNetworks`RealT], 
                    "Biases" -> NeuralNetworks`TensorT[{16}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{16}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{16}, NeuralNetworks`RealT]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 16, 
                    "$SpatialDimensions" -> {32, 112, 112}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{16, 32, 112, 112}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{16, 32, 112, 112}, 
                    NeuralNetworks`RealT]|>|>, 
                    "3" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    "GaussianErrorLinearUnit"], 
                    "$Dimensions" -> {16, 32, 112, 112}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{16, 32, 112, 112}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{16, 32, 112, 112}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}|>, 
                    "enc_1" -> <|
                    "Type" -> "Graph", 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{16, 32, 112, 112}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Down" -> NeuralNetworks`TensorT[{32, 16, 56, 56}, 
                    NeuralNetworks`RealT], "Skip" -> 
                    NeuralNetworks`TensorT[{32, 32, 112, 112}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|
                    "block/con/1" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`TensorT[{16, 16, 3, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{16}, NeuralNetworks`RealT]]|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 16, "KernelSize" -> {3, 3, 3}, 
                    "Stride" -> {1, 1, 1}, 
                    "PaddingSize" -> {{1, 1}, {1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 3, "Interleaving" -> False, 
                    "$InputChannels" -> 16, "$InputSize" -> {32, 112, 112}, 
                    "$OutputSize" -> {32, 112, 112}, "$WeightsInputChannels" -> 
                    16|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{16, 32, 112, 112}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{16, 32, 112, 112}, 
                    NeuralNetworks`RealT]|>|>, 
                    "block/skip/1" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`TensorT[{32, 16, 1, 1, 1}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{32}, NeuralNetworks`RealT]]|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 32, "KernelSize" -> {1, 1, 1}, 
                    "Stride" -> {1, 1, 1}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 3, "Interleaving" -> False, 
                    "$InputChannels" -> 16, "$InputSize" -> {32, 112, 112}, 
                    "$OutputSize" -> {32, 112, 112}, "$WeightsInputChannels" -> 
                    16|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{16, 32, 112, 112}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{32, 32, 112, 112}, 
                    NeuralNetworks`RealT]|>|>, 
                    "block/con/2" -> <|
                    "Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`TensorT[{16}, NeuralNetworks`RealT], 
                    "Biases" -> NeuralNetworks`TensorT[{16}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{16}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{16}, NeuralNetworks`RealT]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 16, 
                    "$SpatialDimensions" -> {32, 112, 112}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{16, 32, 112, 112}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{16, 32, 112, 112}, 
                    NeuralNetworks`RealT]|>|>, 
                    "block/skip/2" -> <|
                    "Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`TensorT[{32}, NeuralNetworks`RealT], 
                    "Biases" -> NeuralNetworks`TensorT[{32}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{32}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{32}, NeuralNetworks`RealT]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 32, 
                    "$SpatialDimensions" -> {32, 112, 112}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{32, 32, 112, 112}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{32, 32, 112, 112}, 
                    NeuralNetworks`RealT]|>|>, 
                    "block/con/3" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    "GaussianErrorLinearUnit"], 
                    "$Dimensions" -> {16, 32, 112, 112}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{16, 32, 112, 112}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{16, 32, 112, 112}, 
                    NeuralNetworks`RealT]|>|>, 
                    "block/con/4" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`TensorT[{32, 16, 3, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{32}, NeuralNetworks`RealT]]|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 32, "KernelSize" -> {3, 3, 3}, 
                    "Stride" -> {1, 1, 1}, 
                    "PaddingSize" -> {{1, 1}, {1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 3, "Interleaving" -> False, 
                    "$InputChannels" -> 16, "$InputSize" -> {32, 112, 112}, 
                    "$OutputSize" -> {32, 112, 112}, "$WeightsInputChannels" -> 
                    16|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{16, 32, 112, 112}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{32, 32, 112, 112}, 
                    NeuralNetworks`RealT]|>|>, 
                    "block/con/5" -> <|
                    "Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`TensorT[{32}, NeuralNetworks`RealT], 
                    "Biases" -> NeuralNetworks`TensorT[{32}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{32}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{32}, NeuralNetworks`RealT]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 32, 
                    "$SpatialDimensions" -> {32, 112, 112}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{32, 32, 112, 112}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{32, 32, 112, 112}, 
                    NeuralNetworks`RealT]|>|>, 
                    "block/tot/1" -> <|
                    "Type" -> "Total", "Arrays" -> <||>, "Parameters" -> <||>,
                     "Inputs" -> <|
                    "Input1" -> NeuralNetworks`TensorT[{32, 32, 112, 112}, 
                    NeuralNetworks`RealT], "Input2" -> 
                    NeuralNetworks`TensorT[{32, 32, 112, 112}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{32, 32, 112, 112}, 
                    NeuralNetworks`RealT]|>|>, 
                    "block/tot/2" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    "GaussianErrorLinearUnit"], 
                    "$Dimensions" -> {32, 32, 112, 112}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{32, 32, 112, 112}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{32, 32, 112, 112}, 
                    NeuralNetworks`RealT]|>|>, 
                    "drop" -> <|"Type" -> "Dropout", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "DropoutProbability" -> 0.2, "Method" -> "Dropout", 
                    "OutputPorts" -> NeuralNetworks`ValidatedParameter[{
                    "Output"}]|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{32, 32, 112, 112}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{32, 32, 112, 112}, 
                    NeuralNetworks`RealT]|>|>, 
                    "scaleD/1" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`TensorT[{32, 32, 2, 2, 2}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{32}, NeuralNetworks`RealT]]|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 32, "KernelSize" -> {2, 2, 2}, 
                    "Stride" -> {2, 2, 2}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 3, "Interleaving" -> False, 
                    "$InputChannels" -> 32, "$InputSize" -> {32, 112, 112}, 
                    "$OutputSize" -> {16, 56, 56}, "$WeightsInputChannels" -> 
                    32|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{32, 32, 112, 112}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{32, 16, 56, 56}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "block/con/1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "block/skip/1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "block/con/2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "block/con/1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "block/skip/2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "block/skip/1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "block/con/3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "block/con/2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "block/tot/1", "Inputs", "Input2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "block/skip/2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "block/con/4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "block/con/3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "block/con/5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "block/con/4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "block/tot/1", "Inputs", "Input1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "block/con/5", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "block/tot/2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "block/tot/1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "drop", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "block/tot/2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Skip"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "drop", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "scaleD/1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "drop", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Down"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "scaleD/1", "Outputs", "Output"]}|>, 
                    "enc_2" -> <|
                    "Type" -> "Graph", 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{32, 16, 56, 56}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Down" -> NeuralNetworks`TensorT[{64, 8, 28, 28}, 
                    NeuralNetworks`RealT], "Skip" -> 
                    NeuralNetworks`TensorT[{64, 16, 56, 56}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|
                    "block/con/1" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`TensorT[{32, 32, 3, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{32}, NeuralNetworks`RealT]]|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 32, "KernelSize" -> {3, 3, 3}, 
                    "Stride" -> {1, 1, 1}, 
                    "PaddingSize" -> {{1, 1}, {1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 3, "Interleaving" -> False, 
                    "$InputChannels" -> 32, "$InputSize" -> {16, 56, 56}, 
                    "$OutputSize" -> {16, 56, 56}, "$WeightsInputChannels" -> 
                    32|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{32, 16, 56, 56}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{32, 16, 56, 56}, 
                    NeuralNetworks`RealT]|>|>, 
                    "block/skip/1" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`TensorT[{64, 32, 1, 1, 1}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]]|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 64, "KernelSize" -> {1, 1, 1}, 
                    "Stride" -> {1, 1, 1}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 3, "Interleaving" -> False, 
                    "$InputChannels" -> 32, "$InputSize" -> {16, 56, 56}, 
                    "$OutputSize" -> {16, 56, 56}, "$WeightsInputChannels" -> 
                    32|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{32, 16, 56, 56}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{64, 16, 56, 56}, 
                    NeuralNetworks`RealT]|>|>, 
                    "block/con/2" -> <|
                    "Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`TensorT[{32}, NeuralNetworks`RealT], 
                    "Biases" -> NeuralNetworks`TensorT[{32}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{32}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{32}, NeuralNetworks`RealT]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 32, 
                    "$SpatialDimensions" -> {16, 56, 56}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{32, 16, 56, 56}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{32, 16, 56, 56}, 
                    NeuralNetworks`RealT]|>|>, 
                    "block/skip/2" -> <|
                    "Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "Biases" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 64, 
                    "$SpatialDimensions" -> {16, 56, 56}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{64, 16, 56, 56}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{64, 16, 56, 56}, 
                    NeuralNetworks`RealT]|>|>, 
                    "block/con/3" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    "GaussianErrorLinearUnit"], 
                    "$Dimensions" -> {32, 16, 56, 56}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{32, 16, 56, 56}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{32, 16, 56, 56}, 
                    NeuralNetworks`RealT]|>|>, 
                    "block/con/4" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`TensorT[{64, 32, 3, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]]|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 64, "KernelSize" -> {3, 3, 3}, 
                    "Stride" -> {1, 1, 1}, 
                    "PaddingSize" -> {{1, 1}, {1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 3, "Interleaving" -> False, 
                    "$InputChannels" -> 32, "$InputSize" -> {16, 56, 56}, 
                    "$OutputSize" -> {16, 56, 56}, "$WeightsInputChannels" -> 
                    32|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{32, 16, 56, 56}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{64, 16, 56, 56}, 
                    NeuralNetworks`RealT]|>|>, 
                    "block/con/5" -> <|
                    "Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "Biases" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 64, 
                    "$SpatialDimensions" -> {16, 56, 56}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{64, 16, 56, 56}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{64, 16, 56, 56}, 
                    NeuralNetworks`RealT]|>|>, 
                    "block/tot/1" -> <|
                    "Type" -> "Total", "Arrays" -> <||>, "Parameters" -> <||>,
                     "Inputs" -> <|
                    "Input1" -> NeuralNetworks`TensorT[{64, 16, 56, 56}, 
                    NeuralNetworks`RealT], "Input2" -> 
                    NeuralNetworks`TensorT[{64, 16, 56, 56}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{64, 16, 56, 56}, 
                    NeuralNetworks`RealT]|>|>, 
                    "block/tot/2" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    "GaussianErrorLinearUnit"], 
                    "$Dimensions" -> {64, 16, 56, 56}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{64, 16, 56, 56}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{64, 16, 56, 56}, 
                    NeuralNetworks`RealT]|>|>, 
                    "drop" -> <|"Type" -> "Dropout", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "DropoutProbability" -> 0.2, "Method" -> "Dropout", 
                    "OutputPorts" -> NeuralNetworks`ValidatedParameter[{
                    "Output"}]|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{64, 16, 56, 56}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{64, 16, 56, 56}, 
                    NeuralNetworks`RealT]|>|>, 
                    "scaleD/1" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`TensorT[{64, 64, 2, 2, 2}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]]|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 64, "KernelSize" -> {2, 2, 2}, 
                    "Stride" -> {2, 2, 2}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 3, "Interleaving" -> False, 
                    "$InputChannels" -> 64, "$InputSize" -> {16, 56, 56}, 
                    "$OutputSize" -> {8, 28, 28}, "$WeightsInputChannels" -> 
                    64|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{64, 16, 56, 56}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{64, 8, 28, 28}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "block/con/1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "block/skip/1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "block/con/2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "block/con/1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "block/skip/2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "block/skip/1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "block/con/3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "block/con/2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "block/tot/1", "Inputs", "Input2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "block/skip/2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "block/con/4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "block/con/3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "block/con/5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "block/con/4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "block/tot/1", "Inputs", "Input1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "block/con/5", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "block/tot/2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "block/tot/1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "drop", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "block/tot/2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Skip"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "drop", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "scaleD/1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "drop", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Down"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "scaleD/1", "Outputs", "Output"]}|>, 
                    "enc_3" -> <|
                    "Type" -> "Graph", 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{64, 8, 28, 28}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Down" -> NeuralNetworks`TensorT[{128, 4, 14, 14}, 
                    NeuralNetworks`RealT], "Skip" -> 
                    NeuralNetworks`TensorT[{128, 8, 28, 28}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|
                    "block/con/1" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`TensorT[{64, 64, 3, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]]|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 64, "KernelSize" -> {3, 3, 3}, 
                    "Stride" -> {1, 1, 1}, 
                    "PaddingSize" -> {{1, 1}, {1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 3, "Interleaving" -> False, 
                    "$InputChannels" -> 64, "$InputSize" -> {8, 28, 28}, 
                    "$OutputSize" -> {8, 28, 28}, "$WeightsInputChannels" -> 
                    64|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{64, 8, 28, 28}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{64, 8, 28, 28}, 
                    NeuralNetworks`RealT]|>|>, 
                    "block/skip/1" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`TensorT[{128, 64, 1, 1, 1}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]]|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 128, "KernelSize" -> {1, 1, 1}, 
                    "Stride" -> {1, 1, 1}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 3, "Interleaving" -> False, 
                    "$InputChannels" -> 64, "$InputSize" -> {8, 28, 28}, 
                    "$OutputSize" -> {8, 28, 28}, "$WeightsInputChannels" -> 
                    64|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{64, 8, 28, 28}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{128, 8, 28, 28}, 
                    NeuralNetworks`RealT]|>|>, 
                    "block/con/2" -> <|
                    "Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "Biases" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 64, 
                    "$SpatialDimensions" -> {8, 28, 28}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{64, 8, 28, 28}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{64, 8, 28, 28}, 
                    NeuralNetworks`RealT]|>|>, 
                    "block/skip/2" -> <|
                    "Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
                    "Biases" -> NeuralNetworks`TensorT[{128}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 128, 
                    "$SpatialDimensions" -> {8, 28, 28}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{128, 8, 28, 28}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{128, 8, 28, 28}, 
                    NeuralNetworks`RealT]|>|>, 
                    "block/con/3" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    "GaussianErrorLinearUnit"], 
                    "$Dimensions" -> {64, 8, 28, 28}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{64, 8, 28, 28}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{64, 8, 28, 28}, 
                    NeuralNetworks`RealT]|>|>, 
                    "block/con/4" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`TensorT[{128, 64, 3, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]]|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 128, "KernelSize" -> {3, 3, 3}, 
                    "Stride" -> {1, 1, 1}, 
                    "PaddingSize" -> {{1, 1}, {1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 3, "Interleaving" -> False, 
                    "$InputChannels" -> 64, "$InputSize" -> {8, 28, 28}, 
                    "$OutputSize" -> {8, 28, 28}, "$WeightsInputChannels" -> 
                    64|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{64, 8, 28, 28}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{128, 8, 28, 28}, 
                    NeuralNetworks`RealT]|>|>, 
                    "block/con/5" -> <|
                    "Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
                    "Biases" -> NeuralNetworks`TensorT[{128}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 128, 
                    "$SpatialDimensions" -> {8, 28, 28}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{128, 8, 28, 28}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{128, 8, 28, 28}, 
                    NeuralNetworks`RealT]|>|>, 
                    "block/tot/1" -> <|
                    "Type" -> "Total", "Arrays" -> <||>, "Parameters" -> <||>,
                     "Inputs" -> <|
                    "Input1" -> NeuralNetworks`TensorT[{128, 8, 28, 28}, 
                    NeuralNetworks`RealT], "Input2" -> 
                    NeuralNetworks`TensorT[{128, 8, 28, 28}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{128, 8, 28, 28}, 
                    NeuralNetworks`RealT]|>|>, 
                    "block/tot/2" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    "GaussianErrorLinearUnit"], 
                    "$Dimensions" -> {128, 8, 28, 28}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{128, 8, 28, 28}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{128, 8, 28, 28}, 
                    NeuralNetworks`RealT]|>|>, 
                    "drop" -> <|"Type" -> "Dropout", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "DropoutProbability" -> 0.2, "Method" -> "Dropout", 
                    "OutputPorts" -> NeuralNetworks`ValidatedParameter[{
                    "Output"}]|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{128, 8, 28, 28}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{128, 8, 28, 28}, 
                    NeuralNetworks`RealT]|>|>, 
                    "scaleD/1" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`TensorT[{128, 128, 2, 2, 2}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]]|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 128, "KernelSize" -> {2, 2, 2}, 
                    "Stride" -> {2, 2, 2}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 3, "Interleaving" -> False, 
                    "$InputChannels" -> 128, "$InputSize" -> {8, 28, 28}, 
                    "$OutputSize" -> {4, 14, 14}, "$WeightsInputChannels" -> 
                    128|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{128, 8, 28, 28}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{128, 4, 14, 14}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "block/con/1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "block/skip/1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "block/con/2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "block/con/1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "block/skip/2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "block/skip/1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "block/con/3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "block/con/2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "block/tot/1", "Inputs", "Input2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "block/skip/2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "block/con/4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "block/con/3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "block/con/5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "block/con/4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "block/tot/1", "Inputs", "Input1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "block/con/5", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "block/tot/2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "block/tot/1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "drop", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "block/tot/2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Skip"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "drop", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "scaleD/1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "drop", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Down"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "scaleD/1", "Outputs", "Output"]}|>, 
                    "enc_4" -> <|
                    "Type" -> "Graph", 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{128, 4, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Down" -> NeuralNetworks`TensorT[{256, 2, 7, 7}, 
                    NeuralNetworks`RealT], "Skip" -> 
                    NeuralNetworks`TensorT[{256, 4, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|
                    "block/con/1" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`TensorT[{128, 128, 3, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]]|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 128, "KernelSize" -> {3, 3, 3}, 
                    "Stride" -> {1, 1, 1}, 
                    "PaddingSize" -> {{1, 1}, {1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 3, "Interleaving" -> False, 
                    "$InputChannels" -> 128, "$InputSize" -> {4, 14, 14}, 
                    "$OutputSize" -> {4, 14, 14}, "$WeightsInputChannels" -> 
                    128|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{128, 4, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{128, 4, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "block/skip/1" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`TensorT[{256, 128, 1, 1, 1}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]]|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 256, "KernelSize" -> {1, 1, 1}, 
                    "Stride" -> {1, 1, 1}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 3, "Interleaving" -> False, 
                    "$InputChannels" -> 128, "$InputSize" -> {4, 14, 14}, 
                    "$OutputSize" -> {4, 14, 14}, "$WeightsInputChannels" -> 
                    128|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{128, 4, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{256, 4, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "block/con/2" -> <|
                    "Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
                    "Biases" -> NeuralNetworks`TensorT[{128}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 128, 
                    "$SpatialDimensions" -> {4, 14, 14}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{128, 4, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{128, 4, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "block/skip/2" -> <|
                    "Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT], 
                    "Biases" -> NeuralNetworks`TensorT[{256}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 256, 
                    "$SpatialDimensions" -> {4, 14, 14}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{256, 4, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{256, 4, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "block/con/3" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    "GaussianErrorLinearUnit"], 
                    "$Dimensions" -> {128, 4, 14, 14}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{128, 4, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{128, 4, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "block/con/4" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`TensorT[{256, 128, 3, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]]|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3, 3}, 
                    "Stride" -> {1, 1, 1}, 
                    "PaddingSize" -> {{1, 1}, {1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 3, "Interleaving" -> False, 
                    "$InputChannels" -> 128, "$InputSize" -> {4, 14, 14}, 
                    "$OutputSize" -> {4, 14, 14}, "$WeightsInputChannels" -> 
                    128|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{128, 4, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{256, 4, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "block/con/5" -> <|
                    "Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT], 
                    "Biases" -> NeuralNetworks`TensorT[{256}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 256, 
                    "$SpatialDimensions" -> {4, 14, 14}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{256, 4, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{256, 4, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "block/tot/1" -> <|
                    "Type" -> "Total", "Arrays" -> <||>, "Parameters" -> <||>,
                     "Inputs" -> <|
                    "Input1" -> NeuralNetworks`TensorT[{256, 4, 14, 14}, 
                    NeuralNetworks`RealT], "Input2" -> 
                    NeuralNetworks`TensorT[{256, 4, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{256, 4, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "block/tot/2" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    "GaussianErrorLinearUnit"], 
                    "$Dimensions" -> {256, 4, 14, 14}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{256, 4, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{256, 4, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "drop" -> <|"Type" -> "Dropout", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "DropoutProbability" -> 0.2, "Method" -> "Dropout", 
                    "OutputPorts" -> NeuralNetworks`ValidatedParameter[{
                    "Output"}]|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{256, 4, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{256, 4, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "scaleD/1" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`TensorT[{256, 256, 2, 2, 2}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]]|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 256, "KernelSize" -> {2, 2, 2}, 
                    "Stride" -> {2, 2, 2}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 3, "Interleaving" -> False, 
                    "$InputChannels" -> 256, "$InputSize" -> {4, 14, 14}, 
                    "$OutputSize" -> {2, 7, 7}, "$WeightsInputChannels" -> 
                    256|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{256, 4, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{256, 2, 7, 7}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "block/con/1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "block/skip/1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "block/con/2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "block/con/1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "block/skip/2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "block/skip/1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "block/con/3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "block/con/2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "block/tot/1", "Inputs", "Input2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "block/skip/2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "block/con/4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "block/con/3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "block/con/5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "block/con/4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "block/tot/1", "Inputs", "Input1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "block/con/5", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "block/tot/2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "block/tot/1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "drop", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "block/tot/2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Skip"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "drop", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "scaleD/1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "drop", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Down"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "scaleD/1", "Outputs", "Output"]}|>, 
                    "enc_5" -> <|
                    "Type" -> "Graph", 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{256, 2, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Skip" -> NeuralNetworks`TensorT[{512, 2, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|
                    "block/con/1" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`TensorT[{256, 256, 3, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]]|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3, 3}, 
                    "Stride" -> {1, 1, 1}, 
                    "PaddingSize" -> {{1, 1}, {1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 3, "Interleaving" -> False, 
                    "$InputChannels" -> 256, "$InputSize" -> {2, 7, 7}, 
                    "$OutputSize" -> {2, 7, 7}, "$WeightsInputChannels" -> 
                    256|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{256, 2, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{256, 2, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "block/skip/1" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`TensorT[{512, 256, 1, 1, 1}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]]|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 512, "KernelSize" -> {1, 1, 1}, 
                    "Stride" -> {1, 1, 1}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 3, "Interleaving" -> False, 
                    "$InputChannels" -> 256, "$InputSize" -> {2, 7, 7}, 
                    "$OutputSize" -> {2, 7, 7}, "$WeightsInputChannels" -> 
                    256|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{256, 2, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{512, 2, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "block/con/2" -> <|
                    "Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT], 
                    "Biases" -> NeuralNetworks`TensorT[{256}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 256, 
                    "$SpatialDimensions" -> {2, 7, 7}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{256, 2, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{256, 2, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "block/skip/2" -> <|
                    "Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "Biases" -> NeuralNetworks`TensorT[{512}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 512, 
                    "$SpatialDimensions" -> {2, 7, 7}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{512, 2, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{512, 2, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "block/con/3" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    "GaussianErrorLinearUnit"], 
                    "$Dimensions" -> {256, 2, 7, 7}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{256, 2, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{256, 2, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "block/con/4" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`TensorT[{512, 256, 3, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]]|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3, 3}, 
                    "Stride" -> {1, 1, 1}, 
                    "PaddingSize" -> {{1, 1}, {1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 3, "Interleaving" -> False, 
                    "$InputChannels" -> 256, "$InputSize" -> {2, 7, 7}, 
                    "$OutputSize" -> {2, 7, 7}, "$WeightsInputChannels" -> 
                    256|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{256, 2, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{512, 2, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "block/con/5" -> <|
                    "Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "Biases" -> NeuralNetworks`TensorT[{512}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 512, 
                    "$SpatialDimensions" -> {2, 7, 7}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{512, 2, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{512, 2, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "block/tot/1" -> <|
                    "Type" -> "Total", "Arrays" -> <||>, "Parameters" -> <||>,
                     "Inputs" -> <|
                    "Input1" -> NeuralNetworks`TensorT[{512, 2, 7, 7}, 
                    NeuralNetworks`RealT], "Input2" -> 
                    NeuralNetworks`TensorT[{512, 2, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{512, 2, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "block/tot/2" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    "GaussianErrorLinearUnit"], 
                    "$Dimensions" -> {512, 2, 7, 7}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{512, 2, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{512, 2, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "drop" -> <|"Type" -> "Dropout", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "DropoutProbability" -> 0.2, "Method" -> "Dropout", 
                    "OutputPorts" -> NeuralNetworks`ValidatedParameter[{
                    "Output"}]|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{512, 2, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{512, 2, 7, 7}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "block/con/1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "block/skip/1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "block/con/2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "block/con/1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "block/skip/2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "block/skip/1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "block/con/3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "block/con/2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "block/tot/1", "Inputs", "Input2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "block/skip/2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "block/con/4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "block/con/3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "block/con/5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "block/con/4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "block/tot/1", "Inputs", "Input1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "block/con/5", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "block/tot/2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "block/tot/1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "drop", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "block/tot/2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Skip"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "drop", "Outputs", "Output"]}|>, 
                    "dec_4" -> <|
                    "Type" -> "Graph", 
                    "Inputs" -> <|
                    "Skip" -> NeuralNetworks`TensorT[{256, 4, 14, 14}, 
                    NeuralNetworks`RealT], "Scale" -> 
                    NeuralNetworks`TensorT[{512, 2, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Up" -> NeuralNetworks`TensorT[{256, 4, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|
                    "scaleU/1" -> <|
                    "Type" -> "Resize", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Specification" -> NeuralNetworks`ValidatedParameter[{
                    Scaled[2], 
                    Scaled[2], 
                    Scaled[2]}], "Resampling" -> "Nearest", "Dimensionality" -> 
                    3, "Interleaving" -> False, "Scheme" -> "Bin", 
                    "$Channels" -> 512, "$InputSize" -> {2, 7, 7}, 
                    "$OutputSize" -> {4, 14, 14}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{512, 2, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{512, 4, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "scaleU/2" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`TensorT[{256, 512, 2, 2, 2}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]]|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 256, "KernelSize" -> {2, 2, 2}, 
                    "Stride" -> {1, 1, 1}, 
                    "PaddingSize" -> {{0, 1}, {0, 1}, {0, 1}}, 
                    "Dilation" -> {1, 1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 3, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$InputSize" -> {4, 14, 14}, 
                    "$OutputSize" -> {4, 14, 14}, "$WeightsInputChannels" -> 
                    512|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{512, 4, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{256, 4, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "cat" -> <|"Type" -> "Catenate", "Arrays" -> <||>, 
                    "Parameters" -> <|"Level" -> 1|>, 
                    "Inputs" -> <|"Input1" -> 
                    NeuralNetworks`TensorT[{256, 4, 14, 14}, 
                    NeuralNetworks`RealT], "Input2" -> 
                    NeuralNetworks`TensorT[{256, 4, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{512, 4, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "block/con/1" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`TensorT[{128, 512, 3, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]]|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 128, "KernelSize" -> {3, 3, 3}, 
                    "Stride" -> {1, 1, 1}, 
                    "PaddingSize" -> {{1, 1}, {1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 3, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$InputSize" -> {4, 14, 14}, 
                    "$OutputSize" -> {4, 14, 14}, "$WeightsInputChannels" -> 
                    512|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{512, 4, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{128, 4, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "block/skip/1" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`TensorT[{256, 512, 1, 1, 1}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]]|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 256, "KernelSize" -> {1, 1, 1}, 
                    "Stride" -> {1, 1, 1}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 3, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$InputSize" -> {4, 14, 14}, 
                    "$OutputSize" -> {4, 14, 14}, "$WeightsInputChannels" -> 
                    512|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{512, 4, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{256, 4, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "block/con/2" -> <|
                    "Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
                    "Biases" -> NeuralNetworks`TensorT[{128}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 128, 
                    "$SpatialDimensions" -> {4, 14, 14}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{128, 4, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{128, 4, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "block/skip/2" -> <|
                    "Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT], 
                    "Biases" -> NeuralNetworks`TensorT[{256}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 256, 
                    "$SpatialDimensions" -> {4, 14, 14}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{256, 4, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{256, 4, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "block/con/3" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    "GaussianErrorLinearUnit"], 
                    "$Dimensions" -> {128, 4, 14, 14}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{128, 4, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{128, 4, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "block/con/4" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`TensorT[{256, 128, 3, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]]|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3, 3}, 
                    "Stride" -> {1, 1, 1}, 
                    "PaddingSize" -> {{1, 1}, {1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 3, "Interleaving" -> False, 
                    "$InputChannels" -> 128, "$InputSize" -> {4, 14, 14}, 
                    "$OutputSize" -> {4, 14, 14}, "$WeightsInputChannels" -> 
                    128|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{128, 4, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{256, 4, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "block/con/5" -> <|
                    "Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT], 
                    "Biases" -> NeuralNetworks`TensorT[{256}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 256, 
                    "$SpatialDimensions" -> {4, 14, 14}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{256, 4, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{256, 4, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "block/tot/1" -> <|
                    "Type" -> "Total", "Arrays" -> <||>, "Parameters" -> <||>,
                     "Inputs" -> <|
                    "Input1" -> NeuralNetworks`TensorT[{256, 4, 14, 14}, 
                    NeuralNetworks`RealT], "Input2" -> 
                    NeuralNetworks`TensorT[{256, 4, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{256, 4, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "block/tot/2" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    "GaussianErrorLinearUnit"], 
                    "$Dimensions" -> {256, 4, 14, 14}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{256, 4, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{256, 4, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "drop" -> <|"Type" -> "Dropout", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "DropoutProbability" -> 0.2, "Method" -> "Dropout", 
                    "OutputPorts" -> NeuralNetworks`ValidatedParameter[{
                    "Output"}]|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{256, 4, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{256, 4, 14, 14}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "cat", "Inputs", "Input1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Skip"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "scaleU/1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Scale"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "scaleU/2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "scaleU/1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "cat", "Inputs", "Input2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "scaleU/2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "block/con/1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "cat", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "block/skip/1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "cat", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "block/con/2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "block/con/1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "block/skip/2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "block/skip/1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "block/con/3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "block/con/2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "block/tot/1", "Inputs", "Input2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "block/skip/2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "block/con/4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "block/con/3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "block/con/5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "block/con/4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "block/tot/1", "Inputs", "Input1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "block/con/5", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "block/tot/2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "block/tot/1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "drop", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "block/tot/2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Up"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "drop", "Outputs", "Output"]}|>, 
                    "dec_3" -> <|
                    "Type" -> "Graph", 
                    "Inputs" -> <|
                    "Skip" -> NeuralNetworks`TensorT[{128, 8, 28, 28}, 
                    NeuralNetworks`RealT], "Scale" -> 
                    NeuralNetworks`TensorT[{256, 4, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Up" -> NeuralNetworks`TensorT[{128, 8, 28, 28}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|
                    "scaleU/1" -> <|
                    "Type" -> "Resize", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Specification" -> NeuralNetworks`ValidatedParameter[{
                    Scaled[2], 
                    Scaled[2], 
                    Scaled[2]}], "Resampling" -> "Nearest", "Dimensionality" -> 
                    3, "Interleaving" -> False, "Scheme" -> "Bin", 
                    "$Channels" -> 256, "$InputSize" -> {4, 14, 14}, 
                    "$OutputSize" -> {8, 28, 28}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{256, 4, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{256, 8, 28, 28}, 
                    NeuralNetworks`RealT]|>|>, 
                    "scaleU/2" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`TensorT[{128, 256, 2, 2, 2}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]]|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 128, "KernelSize" -> {2, 2, 2}, 
                    "Stride" -> {1, 1, 1}, 
                    "PaddingSize" -> {{0, 1}, {0, 1}, {0, 1}}, 
                    "Dilation" -> {1, 1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 3, "Interleaving" -> False, 
                    "$InputChannels" -> 256, "$InputSize" -> {8, 28, 28}, 
                    "$OutputSize" -> {8, 28, 28}, "$WeightsInputChannels" -> 
                    256|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{256, 8, 28, 28}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{128, 8, 28, 28}, 
                    NeuralNetworks`RealT]|>|>, 
                    "cat" -> <|"Type" -> "Catenate", "Arrays" -> <||>, 
                    "Parameters" -> <|"Level" -> 1|>, 
                    "Inputs" -> <|"Input1" -> 
                    NeuralNetworks`TensorT[{128, 8, 28, 28}, 
                    NeuralNetworks`RealT], "Input2" -> 
                    NeuralNetworks`TensorT[{128, 8, 28, 28}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{256, 8, 28, 28}, 
                    NeuralNetworks`RealT]|>|>, 
                    "block/con/1" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`TensorT[{64, 256, 3, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]]|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 64, "KernelSize" -> {3, 3, 3}, 
                    "Stride" -> {1, 1, 1}, 
                    "PaddingSize" -> {{1, 1}, {1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 3, "Interleaving" -> False, 
                    "$InputChannels" -> 256, "$InputSize" -> {8, 28, 28}, 
                    "$OutputSize" -> {8, 28, 28}, "$WeightsInputChannels" -> 
                    256|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{256, 8, 28, 28}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{64, 8, 28, 28}, 
                    NeuralNetworks`RealT]|>|>, 
                    "block/skip/1" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`TensorT[{128, 256, 1, 1, 1}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]]|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 128, "KernelSize" -> {1, 1, 1}, 
                    "Stride" -> {1, 1, 1}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 3, "Interleaving" -> False, 
                    "$InputChannels" -> 256, "$InputSize" -> {8, 28, 28}, 
                    "$OutputSize" -> {8, 28, 28}, "$WeightsInputChannels" -> 
                    256|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{256, 8, 28, 28}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{128, 8, 28, 28}, 
                    NeuralNetworks`RealT]|>|>, 
                    "block/con/2" -> <|
                    "Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "Biases" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 64, 
                    "$SpatialDimensions" -> {8, 28, 28}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{64, 8, 28, 28}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{64, 8, 28, 28}, 
                    NeuralNetworks`RealT]|>|>, 
                    "block/skip/2" -> <|
                    "Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
                    "Biases" -> NeuralNetworks`TensorT[{128}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 128, 
                    "$SpatialDimensions" -> {8, 28, 28}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{128, 8, 28, 28}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{128, 8, 28, 28}, 
                    NeuralNetworks`RealT]|>|>, 
                    "block/con/3" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    "GaussianErrorLinearUnit"], 
                    "$Dimensions" -> {64, 8, 28, 28}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{64, 8, 28, 28}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{64, 8, 28, 28}, 
                    NeuralNetworks`RealT]|>|>, 
                    "block/con/4" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`TensorT[{128, 64, 3, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]]|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 128, "KernelSize" -> {3, 3, 3}, 
                    "Stride" -> {1, 1, 1}, 
                    "PaddingSize" -> {{1, 1}, {1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 3, "Interleaving" -> False, 
                    "$InputChannels" -> 64, "$InputSize" -> {8, 28, 28}, 
                    "$OutputSize" -> {8, 28, 28}, "$WeightsInputChannels" -> 
                    64|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{64, 8, 28, 28}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{128, 8, 28, 28}, 
                    NeuralNetworks`RealT]|>|>, 
                    "block/con/5" -> <|
                    "Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
                    "Biases" -> NeuralNetworks`TensorT[{128}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 128, 
                    "$SpatialDimensions" -> {8, 28, 28}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{128, 8, 28, 28}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{128, 8, 28, 28}, 
                    NeuralNetworks`RealT]|>|>, 
                    "block/tot/1" -> <|
                    "Type" -> "Total", "Arrays" -> <||>, "Parameters" -> <||>,
                     "Inputs" -> <|
                    "Input1" -> NeuralNetworks`TensorT[{128, 8, 28, 28}, 
                    NeuralNetworks`RealT], "Input2" -> 
                    NeuralNetworks`TensorT[{128, 8, 28, 28}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{128, 8, 28, 28}, 
                    NeuralNetworks`RealT]|>|>, 
                    "block/tot/2" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    "GaussianErrorLinearUnit"], 
                    "$Dimensions" -> {128, 8, 28, 28}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{128, 8, 28, 28}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{128, 8, 28, 28}, 
                    NeuralNetworks`RealT]|>|>, 
                    "drop" -> <|"Type" -> "Dropout", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "DropoutProbability" -> 0.2, "Method" -> "Dropout", 
                    "OutputPorts" -> NeuralNetworks`ValidatedParameter[{
                    "Output"}]|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{128, 8, 28, 28}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{128, 8, 28, 28}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "cat", "Inputs", "Input1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Skip"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "scaleU/1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Scale"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "scaleU/2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "scaleU/1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "cat", "Inputs", "Input2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "scaleU/2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "block/con/1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "cat", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "block/skip/1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "cat", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "block/con/2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "block/con/1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "block/skip/2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "block/skip/1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "block/con/3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "block/con/2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "block/tot/1", "Inputs", "Input2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "block/skip/2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "block/con/4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "block/con/3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "block/con/5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "block/con/4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "block/tot/1", "Inputs", "Input1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "block/con/5", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "block/tot/2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "block/tot/1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "drop", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "block/tot/2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Up"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "drop", "Outputs", "Output"]}|>, 
                    "dec_2" -> <|
                    "Type" -> "Graph", 
                    "Inputs" -> <|
                    "Skip" -> NeuralNetworks`TensorT[{64, 16, 56, 56}, 
                    NeuralNetworks`RealT], "Scale" -> 
                    NeuralNetworks`TensorT[{128, 8, 28, 28}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Up" -> NeuralNetworks`TensorT[{64, 16, 56, 56}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|
                    "scaleU/1" -> <|
                    "Type" -> "Resize", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Specification" -> NeuralNetworks`ValidatedParameter[{
                    Scaled[2], 
                    Scaled[2], 
                    Scaled[2]}], "Resampling" -> "Nearest", "Dimensionality" -> 
                    3, "Interleaving" -> False, "Scheme" -> "Bin", 
                    "$Channels" -> 128, "$InputSize" -> {8, 28, 28}, 
                    "$OutputSize" -> {16, 56, 56}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{128, 8, 28, 28}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{128, 16, 56, 56}, 
                    NeuralNetworks`RealT]|>|>, 
                    "scaleU/2" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`TensorT[{64, 128, 2, 2, 2}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]]|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 64, "KernelSize" -> {2, 2, 2}, 
                    "Stride" -> {1, 1, 1}, 
                    "PaddingSize" -> {{0, 1}, {0, 1}, {0, 1}}, 
                    "Dilation" -> {1, 1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 3, "Interleaving" -> False, 
                    "$InputChannels" -> 128, "$InputSize" -> {16, 56, 56}, 
                    "$OutputSize" -> {16, 56, 56}, "$WeightsInputChannels" -> 
                    128|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{128, 16, 56, 56}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{64, 16, 56, 56}, 
                    NeuralNetworks`RealT]|>|>, 
                    "cat" -> <|"Type" -> "Catenate", "Arrays" -> <||>, 
                    "Parameters" -> <|"Level" -> 1|>, 
                    "Inputs" -> <|"Input1" -> 
                    NeuralNetworks`TensorT[{64, 16, 56, 56}, 
                    NeuralNetworks`RealT], "Input2" -> 
                    NeuralNetworks`TensorT[{64, 16, 56, 56}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{128, 16, 56, 56}, 
                    NeuralNetworks`RealT]|>|>, 
                    "block/con/1" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`TensorT[{32, 128, 3, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{32}, NeuralNetworks`RealT]]|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 32, "KernelSize" -> {3, 3, 3}, 
                    "Stride" -> {1, 1, 1}, 
                    "PaddingSize" -> {{1, 1}, {1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 3, "Interleaving" -> False, 
                    "$InputChannels" -> 128, "$InputSize" -> {16, 56, 56}, 
                    "$OutputSize" -> {16, 56, 56}, "$WeightsInputChannels" -> 
                    128|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{128, 16, 56, 56}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{32, 16, 56, 56}, 
                    NeuralNetworks`RealT]|>|>, 
                    "block/skip/1" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`TensorT[{64, 128, 1, 1, 1}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]]|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 64, "KernelSize" -> {1, 1, 1}, 
                    "Stride" -> {1, 1, 1}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 3, "Interleaving" -> False, 
                    "$InputChannels" -> 128, "$InputSize" -> {16, 56, 56}, 
                    "$OutputSize" -> {16, 56, 56}, "$WeightsInputChannels" -> 
                    128|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{128, 16, 56, 56}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{64, 16, 56, 56}, 
                    NeuralNetworks`RealT]|>|>, 
                    "block/con/2" -> <|
                    "Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`TensorT[{32}, NeuralNetworks`RealT], 
                    "Biases" -> NeuralNetworks`TensorT[{32}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{32}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{32}, NeuralNetworks`RealT]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 32, 
                    "$SpatialDimensions" -> {16, 56, 56}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{32, 16, 56, 56}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{32, 16, 56, 56}, 
                    NeuralNetworks`RealT]|>|>, 
                    "block/skip/2" -> <|
                    "Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "Biases" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 64, 
                    "$SpatialDimensions" -> {16, 56, 56}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{64, 16, 56, 56}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{64, 16, 56, 56}, 
                    NeuralNetworks`RealT]|>|>, 
                    "block/con/3" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    "GaussianErrorLinearUnit"], 
                    "$Dimensions" -> {32, 16, 56, 56}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{32, 16, 56, 56}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{32, 16, 56, 56}, 
                    NeuralNetworks`RealT]|>|>, 
                    "block/con/4" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`TensorT[{64, 32, 3, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]]|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 64, "KernelSize" -> {3, 3, 3}, 
                    "Stride" -> {1, 1, 1}, 
                    "PaddingSize" -> {{1, 1}, {1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 3, "Interleaving" -> False, 
                    "$InputChannels" -> 32, "$InputSize" -> {16, 56, 56}, 
                    "$OutputSize" -> {16, 56, 56}, "$WeightsInputChannels" -> 
                    32|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{32, 16, 56, 56}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{64, 16, 56, 56}, 
                    NeuralNetworks`RealT]|>|>, 
                    "block/con/5" -> <|
                    "Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "Biases" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 64, 
                    "$SpatialDimensions" -> {16, 56, 56}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{64, 16, 56, 56}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{64, 16, 56, 56}, 
                    NeuralNetworks`RealT]|>|>, 
                    "block/tot/1" -> <|
                    "Type" -> "Total", "Arrays" -> <||>, "Parameters" -> <||>,
                     "Inputs" -> <|
                    "Input1" -> NeuralNetworks`TensorT[{64, 16, 56, 56}, 
                    NeuralNetworks`RealT], "Input2" -> 
                    NeuralNetworks`TensorT[{64, 16, 56, 56}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{64, 16, 56, 56}, 
                    NeuralNetworks`RealT]|>|>, 
                    "block/tot/2" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    "GaussianErrorLinearUnit"], 
                    "$Dimensions" -> {64, 16, 56, 56}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{64, 16, 56, 56}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{64, 16, 56, 56}, 
                    NeuralNetworks`RealT]|>|>, 
                    "drop" -> <|"Type" -> "Dropout", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "DropoutProbability" -> 0.2, "Method" -> "Dropout", 
                    "OutputPorts" -> NeuralNetworks`ValidatedParameter[{
                    "Output"}]|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{64, 16, 56, 56}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{64, 16, 56, 56}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "cat", "Inputs", "Input1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Skip"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "scaleU/1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Scale"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "scaleU/2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "scaleU/1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "cat", "Inputs", "Input2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "scaleU/2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "block/con/1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "cat", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "block/skip/1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "cat", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "block/con/2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "block/con/1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "block/skip/2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "block/skip/1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "block/con/3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "block/con/2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "block/tot/1", "Inputs", "Input2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "block/skip/2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "block/con/4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "block/con/3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "block/con/5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "block/con/4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "block/tot/1", "Inputs", "Input1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "block/con/5", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "block/tot/2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "block/tot/1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "drop", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "block/tot/2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Up"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "drop", "Outputs", "Output"]}|>, 
                    "dec_1" -> <|
                    "Type" -> "Graph", 
                    "Inputs" -> <|
                    "Skip" -> NeuralNetworks`TensorT[{32, 32, 112, 112}, 
                    NeuralNetworks`RealT], "Scale" -> 
                    NeuralNetworks`TensorT[{64, 16, 56, 56}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Up" -> NeuralNetworks`TensorT[{32, 32, 112, 112}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|
                    "scaleU/1" -> <|
                    "Type" -> "Resize", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Specification" -> NeuralNetworks`ValidatedParameter[{
                    Scaled[2], 
                    Scaled[2], 
                    Scaled[2]}], "Resampling" -> "Nearest", "Dimensionality" -> 
                    3, "Interleaving" -> False, "Scheme" -> "Bin", 
                    "$Channels" -> 64, "$InputSize" -> {16, 56, 56}, 
                    "$OutputSize" -> {32, 112, 112}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{64, 16, 56, 56}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{64, 32, 112, 112}, 
                    NeuralNetworks`RealT]|>|>, 
                    "scaleU/2" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`TensorT[{32, 64, 2, 2, 2}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{32}, NeuralNetworks`RealT]]|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 32, "KernelSize" -> {2, 2, 2}, 
                    "Stride" -> {1, 1, 1}, 
                    "PaddingSize" -> {{0, 1}, {0, 1}, {0, 1}}, 
                    "Dilation" -> {1, 1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 3, "Interleaving" -> False, 
                    "$InputChannels" -> 64, "$InputSize" -> {32, 112, 112}, 
                    "$OutputSize" -> {32, 112, 112}, "$WeightsInputChannels" -> 
                    64|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{64, 32, 112, 112}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{32, 32, 112, 112}, 
                    NeuralNetworks`RealT]|>|>, 
                    "cat" -> <|"Type" -> "Catenate", "Arrays" -> <||>, 
                    "Parameters" -> <|"Level" -> 1|>, 
                    "Inputs" -> <|"Input1" -> 
                    NeuralNetworks`TensorT[{32, 32, 112, 112}, 
                    NeuralNetworks`RealT], "Input2" -> 
                    NeuralNetworks`TensorT[{32, 32, 112, 112}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{64, 32, 112, 112}, 
                    NeuralNetworks`RealT]|>|>, 
                    "block/con/1" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`TensorT[{16, 64, 3, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{16}, NeuralNetworks`RealT]]|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 16, "KernelSize" -> {3, 3, 3}, 
                    "Stride" -> {1, 1, 1}, 
                    "PaddingSize" -> {{1, 1}, {1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 3, "Interleaving" -> False, 
                    "$InputChannels" -> 64, "$InputSize" -> {32, 112, 112}, 
                    "$OutputSize" -> {32, 112, 112}, "$WeightsInputChannels" -> 
                    64|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{64, 32, 112, 112}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{16, 32, 112, 112}, 
                    NeuralNetworks`RealT]|>|>, 
                    "block/skip/1" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`TensorT[{32, 64, 1, 1, 1}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{32}, NeuralNetworks`RealT]]|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 32, "KernelSize" -> {1, 1, 1}, 
                    "Stride" -> {1, 1, 1}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 3, "Interleaving" -> False, 
                    "$InputChannels" -> 64, "$InputSize" -> {32, 112, 112}, 
                    "$OutputSize" -> {32, 112, 112}, "$WeightsInputChannels" -> 
                    64|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{64, 32, 112, 112}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{32, 32, 112, 112}, 
                    NeuralNetworks`RealT]|>|>, 
                    "block/con/2" -> <|
                    "Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`TensorT[{16}, NeuralNetworks`RealT], 
                    "Biases" -> NeuralNetworks`TensorT[{16}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{16}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{16}, NeuralNetworks`RealT]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 16, 
                    "$SpatialDimensions" -> {32, 112, 112}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{16, 32, 112, 112}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{16, 32, 112, 112}, 
                    NeuralNetworks`RealT]|>|>, 
                    "block/skip/2" -> <|
                    "Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`TensorT[{32}, NeuralNetworks`RealT], 
                    "Biases" -> NeuralNetworks`TensorT[{32}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{32}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{32}, NeuralNetworks`RealT]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 32, 
                    "$SpatialDimensions" -> {32, 112, 112}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{32, 32, 112, 112}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{32, 32, 112, 112}, 
                    NeuralNetworks`RealT]|>|>, 
                    "block/con/3" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    "GaussianErrorLinearUnit"], 
                    "$Dimensions" -> {16, 32, 112, 112}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{16, 32, 112, 112}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{16, 32, 112, 112}, 
                    NeuralNetworks`RealT]|>|>, 
                    "block/con/4" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`TensorT[{32, 16, 3, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{32}, NeuralNetworks`RealT]]|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 32, "KernelSize" -> {3, 3, 3}, 
                    "Stride" -> {1, 1, 1}, 
                    "PaddingSize" -> {{1, 1}, {1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 3, "Interleaving" -> False, 
                    "$InputChannels" -> 16, "$InputSize" -> {32, 112, 112}, 
                    "$OutputSize" -> {32, 112, 112}, "$WeightsInputChannels" -> 
                    16|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{16, 32, 112, 112}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{32, 32, 112, 112}, 
                    NeuralNetworks`RealT]|>|>, 
                    "block/con/5" -> <|
                    "Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`TensorT[{32}, NeuralNetworks`RealT], 
                    "Biases" -> NeuralNetworks`TensorT[{32}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{32}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{32}, NeuralNetworks`RealT]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 32, 
                    "$SpatialDimensions" -> {32, 112, 112}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{32, 32, 112, 112}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{32, 32, 112, 112}, 
                    NeuralNetworks`RealT]|>|>, 
                    "block/tot/1" -> <|
                    "Type" -> "Total", "Arrays" -> <||>, "Parameters" -> <||>,
                     "Inputs" -> <|
                    "Input1" -> NeuralNetworks`TensorT[{32, 32, 112, 112}, 
                    NeuralNetworks`RealT], "Input2" -> 
                    NeuralNetworks`TensorT[{32, 32, 112, 112}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{32, 32, 112, 112}, 
                    NeuralNetworks`RealT]|>|>, 
                    "block/tot/2" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    "GaussianErrorLinearUnit"], 
                    "$Dimensions" -> {32, 32, 112, 112}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{32, 32, 112, 112}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{32, 32, 112, 112}, 
                    NeuralNetworks`RealT]|>|>, 
                    "drop" -> <|"Type" -> "Dropout", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "DropoutProbability" -> 0.2, "Method" -> "Dropout", 
                    "OutputPorts" -> NeuralNetworks`ValidatedParameter[{
                    "Output"}]|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{32, 32, 112, 112}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{32, 32, 112, 112}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "cat", "Inputs", "Input1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Skip"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "scaleU/1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Scale"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "scaleU/2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "scaleU/1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "cat", "Inputs", "Input2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "scaleU/2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "block/con/1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "cat", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "block/skip/1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "cat", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "block/con/2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "block/con/1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "block/skip/2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "block/skip/1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "block/con/3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "block/con/2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "block/tot/1", "Inputs", "Input2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "block/skip/2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "block/con/4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "block/con/3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "block/con/5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "block/con/4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "block/tot/1", "Inputs", "Input1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "block/con/5", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "block/tot/2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "block/tot/1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "drop", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "block/tot/2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Up"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "drop", "Outputs", "Output"]}|>, 
                    "map" -> <|
                    "Type" -> "Graph", 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{32, 32, 112, 112}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{32, 112, 112, 20}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|
                    "1" -> <|"Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`TensorT[{20, 32, 1, 1, 1}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{20}, NeuralNetworks`RealT]]|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 20, "KernelSize" -> {1, 1, 1}, 
                    "Stride" -> {1, 1, 1}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 3, "Interleaving" -> False, 
                    "$InputChannels" -> 32, "$InputSize" -> {32, 112, 112}, 
                    "$OutputSize" -> {32, 112, 112}, "$WeightsInputChannels" -> 
                    32|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{32, 32, 112, 112}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{20, 32, 112, 112}, 
                    NeuralNetworks`RealT]|>|>, 
                    "2" -> <|"Type" -> "Transpose", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Specification" -> 
                    NeuralNetworks`ValidatedParameter[{4, 1, 2, 3}]|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{20, 32, 112, 112}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{32, 112, 112, 20}, 
                    NeuralNetworks`RealT]|>|>, 
                    "3" -> <|"Type" -> "Softmax", "Arrays" -> <||>, 
                    "Parameters" -> <|"Level" -> -1|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{32, 112, 112, 20}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{32, 112, 112, 20}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}|>|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{1, 32, 112, 112}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{32, 112, 112, 20}, 
                    NeuralNetworks`RealT]|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "start", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "enc_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "start", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "enc_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "enc_1", "Outputs", "Down"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "dec_1", "Inputs", "Skip"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "enc_1", "Outputs", "Skip"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "enc_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "enc_2", "Outputs", "Down"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "dec_2", "Inputs", "Skip"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "enc_2", "Outputs", "Skip"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "enc_4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "enc_3", "Outputs", "Down"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "dec_3", "Inputs", "Skip"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "enc_3", "Outputs", "Skip"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "enc_5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "enc_4", "Outputs", "Down"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "dec_4", "Inputs", "Skip"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "enc_4", "Outputs", "Skip"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "dec_4", "Inputs", "Scale"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "enc_5", "Outputs", "Skip"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "dec_3", "Inputs", "Scale"] -> 
                    NeuralNetworks`NetPath["Nodes", "dec_4", "Outputs", "Up"],
                     NeuralNetworks`NetPath[
                    "Nodes", "dec_2", "Inputs", "Scale"] -> 
                    NeuralNetworks`NetPath["Nodes", "dec_3", "Outputs", "Up"],
                     NeuralNetworks`NetPath[
                    "Nodes", "dec_1", "Inputs", "Scale"] -> 
                    NeuralNetworks`NetPath["Nodes", "dec_2", "Outputs", "Up"],
                     NeuralNetworks`NetPath[
                    "Nodes", "map", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "dec_1", "Outputs", "Up"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "map", "Outputs", "Output"]}|>, 
                    Apply[Sequence, 
                    Part[{
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "start"], 
                    NeuralNetworks`NetPath["Nodes", "dec_1"], 
                    NeuralNetworks`NetPath["Nodes", "map"], 
                    NeuralNetworks`NetPath["Nodes", "dec_2"], 
                    NeuralNetworks`NetPath["Nodes", "dec_3"], 
                    NeuralNetworks`NetPath["Nodes", "dec_4"], 
                    NeuralNetworks`NetPath["Nodes", "enc_1"], 
                    NeuralNetworks`NetPath["Nodes", "enc_2"], 
                    NeuralNetworks`NetPath["Nodes", "enc_3"], 
                    NeuralNetworks`NetPath["Nodes", "enc_4"], 
                    NeuralNetworks`NetPath["Nodes", "enc_5"], 
                    NeuralNetworks`NetPath["Outputs", "Output"]}, 
                    NeuralNetworks`Private`NetGraph`selection]]], 
                    Part[{
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "start"], 
                    NeuralNetworks`NetPath["Nodes", "dec_1"], 
                    NeuralNetworks`NetPath["Nodes", "map"], 
                    NeuralNetworks`NetPath["Nodes", "dec_2"], 
                    NeuralNetworks`NetPath["Nodes", "dec_3"], 
                    NeuralNetworks`NetPath["Nodes", "dec_4"], 
                    NeuralNetworks`NetPath["Nodes", "enc_1"], 
                    NeuralNetworks`NetPath["Nodes", "enc_2"], 
                    NeuralNetworks`NetPath["Nodes", "enc_3"], 
                    NeuralNetworks`NetPath["Nodes", "enc_4"], 
                    NeuralNetworks`NetPath["Nodes", "enc_5"], 
                    NeuralNetworks`NetPath["Outputs", "Output"]}, 
                    NeuralNetworks`Private`NetGraph`selection], <||>, {}], 
                    ToBoxes[""]], 
                    ImageSizeCache -> {0., {0., 3.8999998569488525`}}, 
                    TrackedSymbols :> {
                    NeuralNetworks`Private`NetGraph`selection}]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}], 
                 Initialization :> {NetGraph}], "SummaryItem"]}}, AutoDelete -> 
             False, BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {
              "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, AutoDelete -> 
          False, BaselinePosition -> {1, 1}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  NetGraph[<|
   "Type" -> "Graph", 
    "Inputs" -> <|
     "Input" -> NeuralNetworks`TensorT[{1, 32, 112, 112}, 
        NeuralNetworks`AtomT]|>, 
    "Outputs" -> <|
     "Output" -> NeuralNetworks`TensorT[{32, 112, 112, 20}, 
        NeuralNetworks`RealT]|>, 
    "Nodes" -> <|
     "start" -> <|
       "Type" -> "Graph", 
        "Inputs" -> <|
         "Input" -> NeuralNetworks`TensorT[{1, 32, 112, 112}, 
            NeuralNetworks`AtomT]|>, 
        "Outputs" -> <|
         "Output" -> 
          NeuralNetworks`TensorT[{16, 32, 112, 112}, NeuralNetworks`RealT]|>, 
        "Nodes" -> <|
         "1" -> <|"Type" -> "Convolution", 
            "Arrays" -> <|
             "Weights" -> 
              NeuralNetworks`TensorT[{16, 1, 1, 1, 1}, NeuralNetworks`RealT], 
              "Biases" -> NeuralNetworks`Nullable[
                NeuralNetworks`TensorT[{16}, NeuralNetworks`RealT]]|>, 
            "Parameters" -> <|
             "OutputChannels" -> 16, "KernelSize" -> {1, 1, 1}, 
              "Stride" -> {1, 1, 1}, 
              "PaddingSize" -> {{0, 0}, {0, 0}, {0, 0}}, 
              "Dilation" -> {1, 1, 1}, "ChannelGroups" -> 1, "Dimensionality" -> 
              3, "Interleaving" -> False, "$InputChannels" -> 1, 
              "$InputSize" -> {32, 112, 112}, "$OutputSize" -> {32, 112, 112},
               "$WeightsInputChannels" -> 1|>, 
            "Inputs" -> <|
             "Input" -> NeuralNetworks`TensorT[{1, 32, 112, 112}, 
                NeuralNetworks`AtomT]|>, 
            "Outputs" -> <|
             "Output" -> 
              NeuralNetworks`TensorT[{16, 32, 112, 112}, 
                NeuralNetworks`RealT]|>|>, 
          "2" -> <|"Type" -> "BatchNormalization", 
            "Arrays" -> <|
             "Scaling" -> NeuralNetworks`TensorT[{16}, NeuralNetworks`RealT], 
              "Biases" -> NeuralNetworks`TensorT[{16}, NeuralNetworks`RealT], 
              "MovingMean" -> 
              NeuralNetworks`TensorT[{16}, NeuralNetworks`RealT], 
              "MovingVariance" -> 
              NeuralNetworks`TensorT[{16}, NeuralNetworks`RealT]|>, 
            "Parameters" -> <|
             "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> False, 
              "$Channels" -> 16, "$SpatialDimensions" -> {32, 112, 112}|>, 
            "Inputs" -> <|
             "Input" -> NeuralNetworks`TensorT[{16, 32, 112, 112}, 
                NeuralNetworks`RealT]|>, 
            "Outputs" -> <|
             "Output" -> 
              NeuralNetworks`TensorT[{16, 32, 112, 112}, 
                NeuralNetworks`RealT]|>|>, 
          "3" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
            "Parameters" -> <|
             "Function" -> 
              NeuralNetworks`ValidatedParameter["GaussianErrorLinearUnit"], 
              "$Dimensions" -> {16, 32, 112, 112}|>, 
            "Inputs" -> <|
             "Input" -> NeuralNetworks`TensorT[{16, 32, 112, 112}, 
                NeuralNetworks`RealT]|>, 
            "Outputs" -> <|
             "Output" -> 
              NeuralNetworks`TensorT[{16, 32, 112, 112}, 
                NeuralNetworks`RealT]|>|>|>, 
        "Edges" -> {
         NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
          NeuralNetworks`NetPath["Inputs", "Input"], 
          NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
          NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
          NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
          NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"], 
          NeuralNetworks`NetPath["Outputs", "Output"] -> 
          NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"]}|>, 
      "enc_1" -> <|
       "Type" -> "Graph", 
        "Inputs" -> <|
         "Input" -> NeuralNetworks`TensorT[{16, 32, 112, 112}, 
            NeuralNetworks`RealT]|>, 
        "Outputs" -> <|
         "Down" -> NeuralNetworks`TensorT[{32, 16, 56, 56}, 
            NeuralNetworks`RealT], "Skip" -> 
          NeuralNetworks`TensorT[{32, 32, 112, 112}, NeuralNetworks`RealT]|>, 
        "Nodes" -> <|
         "block/con/1" -> <|
           "Type" -> "Convolution", 
            "Arrays" -> <|
             "Weights" -> 
              NeuralNetworks`TensorT[{16, 16, 3, 3, 3}, NeuralNetworks`RealT],
               "Biases" -> NeuralNetworks`Nullable[
                NeuralNetworks`TensorT[{16}, NeuralNetworks`RealT]]|>, 
            "Parameters" -> <|
             "OutputChannels" -> 16, "KernelSize" -> {3, 3, 3}, 
              "Stride" -> {1, 1, 1}, 
              "PaddingSize" -> {{1, 1}, {1, 1}, {1, 1}}, 
              "Dilation" -> {1, 1, 1}, "ChannelGroups" -> 1, "Dimensionality" -> 
              3, "Interleaving" -> False, "$InputChannels" -> 16, 
              "$InputSize" -> {32, 112, 112}, "$OutputSize" -> {32, 112, 112},
               "$WeightsInputChannels" -> 16|>, 
            "Inputs" -> <|
             "Input" -> NeuralNetworks`TensorT[{16, 32, 112, 112}, 
                NeuralNetworks`RealT]|>, 
            "Outputs" -> <|
             "Output" -> 
              NeuralNetworks`TensorT[{16, 32, 112, 112}, 
                NeuralNetworks`RealT]|>|>, 
          "block/skip/1" -> <|
           "Type" -> "Convolution", 
            "Arrays" -> <|
             "Weights" -> 
              NeuralNetworks`TensorT[{32, 16, 1, 1, 1}, NeuralNetworks`RealT],
               "Biases" -> NeuralNetworks`Nullable[
                NeuralNetworks`TensorT[{32}, NeuralNetworks`RealT]]|>, 
            "Parameters" -> <|
             "OutputChannels" -> 32, "KernelSize" -> {1, 1, 1}, 
              "Stride" -> {1, 1, 1}, 
              "PaddingSize" -> {{0, 0}, {0, 0}, {0, 0}}, 
              "Dilation" -> {1, 1, 1}, "ChannelGroups" -> 1, "Dimensionality" -> 
              3, "Interleaving" -> False, "$InputChannels" -> 16, 
              "$InputSize" -> {32, 112, 112}, "$OutputSize" -> {32, 112, 112},
               "$WeightsInputChannels" -> 16|>, 
            "Inputs" -> <|
             "Input" -> NeuralNetworks`TensorT[{16, 32, 112, 112}, 
                NeuralNetworks`RealT]|>, 
            "Outputs" -> <|
             "Output" -> 
              NeuralNetworks`TensorT[{32, 32, 112, 112}, 
                NeuralNetworks`RealT]|>|>, 
          "block/con/2" -> <|
           "Type" -> "BatchNormalization", 
            "Arrays" -> <|
             "Scaling" -> NeuralNetworks`TensorT[{16}, NeuralNetworks`RealT], 
              "Biases" -> NeuralNetworks`TensorT[{16}, NeuralNetworks`RealT], 
              "MovingMean" -> 
              NeuralNetworks`TensorT[{16}, NeuralNetworks`RealT], 
              "MovingVariance" -> 
              NeuralNetworks`TensorT[{16}, NeuralNetworks`RealT]|>, 
            "Parameters" -> <|
             "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> False, 
              "$Channels" -> 16, "$SpatialDimensions" -> {32, 112, 112}|>, 
            "Inputs" -> <|
             "Input" -> NeuralNetworks`TensorT[{16, 32, 112, 112}, 
                NeuralNetworks`RealT]|>, 
            "Outputs" -> <|
             "Output" -> 
              NeuralNetworks`TensorT[{16, 32, 112, 112}, 
                NeuralNetworks`RealT]|>|>, 
          "block/skip/2" -> <|
           "Type" -> "BatchNormalization", 
            "Arrays" -> <|
             "Scaling" -> NeuralNetworks`TensorT[{32}, NeuralNetworks`RealT], 
              "Biases" -> NeuralNetworks`TensorT[{32}, NeuralNetworks`RealT], 
              "MovingMean" -> 
              NeuralNetworks`TensorT[{32}, NeuralNetworks`RealT], 
              "MovingVariance" -> 
              NeuralNetworks`TensorT[{32}, NeuralNetworks`RealT]|>, 
            "Parameters" -> <|
             "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> False, 
              "$Channels" -> 32, "$SpatialDimensions" -> {32, 112, 112}|>, 
            "Inputs" -> <|
             "Input" -> NeuralNetworks`TensorT[{32, 32, 112, 112}, 
                NeuralNetworks`RealT]|>, 
            "Outputs" -> <|
             "Output" -> 
              NeuralNetworks`TensorT[{32, 32, 112, 112}, 
                NeuralNetworks`RealT]|>|>, 
          "block/con/3" -> <|
           "Type" -> "Elementwise", "Arrays" -> <||>, 
            "Parameters" -> <|
             "Function" -> 
              NeuralNetworks`ValidatedParameter["GaussianErrorLinearUnit"], 
              "$Dimensions" -> {16, 32, 112, 112}|>, 
            "Inputs" -> <|
             "Input" -> NeuralNetworks`TensorT[{16, 32, 112, 112}, 
                NeuralNetworks`RealT]|>, 
            "Outputs" -> <|
             "Output" -> 
              NeuralNetworks`TensorT[{16, 32, 112, 112}, 
                NeuralNetworks`RealT]|>|>, 
          "block/con/4" -> <|
           "Type" -> "Convolution", 
            "Arrays" -> <|
             "Weights" -> 
              NeuralNetworks`TensorT[{32, 16, 3, 3, 3}, NeuralNetworks`RealT],
               "Biases" -> NeuralNetworks`Nullable[
                NeuralNetworks`TensorT[{32}, NeuralNetworks`RealT]]|>, 
            "Parameters" -> <|
             "OutputChannels" -> 32, "KernelSize" -> {3, 3, 3}, 
              "Stride" -> {1, 1, 1}, 
              "PaddingSize" -> {{1, 1}, {1, 1}, {1, 1}}, 
              "Dilation" -> {1, 1, 1}, "ChannelGroups" -> 1, "Dimensionality" -> 
              3, "Interleaving" -> False, "$InputChannels" -> 16, 
              "$InputSize" -> {32, 112, 112}, "$OutputSize" -> {32, 112, 112},
               "$WeightsInputChannels" -> 16|>, 
            "Inputs" -> <|
             "Input" -> NeuralNetworks`TensorT[{16, 32, 112, 112}, 
                NeuralNetworks`RealT]|>, 
            "Outputs" -> <|
             "Output" -> 
              NeuralNetworks`TensorT[{32, 32, 112, 112}, 
                NeuralNetworks`RealT]|>|>, 
          "block/con/5" -> <|
           "Type" -> "BatchNormalization", 
            "Arrays" -> <|
             "Scaling" -> NeuralNetworks`TensorT[{32}, NeuralNetworks`RealT], 
              "Biases" -> NeuralNetworks`TensorT[{32}, NeuralNetworks`RealT], 
              "MovingMean" -> 
              NeuralNetworks`TensorT[{32}, NeuralNetworks`RealT], 
              "MovingVariance" -> 
              NeuralNetworks`TensorT[{32}, NeuralNetworks`RealT]|>, 
            "Parameters" -> <|
             "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> False, 
              "$Channels" -> 32, "$SpatialDimensions" -> {32, 112, 112}|>, 
            "Inputs" -> <|
             "Input" -> NeuralNetworks`TensorT[{32, 32, 112, 112}, 
                NeuralNetworks`RealT]|>, 
            "Outputs" -> <|
             "Output" -> 
              NeuralNetworks`TensorT[{32, 32, 112, 112}, 
                NeuralNetworks`RealT]|>|>, 
          "block/tot/1" -> <|
           "Type" -> "Total", "Arrays" -> <||>, "Parameters" -> <||>, 
            "Inputs" -> <|
             "Input1" -> 
              NeuralNetworks`TensorT[{32, 32, 112, 112}, 
                NeuralNetworks`RealT], "Input2" -> 
              NeuralNetworks`TensorT[{32, 32, 112, 112}, 
                NeuralNetworks`RealT]|>, 
            "Outputs" -> <|
             "Output" -> 
              NeuralNetworks`TensorT[{32, 32, 112, 112}, 
                NeuralNetworks`RealT]|>|>, 
          "block/tot/2" -> <|
           "Type" -> "Elementwise", "Arrays" -> <||>, 
            "Parameters" -> <|
             "Function" -> 
              NeuralNetworks`ValidatedParameter["GaussianErrorLinearUnit"], 
              "$Dimensions" -> {32, 32, 112, 112}|>, 
            "Inputs" -> <|
             "Input" -> NeuralNetworks`TensorT[{32, 32, 112, 112}, 
                NeuralNetworks`RealT]|>, 
            "Outputs" -> <|
             "Output" -> 
              NeuralNetworks`TensorT[{32, 32, 112, 112}, 
                NeuralNetworks`RealT]|>|>, 
          "drop" -> <|
           "Type" -> "Dropout", "Arrays" -> <||>, 
            "Parameters" -> <|
             "DropoutProbability" -> 0.2, "Method" -> "Dropout", 
              "OutputPorts" -> 
              NeuralNetworks`ValidatedParameter[{"Output"}]|>, 
            "Inputs" -> <|
             "Input" -> NeuralNetworks`TensorT[{32, 32, 112, 112}, 
                NeuralNetworks`RealT]|>, 
            "Outputs" -> <|
             "Output" -> 
              NeuralNetworks`TensorT[{32, 32, 112, 112}, 
                NeuralNetworks`RealT]|>|>, 
          "scaleD/1" -> <|
           "Type" -> "Convolution", 
            "Arrays" -> <|
             "Weights" -> 
              NeuralNetworks`TensorT[{32, 32, 2, 2, 2}, NeuralNetworks`RealT],
               "Biases" -> NeuralNetworks`Nullable[
                NeuralNetworks`TensorT[{32}, NeuralNetworks`RealT]]|>, 
            "Parameters" -> <|
             "OutputChannels" -> 32, "KernelSize" -> {2, 2, 2}, 
              "Stride" -> {2, 2, 2}, 
              "PaddingSize" -> {{0, 0}, {0, 0}, {0, 0}}, 
              "Dilation" -> {1, 1, 1}, "ChannelGroups" -> 1, "Dimensionality" -> 
              3, "Interleaving" -> False, "$InputChannels" -> 32, 
              "$InputSize" -> {32, 112, 112}, "$OutputSize" -> {16, 56, 56}, 
              "$WeightsInputChannels" -> 32|>, 
            "Inputs" -> <|
             "Input" -> NeuralNetworks`TensorT[{32, 32, 112, 112}, 
                NeuralNetworks`RealT]|>, 
            "Outputs" -> <|
             "Output" -> 
              NeuralNetworks`TensorT[{32, 16, 56, 56}, 
                NeuralNetworks`RealT]|>|>|>, 
        "Edges" -> {
         NeuralNetworks`NetPath["Nodes", "block/con/1", "Inputs", "Input"] -> 
          NeuralNetworks`NetPath["Inputs", "Input"], 
          NeuralNetworks`NetPath["Nodes", "block/skip/1", "Inputs", "Input"] -> 
          NeuralNetworks`NetPath["Inputs", "Input"], 
          NeuralNetworks`NetPath["Nodes", "block/con/2", "Inputs", "Input"] -> 
          NeuralNetworks`NetPath["Nodes", "block/con/1", "Outputs", "Output"],
           NeuralNetworks`NetPath["Nodes", "block/skip/2", "Inputs", "Input"] -> 
          NeuralNetworks`NetPath[
           "Nodes", "block/skip/1", "Outputs", "Output"], 
          NeuralNetworks`NetPath["Nodes", "block/con/3", "Inputs", "Input"] -> 
          NeuralNetworks`NetPath["Nodes", "block/con/2", "Outputs", "Output"],
           NeuralNetworks`NetPath["Nodes", "block/tot/1", "Inputs", "Input2"] -> 
          NeuralNetworks`NetPath[
           "Nodes", "block/skip/2", "Outputs", "Output"], 
          NeuralNetworks`NetPath["Nodes", "block/con/4", "Inputs", "Input"] -> 
          NeuralNetworks`NetPath["Nodes", "block/con/3", "Outputs", "Output"],
           NeuralNetworks`NetPath["Nodes", "block/con/5", "Inputs", "Input"] -> 
          NeuralNetworks`NetPath["Nodes", "block/con/4", "Outputs", "Output"],
           NeuralNetworks`NetPath["Nodes", "block/tot/1", "Inputs", "Input1"] -> 
          NeuralNetworks`NetPath["Nodes", "block/con/5", "Outputs", "Output"],
           NeuralNetworks`NetPath["Nodes", "block/tot/2", "Inputs", "Input"] -> 
          NeuralNetworks`NetPath["Nodes", "block/tot/1", "Outputs", "Output"],
           NeuralNetworks`NetPath["Nodes", "drop", "Inputs", "Input"] -> 
          NeuralNetworks`NetPath["Nodes", "block/tot/2", "Outputs", "Output"],
           NeuralNetworks`NetPath["Outputs", "Skip"] -> 
          NeuralNetworks`NetPath["Nodes", "drop", "Outputs", "Output"], 
          NeuralNetworks`NetPath["Nodes", "scaleD/1", "Inputs", "Input"] -> 
          NeuralNetworks`NetPath["Nodes", "drop", "Outputs", "Output"], 
          NeuralNetworks`NetPath["Outputs", "Down"] -> 
          NeuralNetworks`NetPath["Nodes", "scaleD/1", "Outputs", "Output"]}|>,
       "enc_2" -> <|
       "Type" -> "Graph", 
        "Inputs" -> <|
         "Input" -> NeuralNetworks`TensorT[{32, 16, 56, 56}, 
            NeuralNetworks`RealT]|>, 
        "Outputs" -> <|
         "Down" -> NeuralNetworks`TensorT[{64, 8, 28, 28}, 
            NeuralNetworks`RealT], "Skip" -> 
          NeuralNetworks`TensorT[{64, 16, 56, 56}, NeuralNetworks`RealT]|>, 
        "Nodes" -> <|
         "block/con/1" -> <|
           "Type" -> "Convolution", 
            "Arrays" -> <|
             "Weights" -> 
              NeuralNetworks`TensorT[{32, 32, 3, 3, 3}, NeuralNetworks`RealT],
               "Biases" -> NeuralNetworks`Nullable[
                NeuralNetworks`TensorT[{32}, NeuralNetworks`RealT]]|>, 
            "Parameters" -> <|
             "OutputChannels" -> 32, "KernelSize" -> {3, 3, 3}, 
              "Stride" -> {1, 1, 1}, 
              "PaddingSize" -> {{1, 1}, {1, 1}, {1, 1}}, 
              "Dilation" -> {1, 1, 1}, "ChannelGroups" -> 1, "Dimensionality" -> 
              3, "Interleaving" -> False, "$InputChannels" -> 32, 
              "$InputSize" -> {16, 56, 56}, "$OutputSize" -> {16, 56, 56}, 
              "$WeightsInputChannels" -> 32|>, 
            "Inputs" -> <|
             "Input" -> NeuralNetworks`TensorT[{32, 16, 56, 56}, 
                NeuralNetworks`RealT]|>, 
            "Outputs" -> <|
             "Output" -> 
              NeuralNetworks`TensorT[{32, 16, 56, 56}, 
                NeuralNetworks`RealT]|>|>, 
          "block/skip/1" -> <|
           "Type" -> "Convolution", 
            "Arrays" -> <|
             "Weights" -> 
              NeuralNetworks`TensorT[{64, 32, 1, 1, 1}, NeuralNetworks`RealT],
               "Biases" -> NeuralNetworks`Nullable[
                NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]]|>, 
            "Parameters" -> <|
             "OutputChannels" -> 64, "KernelSize" -> {1, 1, 1}, 
              "Stride" -> {1, 1, 1}, 
              "PaddingSize" -> {{0, 0}, {0, 0}, {0, 0}}, 
              "Dilation" -> {1, 1, 1}, "ChannelGroups" -> 1, "Dimensionality" -> 
              3, "Interleaving" -> False, "$InputChannels" -> 32, 
              "$InputSize" -> {16, 56, 56}, "$OutputSize" -> {16, 56, 56}, 
              "$WeightsInputChannels" -> 32|>, 
            "Inputs" -> <|
             "Input" -> NeuralNetworks`TensorT[{32, 16, 56, 56}, 
                NeuralNetworks`RealT]|>, 
            "Outputs" -> <|
             "Output" -> 
              NeuralNetworks`TensorT[{64, 16, 56, 56}, 
                NeuralNetworks`RealT]|>|>, 
          "block/con/2" -> <|
           "Type" -> "BatchNormalization", 
            "Arrays" -> <|
             "Scaling" -> NeuralNetworks`TensorT[{32}, NeuralNetworks`RealT], 
              "Biases" -> NeuralNetworks`TensorT[{32}, NeuralNetworks`RealT], 
              "MovingMean" -> 
              NeuralNetworks`TensorT[{32}, NeuralNetworks`RealT], 
              "MovingVariance" -> 
              NeuralNetworks`TensorT[{32}, NeuralNetworks`RealT]|>, 
            "Parameters" -> <|
             "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> False, 
              "$Channels" -> 32, "$SpatialDimensions" -> {16, 56, 56}|>, 
            "Inputs" -> <|
             "Input" -> NeuralNetworks`TensorT[{32, 16, 56, 56}, 
                NeuralNetworks`RealT]|>, 
            "Outputs" -> <|
             "Output" -> 
              NeuralNetworks`TensorT[{32, 16, 56, 56}, 
                NeuralNetworks`RealT]|>|>, 
          "block/skip/2" -> <|
           "Type" -> "BatchNormalization", 
            "Arrays" -> <|
             "Scaling" -> NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
              "Biases" -> NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
              "MovingMean" -> 
              NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
              "MovingVariance" -> 
              NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]|>, 
            "Parameters" -> <|
             "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> False, 
              "$Channels" -> 64, "$SpatialDimensions" -> {16, 56, 56}|>, 
            "Inputs" -> <|
             "Input" -> NeuralNetworks`TensorT[{64, 16, 56, 56}, 
                NeuralNetworks`RealT]|>, 
            "Outputs" -> <|
             "Output" -> 
              NeuralNetworks`TensorT[{64, 16, 56, 56}, 
                NeuralNetworks`RealT]|>|>, 
          "block/con/3" -> <|
           "Type" -> "Elementwise", "Arrays" -> <||>, 
            "Parameters" -> <|
             "Function" -> 
              NeuralNetworks`ValidatedParameter["GaussianErrorLinearUnit"], 
              "$Dimensions" -> {32, 16, 56, 56}|>, 
            "Inputs" -> <|
             "Input" -> NeuralNetworks`TensorT[{32, 16, 56, 56}, 
                NeuralNetworks`RealT]|>, 
            "Outputs" -> <|
             "Output" -> 
              NeuralNetworks`TensorT[{32, 16, 56, 56}, 
                NeuralNetworks`RealT]|>|>, 
          "block/con/4" -> <|
           "Type" -> "Convolution", 
            "Arrays" -> <|
             "Weights" -> 
              NeuralNetworks`TensorT[{64, 32, 3, 3, 3}, NeuralNetworks`RealT],
               "Biases" -> NeuralNetworks`Nullable[
                NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]]|>, 
            "Parameters" -> <|
             "OutputChannels" -> 64, "KernelSize" -> {3, 3, 3}, 
              "Stride" -> {1, 1, 1}, 
              "PaddingSize" -> {{1, 1}, {1, 1}, {1, 1}}, 
              "Dilation" -> {1, 1, 1}, "ChannelGroups" -> 1, "Dimensionality" -> 
              3, "Interleaving" -> False, "$InputChannels" -> 32, 
              "$InputSize" -> {16, 56, 56}, "$OutputSize" -> {16, 56, 56}, 
              "$WeightsInputChannels" -> 32|>, 
            "Inputs" -> <|
             "Input" -> NeuralNetworks`TensorT[{32, 16, 56, 56}, 
                NeuralNetworks`RealT]|>, 
            "Outputs" -> <|
             "Output" -> 
              NeuralNetworks`TensorT[{64, 16, 56, 56}, 
                NeuralNetworks`RealT]|>|>, 
          "block/con/5" -> <|
           "Type" -> "BatchNormalization", 
            "Arrays" -> <|
             "Scaling" -> NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
              "Biases" -> NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
              "MovingMean" -> 
              NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
              "MovingVariance" -> 
              NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]|>, 
            "Parameters" -> <|
             "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> False, 
              "$Channels" -> 64, "$SpatialDimensions" -> {16, 56, 56}|>, 
            "Inputs" -> <|
             "Input" -> NeuralNetworks`TensorT[{64, 16, 56, 56}, 
                NeuralNetworks`RealT]|>, 
            "Outputs" -> <|
             "Output" -> 
              NeuralNetworks`TensorT[{64, 16, 56, 56}, 
                NeuralNetworks`RealT]|>|>, 
          "block/tot/1" -> <|
           "Type" -> "Total", "Arrays" -> <||>, "Parameters" -> <||>, 
            "Inputs" -> <|
             "Input1" -> 
              NeuralNetworks`TensorT[{64, 16, 56, 56}, NeuralNetworks`RealT], 
              "Input2" -> 
              NeuralNetworks`TensorT[{64, 16, 56, 56}, 
                NeuralNetworks`RealT]|>, 
            "Outputs" -> <|
             "Output" -> 
              NeuralNetworks`TensorT[{64, 16, 56, 56}, 
                NeuralNetworks`RealT]|>|>, 
          "block/tot/2" -> <|
           "Type" -> "Elementwise", "Arrays" -> <||>, 
            "Parameters" -> <|
             "Function" -> 
              NeuralNetworks`ValidatedParameter["GaussianErrorLinearUnit"], 
              "$Dimensions" -> {64, 16, 56, 56}|>, 
            "Inputs" -> <|
             "Input" -> NeuralNetworks`TensorT[{64, 16, 56, 56}, 
                NeuralNetworks`RealT]|>, 
            "Outputs" -> <|
             "Output" -> 
              NeuralNetworks`TensorT[{64, 16, 56, 56}, 
                NeuralNetworks`RealT]|>|>, 
          "drop" -> <|
           "Type" -> "Dropout", "Arrays" -> <||>, 
            "Parameters" -> <|
             "DropoutProbability" -> 0.2, "Method" -> "Dropout", 
              "OutputPorts" -> 
              NeuralNetworks`ValidatedParameter[{"Output"}]|>, 
            "Inputs" -> <|
             "Input" -> NeuralNetworks`TensorT[{64, 16, 56, 56}, 
                NeuralNetworks`RealT]|>, 
            "Outputs" -> <|
             "Output" -> 
              NeuralNetworks`TensorT[{64, 16, 56, 56}, 
                NeuralNetworks`RealT]|>|>, 
          "scaleD/1" -> <|
           "Type" -> "Convolution", 
            "Arrays" -> <|
             "Weights" -> 
              NeuralNetworks`TensorT[{64, 64, 2, 2, 2}, NeuralNetworks`RealT],
               "Biases" -> NeuralNetworks`Nullable[
                NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]]|>, 
            "Parameters" -> <|
             "OutputChannels" -> 64, "KernelSize" -> {2, 2, 2}, 
              "Stride" -> {2, 2, 2}, 
              "PaddingSize" -> {{0, 0}, {0, 0}, {0, 0}}, 
              "Dilation" -> {1, 1, 1}, "ChannelGroups" -> 1, "Dimensionality" -> 
              3, "Interleaving" -> False, "$InputChannels" -> 64, 
              "$InputSize" -> {16, 56, 56}, "$OutputSize" -> {8, 28, 28}, 
              "$WeightsInputChannels" -> 64|>, 
            "Inputs" -> <|
             "Input" -> NeuralNetworks`TensorT[{64, 16, 56, 56}, 
                NeuralNetworks`RealT]|>, 
            "Outputs" -> <|
             "Output" -> 
              NeuralNetworks`TensorT[{64, 8, 28, 28}, 
                NeuralNetworks`RealT]|>|>|>, 
        "Edges" -> {
         NeuralNetworks`NetPath["Nodes", "block/con/1", "Inputs", "Input"] -> 
          NeuralNetworks`NetPath["Inputs", "Input"], 
          NeuralNetworks`NetPath["Nodes", "block/skip/1", "Inputs", "Input"] -> 
          NeuralNetworks`NetPath["Inputs", "Input"], 
          NeuralNetworks`NetPath["Nodes", "block/con/2", "Inputs", "Input"] -> 
          NeuralNetworks`NetPath["Nodes", "block/con/1", "Outputs", "Output"],
           NeuralNetworks`NetPath["Nodes", "block/skip/2", "Inputs", "Input"] -> 
          NeuralNetworks`NetPath[
           "Nodes", "block/skip/1", "Outputs", "Output"], 
          NeuralNetworks`NetPath["Nodes", "block/con/3", "Inputs", "Input"] -> 
          NeuralNetworks`NetPath["Nodes", "block/con/2", "Outputs", "Output"],
           NeuralNetworks`NetPath["Nodes", "block/tot/1", "Inputs", "Input2"] -> 
          NeuralNetworks`NetPath[
           "Nodes", "block/skip/2", "Outputs", "Output"], 
          NeuralNetworks`NetPath["Nodes", "block/con/4", "Inputs", "Input"] -> 
          NeuralNetworks`NetPath["Nodes", "block/con/3", "Outputs", "Output"],
           NeuralNetworks`NetPath["Nodes", "block/con/5", "Inputs", "Input"] -> 
          NeuralNetworks`NetPath["Nodes", "block/con/4", "Outputs", "Output"],
           NeuralNetworks`NetPath["Nodes", "block/tot/1", "Inputs", "Input1"] -> 
          NeuralNetworks`NetPath["Nodes", "block/con/5", "Outputs", "Output"],
           NeuralNetworks`NetPath["Nodes", "block/tot/2", "Inputs", "Input"] -> 
          NeuralNetworks`NetPath["Nodes", "block/tot/1", "Outputs", "Output"],
           NeuralNetworks`NetPath["Nodes", "drop", "Inputs", "Input"] -> 
          NeuralNetworks`NetPath["Nodes", "block/tot/2", "Outputs", "Output"],
           NeuralNetworks`NetPath["Outputs", "Skip"] -> 
          NeuralNetworks`NetPath["Nodes", "drop", "Outputs", "Output"], 
          NeuralNetworks`NetPath["Nodes", "scaleD/1", "Inputs", "Input"] -> 
          NeuralNetworks`NetPath["Nodes", "drop", "Outputs", "Output"], 
          NeuralNetworks`NetPath["Outputs", "Down"] -> 
          NeuralNetworks`NetPath["Nodes", "scaleD/1", "Outputs", "Output"]}|>,
       "enc_3" -> <|
       "Type" -> "Graph", 
        "Inputs" -> <|
         "Input" -> NeuralNetworks`TensorT[{64, 8, 28, 28}, 
            NeuralNetworks`RealT]|>, 
        "Outputs" -> <|
         "Down" -> NeuralNetworks`TensorT[{128, 4, 14, 14}, 
            NeuralNetworks`RealT], "Skip" -> 
          NeuralNetworks`TensorT[{128, 8, 28, 28}, NeuralNetworks`RealT]|>, 
        "Nodes" -> <|
         "block/con/1" -> <|
           "Type" -> "Convolution", 
            "Arrays" -> <|
             "Weights" -> 
              NeuralNetworks`TensorT[{64, 64, 3, 3, 3}, NeuralNetworks`RealT],
               "Biases" -> NeuralNetworks`Nullable[
                NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]]|>, 
            "Parameters" -> <|
             "OutputChannels" -> 64, "KernelSize" -> {3, 3, 3}, 
              "Stride" -> {1, 1, 1}, 
              "PaddingSize" -> {{1, 1}, {1, 1}, {1, 1}}, 
              "Dilation" -> {1, 1, 1}, "ChannelGroups" -> 1, "Dimensionality" -> 
              3, "Interleaving" -> False, "$InputChannels" -> 64, 
              "$InputSize" -> {8, 28, 28}, "$OutputSize" -> {8, 28, 28}, 
              "$WeightsInputChannels" -> 64|>, 
            "Inputs" -> <|
             "Input" -> NeuralNetworks`TensorT[{64, 8, 28, 28}, 
                NeuralNetworks`RealT]|>, 
            "Outputs" -> <|
             "Output" -> 
              NeuralNetworks`TensorT[{64, 8, 28, 28}, 
                NeuralNetworks`RealT]|>|>, 
          "block/skip/1" -> <|
           "Type" -> "Convolution", 
            "Arrays" -> <|
             "Weights" -> 
              NeuralNetworks`TensorT[{128, 64, 1, 1, 1}, 
                NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]]|>, 
            "Parameters" -> <|
             "OutputChannels" -> 128, "KernelSize" -> {1, 1, 1}, 
              "Stride" -> {1, 1, 1}, 
              "PaddingSize" -> {{0, 0}, {0, 0}, {0, 0}}, 
              "Dilation" -> {1, 1, 1}, "ChannelGroups" -> 1, "Dimensionality" -> 
              3, "Interleaving" -> False, "$InputChannels" -> 64, 
              "$InputSize" -> {8, 28, 28}, "$OutputSize" -> {8, 28, 28}, 
              "$WeightsInputChannels" -> 64|>, 
            "Inputs" -> <|
             "Input" -> NeuralNetworks`TensorT[{64, 8, 28, 28}, 
                NeuralNetworks`RealT]|>, 
            "Outputs" -> <|
             "Output" -> 
              NeuralNetworks`TensorT[{128, 8, 28, 28}, 
                NeuralNetworks`RealT]|>|>, 
          "block/con/2" -> <|
           "Type" -> "BatchNormalization", 
            "Arrays" -> <|
             "Scaling" -> NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
              "Biases" -> NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
              "MovingMean" -> 
              NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
              "MovingVariance" -> 
              NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]|>, 
            "Parameters" -> <|
             "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> False, 
              "$Channels" -> 64, "$SpatialDimensions" -> {8, 28, 28}|>, 
            "Inputs" -> <|
             "Input" -> NeuralNetworks`TensorT[{64, 8, 28, 28}, 
                NeuralNetworks`RealT]|>, 
            "Outputs" -> <|
             "Output" -> 
              NeuralNetworks`TensorT[{64, 8, 28, 28}, 
                NeuralNetworks`RealT]|>|>, 
          "block/skip/2" -> <|
           "Type" -> "BatchNormalization", 
            "Arrays" -> <|
             "Scaling" -> NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT],
               "Biases" -> 
              NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
              "MovingMean" -> 
              NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
              "MovingVariance" -> 
              NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]|>, 
            "Parameters" -> <|
             "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> False, 
              "$Channels" -> 128, "$SpatialDimensions" -> {8, 28, 28}|>, 
            "Inputs" -> <|
             "Input" -> NeuralNetworks`TensorT[{128, 8, 28, 28}, 
                NeuralNetworks`RealT]|>, 
            "Outputs" -> <|
             "Output" -> 
              NeuralNetworks`TensorT[{128, 8, 28, 28}, 
                NeuralNetworks`RealT]|>|>, 
          "block/con/3" -> <|
           "Type" -> "Elementwise", "Arrays" -> <||>, 
            "Parameters" -> <|
             "Function" -> 
              NeuralNetworks`ValidatedParameter["GaussianErrorLinearUnit"], 
              "$Dimensions" -> {64, 8, 28, 28}|>, 
            "Inputs" -> <|
             "Input" -> NeuralNetworks`TensorT[{64, 8, 28, 28}, 
                NeuralNetworks`RealT]|>, 
            "Outputs" -> <|
             "Output" -> 
              NeuralNetworks`TensorT[{64, 8, 28, 28}, 
                NeuralNetworks`RealT]|>|>, 
          "block/con/4" -> <|
           "Type" -> "Convolution", 
            "Arrays" -> <|
             "Weights" -> 
              NeuralNetworks`TensorT[{128, 64, 3, 3, 3}, 
                NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]]|>, 
            "Parameters" -> <|
             "OutputChannels" -> 128, "KernelSize" -> {3, 3, 3}, 
              "Stride" -> {1, 1, 1}, 
              "PaddingSize" -> {{1, 1}, {1, 1}, {1, 1}}, 
              "Dilation" -> {1, 1, 1}, "ChannelGroups" -> 1, "Dimensionality" -> 
              3, "Interleaving" -> False, "$InputChannels" -> 64, 
              "$InputSize" -> {8, 28, 28}, "$OutputSize" -> {8, 28, 28}, 
              "$WeightsInputChannels" -> 64|>, 
            "Inputs" -> <|
             "Input" -> NeuralNetworks`TensorT[{64, 8, 28, 28}, 
                NeuralNetworks`RealT]|>, 
            "Outputs" -> <|
             "Output" -> 
              NeuralNetworks`TensorT[{128, 8, 28, 28}, 
                NeuralNetworks`RealT]|>|>, 
          "block/con/5" -> <|
           "Type" -> "BatchNormalization", 
            "Arrays" -> <|
             "Scaling" -> NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT],
               "Biases" -> 
              NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
              "MovingMean" -> 
              NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
              "MovingVariance" -> 
              NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]|>, 
            "Parameters" -> <|
             "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> False, 
              "$Channels" -> 128, "$SpatialDimensions" -> {8, 28, 28}|>, 
            "Inputs" -> <|
             "Input" -> NeuralNetworks`TensorT[{128, 8, 28, 28}, 
                NeuralNetworks`RealT]|>, 
            "Outputs" -> <|
             "Output" -> 
              NeuralNetworks`TensorT[{128, 8, 28, 28}, 
                NeuralNetworks`RealT]|>|>, 
          "block/tot/1" -> <|
           "Type" -> "Total", "Arrays" -> <||>, "Parameters" -> <||>, 
            "Inputs" -> <|
             "Input1" -> 
              NeuralNetworks`TensorT[{128, 8, 28, 28}, NeuralNetworks`RealT], 
              "Input2" -> 
              NeuralNetworks`TensorT[{128, 8, 28, 28}, 
                NeuralNetworks`RealT]|>, 
            "Outputs" -> <|
             "Output" -> 
              NeuralNetworks`TensorT[{128, 8, 28, 28}, 
                NeuralNetworks`RealT]|>|>, 
          "block/tot/2" -> <|
           "Type" -> "Elementwise", "Arrays" -> <||>, 
            "Parameters" -> <|
             "Function" -> 
              NeuralNetworks`ValidatedParameter["GaussianErrorLinearUnit"], 
              "$Dimensions" -> {128, 8, 28, 28}|>, 
            "Inputs" -> <|
             "Input" -> NeuralNetworks`TensorT[{128, 8, 28, 28}, 
                NeuralNetworks`RealT]|>, 
            "Outputs" -> <|
             "Output" -> 
              NeuralNetworks`TensorT[{128, 8, 28, 28}, 
                NeuralNetworks`RealT]|>|>, 
          "drop" -> <|
           "Type" -> "Dropout", "Arrays" -> <||>, 
            "Parameters" -> <|
             "DropoutProbability" -> 0.2, "Method" -> "Dropout", 
              "OutputPorts" -> 
              NeuralNetworks`ValidatedParameter[{"Output"}]|>, 
            "Inputs" -> <|
             "Input" -> NeuralNetworks`TensorT[{128, 8, 28, 28}, 
                NeuralNetworks`RealT]|>, 
            "Outputs" -> <|
             "Output" -> 
              NeuralNetworks`TensorT[{128, 8, 28, 28}, 
                NeuralNetworks`RealT]|>|>, 
          "scaleD/1" -> <|
           "Type" -> "Convolution", 
            "Arrays" -> <|
             "Weights" -> 
              NeuralNetworks`TensorT[{128, 128, 2, 2, 2}, 
                NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]]|>, 
            "Parameters" -> <|
             "OutputChannels" -> 128, "KernelSize" -> {2, 2, 2}, 
              "Stride" -> {2, 2, 2}, 
              "PaddingSize" -> {{0, 0}, {0, 0}, {0, 0}}, 
              "Dilation" -> {1, 1, 1}, "ChannelGroups" -> 1, "Dimensionality" -> 
              3, "Interleaving" -> False, "$InputChannels" -> 128, 
              "$InputSize" -> {8, 28, 28}, "$OutputSize" -> {4, 14, 14}, 
              "$WeightsInputChannels" -> 128|>, 
            "Inputs" -> <|
             "Input" -> NeuralNetworks`TensorT[{128, 8, 28, 28}, 
                NeuralNetworks`RealT]|>, 
            "Outputs" -> <|
             "Output" -> 
              NeuralNetworks`TensorT[{128, 4, 14, 14}, 
                NeuralNetworks`RealT]|>|>|>, 
        "Edges" -> {
         NeuralNetworks`NetPath["Nodes", "block/con/1", "Inputs", "Input"] -> 
          NeuralNetworks`NetPath["Inputs", "Input"], 
          NeuralNetworks`NetPath["Nodes", "block/skip/1", "Inputs", "Input"] -> 
          NeuralNetworks`NetPath["Inputs", "Input"], 
          NeuralNetworks`NetPath["Nodes", "block/con/2", "Inputs", "Input"] -> 
          NeuralNetworks`NetPath["Nodes", "block/con/1", "Outputs", "Output"],
           NeuralNetworks`NetPath["Nodes", "block/skip/2", "Inputs", "Input"] -> 
          NeuralNetworks`NetPath[
           "Nodes", "block/skip/1", "Outputs", "Output"], 
          NeuralNetworks`NetPath["Nodes", "block/con/3", "Inputs", "Input"] -> 
          NeuralNetworks`NetPath["Nodes", "block/con/2", "Outputs", "Output"],
           NeuralNetworks`NetPath["Nodes", "block/tot/1", "Inputs", "Input2"] -> 
          NeuralNetworks`NetPath[
           "Nodes", "block/skip/2", "Outputs", "Output"], 
          NeuralNetworks`NetPath["Nodes", "block/con/4", "Inputs", "Input"] -> 
          NeuralNetworks`NetPath["Nodes", "block/con/3", "Outputs", "Output"],
           NeuralNetworks`NetPath["Nodes", "block/con/5", "Inputs", "Input"] -> 
          NeuralNetworks`NetPath["Nodes", "block/con/4", "Outputs", "Output"],
           NeuralNetworks`NetPath["Nodes", "block/tot/1", "Inputs", "Input1"] -> 
          NeuralNetworks`NetPath["Nodes", "block/con/5", "Outputs", "Output"],
           NeuralNetworks`NetPath["Nodes", "block/tot/2", "Inputs", "Input"] -> 
          NeuralNetworks`NetPath["Nodes", "block/tot/1", "Outputs", "Output"],
           NeuralNetworks`NetPath["Nodes", "drop", "Inputs", "Input"] -> 
          NeuralNetworks`NetPath["Nodes", "block/tot/2", "Outputs", "Output"],
           NeuralNetworks`NetPath["Outputs", "Skip"] -> 
          NeuralNetworks`NetPath["Nodes", "drop", "Outputs", "Output"], 
          NeuralNetworks`NetPath["Nodes", "scaleD/1", "Inputs", "Input"] -> 
          NeuralNetworks`NetPath["Nodes", "drop", "Outputs", "Output"], 
          NeuralNetworks`NetPath["Outputs", "Down"] -> 
          NeuralNetworks`NetPath["Nodes", "scaleD/1", "Outputs", "Output"]}|>,
       "enc_4" -> <|
       "Type" -> "Graph", 
        "Inputs" -> <|
         "Input" -> NeuralNetworks`TensorT[{128, 4, 14, 14}, 
            NeuralNetworks`RealT]|>, 
        "Outputs" -> <|
         "Down" -> NeuralNetworks`TensorT[{256, 2, 7, 7}, 
            NeuralNetworks`RealT], "Skip" -> 
          NeuralNetworks`TensorT[{256, 4, 14, 14}, NeuralNetworks`RealT]|>, 
        "Nodes" -> <|
         "block/con/1" -> <|
           "Type" -> "Convolution", 
            "Arrays" -> <|
             "Weights" -> 
              NeuralNetworks`TensorT[{128, 128, 3, 3, 3}, 
                NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]]|>, 
            "Parameters" -> <|
             "OutputChannels" -> 128, "KernelSize" -> {3, 3, 3}, 
              "Stride" -> {1, 1, 1}, 
              "PaddingSize" -> {{1, 1}, {1, 1}, {1, 1}}, 
              "Dilation" -> {1, 1, 1}, "ChannelGroups" -> 1, "Dimensionality" -> 
              3, "Interleaving" -> False, "$InputChannels" -> 128, 
              "$InputSize" -> {4, 14, 14}, "$OutputSize" -> {4, 14, 14}, 
              "$WeightsInputChannels" -> 128|>, 
            "Inputs" -> <|
             "Input" -> NeuralNetworks`TensorT[{128, 4, 14, 14}, 
                NeuralNetworks`RealT]|>, 
            "Outputs" -> <|
             "Output" -> 
              NeuralNetworks`TensorT[{128, 4, 14, 14}, 
                NeuralNetworks`RealT]|>|>, 
          "block/skip/1" -> <|
           "Type" -> "Convolution", 
            "Arrays" -> <|
             "Weights" -> 
              NeuralNetworks`TensorT[{256, 128, 1, 1, 1}, 
                NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]]|>, 
            "Parameters" -> <|
             "OutputChannels" -> 256, "KernelSize" -> {1, 1, 1}, 
              "Stride" -> {1, 1, 1}, 
              "PaddingSize" -> {{0, 0}, {0, 0}, {0, 0}}, 
              "Dilation" -> {1, 1, 1}, "ChannelGroups" -> 1, "Dimensionality" -> 
              3, "Interleaving" -> False, "$InputChannels" -> 128, 
              "$InputSize" -> {4, 14, 14}, "$OutputSize" -> {4, 14, 14}, 
              "$WeightsInputChannels" -> 128|>, 
            "Inputs" -> <|
             "Input" -> NeuralNetworks`TensorT[{128, 4, 14, 14}, 
                NeuralNetworks`RealT]|>, 
            "Outputs" -> <|
             "Output" -> 
              NeuralNetworks`TensorT[{256, 4, 14, 14}, 
                NeuralNetworks`RealT]|>|>, 
          "block/con/2" -> <|
           "Type" -> "BatchNormalization", 
            "Arrays" -> <|
             "Scaling" -> NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT],
               "Biases" -> 
              NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
              "MovingMean" -> 
              NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
              "MovingVariance" -> 
              NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]|>, 
            "Parameters" -> <|
             "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> False, 
              "$Channels" -> 128, "$SpatialDimensions" -> {4, 14, 14}|>, 
            "Inputs" -> <|
             "Input" -> NeuralNetworks`TensorT[{128, 4, 14, 14}, 
                NeuralNetworks`RealT]|>, 
            "Outputs" -> <|
             "Output" -> 
              NeuralNetworks`TensorT[{128, 4, 14, 14}, 
                NeuralNetworks`RealT]|>|>, 
          "block/skip/2" -> <|
           "Type" -> "BatchNormalization", 
            "Arrays" -> <|
             "Scaling" -> NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT],
               "Biases" -> 
              NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT], 
              "MovingMean" -> 
              NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT], 
              "MovingVariance" -> 
              NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]|>, 
            "Parameters" -> <|
             "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> False, 
              "$Channels" -> 256, "$SpatialDimensions" -> {4, 14, 14}|>, 
            "Inputs" -> <|
             "Input" -> NeuralNetworks`TensorT[{256, 4, 14, 14}, 
                NeuralNetworks`RealT]|>, 
            "Outputs" -> <|
             "Output" -> 
              NeuralNetworks`TensorT[{256, 4, 14, 14}, 
                NeuralNetworks`RealT]|>|>, 
          "block/con/3" -> <|
           "Type" -> "Elementwise", "Arrays" -> <||>, 
            "Parameters" -> <|
             "Function" -> 
              NeuralNetworks`ValidatedParameter["GaussianErrorLinearUnit"], 
              "$Dimensions" -> {128, 4, 14, 14}|>, 
            "Inputs" -> <|
             "Input" -> NeuralNetworks`TensorT[{128, 4, 14, 14}, 
                NeuralNetworks`RealT]|>, 
            "Outputs" -> <|
             "Output" -> 
              NeuralNetworks`TensorT[{128, 4, 14, 14}, 
                NeuralNetworks`RealT]|>|>, 
          "block/con/4" -> <|
           "Type" -> "Convolution", 
            "Arrays" -> <|
             "Weights" -> 
              NeuralNetworks`TensorT[{256, 128, 3, 3, 3}, 
                NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]]|>, 
            "Parameters" -> <|
             "OutputChannels" -> 256, "KernelSize" -> {3, 3, 3}, 
              "Stride" -> {1, 1, 1}, 
              "PaddingSize" -> {{1, 1}, {1, 1}, {1, 1}}, 
              "Dilation" -> {1, 1, 1}, "ChannelGroups" -> 1, "Dimensionality" -> 
              3, "Interleaving" -> False, "$InputChannels" -> 128, 
              "$InputSize" -> {4, 14, 14}, "$OutputSize" -> {4, 14, 14}, 
              "$WeightsInputChannels" -> 128|>, 
            "Inputs" -> <|
             "Input" -> NeuralNetworks`TensorT[{128, 4, 14, 14}, 
                NeuralNetworks`RealT]|>, 
            "Outputs" -> <|
             "Output" -> 
              NeuralNetworks`TensorT[{256, 4, 14, 14}, 
                NeuralNetworks`RealT]|>|>, 
          "block/con/5" -> <|
           "Type" -> "BatchNormalization", 
            "Arrays" -> <|
             "Scaling" -> NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT],
               "Biases" -> 
              NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT], 
              "MovingMean" -> 
              NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT], 
              "MovingVariance" -> 
              NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]|>, 
            "Parameters" -> <|
             "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> False, 
              "$Channels" -> 256, "$SpatialDimensions" -> {4, 14, 14}|>, 
            "Inputs" -> <|
             "Input" -> NeuralNetworks`TensorT[{256, 4, 14, 14}, 
                NeuralNetworks`RealT]|>, 
            "Outputs" -> <|
             "Output" -> 
              NeuralNetworks`TensorT[{256, 4, 14, 14}, 
                NeuralNetworks`RealT]|>|>, 
          "block/tot/1" -> <|
           "Type" -> "Total", "Arrays" -> <||>, "Parameters" -> <||>, 
            "Inputs" -> <|
             "Input1" -> 
              NeuralNetworks`TensorT[{256, 4, 14, 14}, NeuralNetworks`RealT], 
              "Input2" -> 
              NeuralNetworks`TensorT[{256, 4, 14, 14}, 
                NeuralNetworks`RealT]|>, 
            "Outputs" -> <|
             "Output" -> 
              NeuralNetworks`TensorT[{256, 4, 14, 14}, 
                NeuralNetworks`RealT]|>|>, 
          "block/tot/2" -> <|
           "Type" -> "Elementwise", "Arrays" -> <||>, 
            "Parameters" -> <|
             "Function" -> 
              NeuralNetworks`ValidatedParameter["GaussianErrorLinearUnit"], 
              "$Dimensions" -> {256, 4, 14, 14}|>, 
            "Inputs" -> <|
             "Input" -> NeuralNetworks`TensorT[{256, 4, 14, 14}, 
                NeuralNetworks`RealT]|>, 
            "Outputs" -> <|
             "Output" -> 
              NeuralNetworks`TensorT[{256, 4, 14, 14}, 
                NeuralNetworks`RealT]|>|>, 
          "drop" -> <|
           "Type" -> "Dropout", "Arrays" -> <||>, 
            "Parameters" -> <|
             "DropoutProbability" -> 0.2, "Method" -> "Dropout", 
              "OutputPorts" -> 
              NeuralNetworks`ValidatedParameter[{"Output"}]|>, 
            "Inputs" -> <|
             "Input" -> NeuralNetworks`TensorT[{256, 4, 14, 14}, 
                NeuralNetworks`RealT]|>, 
            "Outputs" -> <|
             "Output" -> 
              NeuralNetworks`TensorT[{256, 4, 14, 14}, 
                NeuralNetworks`RealT]|>|>, 
          "scaleD/1" -> <|
           "Type" -> "Convolution", 
            "Arrays" -> <|
             "Weights" -> 
              NeuralNetworks`TensorT[{256, 256, 2, 2, 2}, 
                NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]]|>, 
            "Parameters" -> <|
             "OutputChannels" -> 256, "KernelSize" -> {2, 2, 2}, 
              "Stride" -> {2, 2, 2}, 
              "PaddingSize" -> {{0, 0}, {0, 0}, {0, 0}}, 
              "Dilation" -> {1, 1, 1}, "ChannelGroups" -> 1, "Dimensionality" -> 
              3, "Interleaving" -> False, "$InputChannels" -> 256, 
              "$InputSize" -> {4, 14, 14}, "$OutputSize" -> {2, 7, 7}, 
              "$WeightsInputChannels" -> 256|>, 
            "Inputs" -> <|
             "Input" -> NeuralNetworks`TensorT[{256, 4, 14, 14}, 
                NeuralNetworks`RealT]|>, 
            "Outputs" -> <|
             "Output" -> 
              NeuralNetworks`TensorT[{256, 2, 7, 7}, 
                NeuralNetworks`RealT]|>|>|>, 
        "Edges" -> {
         NeuralNetworks`NetPath["Nodes", "block/con/1", "Inputs", "Input"] -> 
          NeuralNetworks`NetPath["Inputs", "Input"], 
          NeuralNetworks`NetPath["Nodes", "block/skip/1", "Inputs", "Input"] -> 
          NeuralNetworks`NetPath["Inputs", "Input"], 
          NeuralNetworks`NetPath["Nodes", "block/con/2", "Inputs", "Input"] -> 
          NeuralNetworks`NetPath["Nodes", "block/con/1", "Outputs", "Output"],
           NeuralNetworks`NetPath["Nodes", "block/skip/2", "Inputs", "Input"] -> 
          NeuralNetworks`NetPath[
           "Nodes", "block/skip/1", "Outputs", "Output"], 
          NeuralNetworks`NetPath["Nodes", "block/con/3", "Inputs", "Input"] -> 
          NeuralNetworks`NetPath["Nodes", "block/con/2", "Outputs", "Output"],
           NeuralNetworks`NetPath["Nodes", "block/tot/1", "Inputs", "Input2"] -> 
          NeuralNetworks`NetPath[
           "Nodes", "block/skip/2", "Outputs", "Output"], 
          NeuralNetworks`NetPath["Nodes", "block/con/4", "Inputs", "Input"] -> 
          NeuralNetworks`NetPath["Nodes", "block/con/3", "Outputs", "Output"],
           NeuralNetworks`NetPath["Nodes", "block/con/5", "Inputs", "Input"] -> 
          NeuralNetworks`NetPath["Nodes", "block/con/4", "Outputs", "Output"],
           NeuralNetworks`NetPath["Nodes", "block/tot/1", "Inputs", "Input1"] -> 
          NeuralNetworks`NetPath["Nodes", "block/con/5", "Outputs", "Output"],
           NeuralNetworks`NetPath["Nodes", "block/tot/2", "Inputs", "Input"] -> 
          NeuralNetworks`NetPath["Nodes", "block/tot/1", "Outputs", "Output"],
           NeuralNetworks`NetPath["Nodes", "drop", "Inputs", "Input"] -> 
          NeuralNetworks`NetPath["Nodes", "block/tot/2", "Outputs", "Output"],
           NeuralNetworks`NetPath["Outputs", "Skip"] -> 
          NeuralNetworks`NetPath["Nodes", "drop", "Outputs", "Output"], 
          NeuralNetworks`NetPath["Nodes", "scaleD/1", "Inputs", "Input"] -> 
          NeuralNetworks`NetPath["Nodes", "drop", "Outputs", "Output"], 
          NeuralNetworks`NetPath["Outputs", "Down"] -> 
          NeuralNetworks`NetPath["Nodes", "scaleD/1", "Outputs", "Output"]}|>,
       "enc_5" -> <|
       "Type" -> "Graph", 
        "Inputs" -> <|
         "Input" -> NeuralNetworks`TensorT[{256, 2, 7, 7}, 
            NeuralNetworks`RealT]|>, 
        "Outputs" -> <|
         "Skip" -> NeuralNetworks`TensorT[{512, 2, 7, 7}, 
            NeuralNetworks`RealT]|>, 
        "Nodes" -> <|
         "block/con/1" -> <|
           "Type" -> "Convolution", 
            "Arrays" -> <|
             "Weights" -> 
              NeuralNetworks`TensorT[{256, 256, 3, 3, 3}, 
                NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]]|>, 
            "Parameters" -> <|
             "OutputChannels" -> 256, "KernelSize" -> {3, 3, 3}, 
              "Stride" -> {1, 1, 1}, 
              "PaddingSize" -> {{1, 1}, {1, 1}, {1, 1}}, 
              "Dilation" -> {1, 1, 1}, "ChannelGroups" -> 1, "Dimensionality" -> 
              3, "Interleaving" -> False, "$InputChannels" -> 256, 
              "$InputSize" -> {2, 7, 7}, "$OutputSize" -> {2, 7, 7}, 
              "$WeightsInputChannels" -> 256|>, 
            "Inputs" -> <|
             "Input" -> NeuralNetworks`TensorT[{256, 2, 7, 7}, 
                NeuralNetworks`RealT]|>, 
            "Outputs" -> <|
             "Output" -> 
              NeuralNetworks`TensorT[{256, 2, 7, 7}, 
                NeuralNetworks`RealT]|>|>, 
          "block/skip/1" -> <|
           "Type" -> "Convolution", 
            "Arrays" -> <|
             "Weights" -> 
              NeuralNetworks`TensorT[{512, 256, 1, 1, 1}, 
                NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]]|>, 
            "Parameters" -> <|
             "OutputChannels" -> 512, "KernelSize" -> {1, 1, 1}, 
              "Stride" -> {1, 1, 1}, 
              "PaddingSize" -> {{0, 0}, {0, 0}, {0, 0}}, 
              "Dilation" -> {1, 1, 1}, "ChannelGroups" -> 1, "Dimensionality" -> 
              3, "Interleaving" -> False, "$InputChannels" -> 256, 
              "$InputSize" -> {2, 7, 7}, "$OutputSize" -> {2, 7, 7}, 
              "$WeightsInputChannels" -> 256|>, 
            "Inputs" -> <|
             "Input" -> NeuralNetworks`TensorT[{256, 2, 7, 7}, 
                NeuralNetworks`RealT]|>, 
            "Outputs" -> <|
             "Output" -> 
              NeuralNetworks`TensorT[{512, 2, 7, 7}, 
                NeuralNetworks`RealT]|>|>, 
          "block/con/2" -> <|
           "Type" -> "BatchNormalization", 
            "Arrays" -> <|
             "Scaling" -> NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT],
               "Biases" -> 
              NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT], 
              "MovingMean" -> 
              NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT], 
              "MovingVariance" -> 
              NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]|>, 
            "Parameters" -> <|
             "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> False, 
              "$Channels" -> 256, "$SpatialDimensions" -> {2, 7, 7}|>, 
            "Inputs" -> <|
             "Input" -> NeuralNetworks`TensorT[{256, 2, 7, 7}, 
                NeuralNetworks`RealT]|>, 
            "Outputs" -> <|
             "Output" -> 
              NeuralNetworks`TensorT[{256, 2, 7, 7}, 
                NeuralNetworks`RealT]|>|>, 
          "block/skip/2" -> <|
           "Type" -> "BatchNormalization", 
            "Arrays" -> <|
             "Scaling" -> NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT],
               "Biases" -> 
              NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
              "MovingMean" -> 
              NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
              "MovingVariance" -> 
              NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]|>, 
            "Parameters" -> <|
             "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> False, 
              "$Channels" -> 512, "$SpatialDimensions" -> {2, 7, 7}|>, 
            "Inputs" -> <|
             "Input" -> NeuralNetworks`TensorT[{512, 2, 7, 7}, 
                NeuralNetworks`RealT]|>, 
            "Outputs" -> <|
             "Output" -> 
              NeuralNetworks`TensorT[{512, 2, 7, 7}, 
                NeuralNetworks`RealT]|>|>, 
          "block/con/3" -> <|
           "Type" -> "Elementwise", "Arrays" -> <||>, 
            "Parameters" -> <|
             "Function" -> 
              NeuralNetworks`ValidatedParameter["GaussianErrorLinearUnit"], 
              "$Dimensions" -> {256, 2, 7, 7}|>, 
            "Inputs" -> <|
             "Input" -> NeuralNetworks`TensorT[{256, 2, 7, 7}, 
                NeuralNetworks`RealT]|>, 
            "Outputs" -> <|
             "Output" -> 
              NeuralNetworks`TensorT[{256, 2, 7, 7}, 
                NeuralNetworks`RealT]|>|>, 
          "block/con/4" -> <|
           "Type" -> "Convolution", 
            "Arrays" -> <|
             "Weights" -> 
              NeuralNetworks`TensorT[{512, 256, 3, 3, 3}, 
                NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]]|>, 
            "Parameters" -> <|
             "OutputChannels" -> 512, "KernelSize" -> {3, 3, 3}, 
              "Stride" -> {1, 1, 1}, 
              "PaddingSize" -> {{1, 1}, {1, 1}, {1, 1}}, 
              "Dilation" -> {1, 1, 1}, "ChannelGroups" -> 1, "Dimensionality" -> 
              3, "Interleaving" -> False, "$InputChannels" -> 256, 
              "$InputSize" -> {2, 7, 7}, "$OutputSize" -> {2, 7, 7}, 
              "$WeightsInputChannels" -> 256|>, 
            "Inputs" -> <|
             "Input" -> NeuralNetworks`TensorT[{256, 2, 7, 7}, 
                NeuralNetworks`RealT]|>, 
            "Outputs" -> <|
             "Output" -> 
              NeuralNetworks`TensorT[{512, 2, 7, 7}, 
                NeuralNetworks`RealT]|>|>, 
          "block/con/5" -> <|
           "Type" -> "BatchNormalization", 
            "Arrays" -> <|
             "Scaling" -> NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT],
               "Biases" -> 
              NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
              "MovingMean" -> 
              NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
              "MovingVariance" -> 
              NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]|>, 
            "Parameters" -> <|
             "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> False, 
              "$Channels" -> 512, "$SpatialDimensions" -> {2, 7, 7}|>, 
            "Inputs" -> <|
             "Input" -> NeuralNetworks`TensorT[{512, 2, 7, 7}, 
                NeuralNetworks`RealT]|>, 
            "Outputs" -> <|
             "Output" -> 
              NeuralNetworks`TensorT[{512, 2, 7, 7}, 
                NeuralNetworks`RealT]|>|>, 
          "block/tot/1" -> <|
           "Type" -> "Total", "Arrays" -> <||>, "Parameters" -> <||>, 
            "Inputs" -> <|
             "Input1" -> 
              NeuralNetworks`TensorT[{512, 2, 7, 7}, NeuralNetworks`RealT], 
              "Input2" -> 
              NeuralNetworks`TensorT[{512, 2, 7, 7}, NeuralNetworks`RealT]|>, 
            "Outputs" -> <|
             "Output" -> 
              NeuralNetworks`TensorT[{512, 2, 7, 7}, 
                NeuralNetworks`RealT]|>|>, 
          "block/tot/2" -> <|
           "Type" -> "Elementwise", "Arrays" -> <||>, 
            "Parameters" -> <|
             "Function" -> 
              NeuralNetworks`ValidatedParameter["GaussianErrorLinearUnit"], 
              "$Dimensions" -> {512, 2, 7, 7}|>, 
            "Inputs" -> <|
             "Input" -> NeuralNetworks`TensorT[{512, 2, 7, 7}, 
                NeuralNetworks`RealT]|>, 
            "Outputs" -> <|
             "Output" -> 
              NeuralNetworks`TensorT[{512, 2, 7, 7}, 
                NeuralNetworks`RealT]|>|>, 
          "drop" -> <|
           "Type" -> "Dropout", "Arrays" -> <||>, 
            "Parameters" -> <|
             "DropoutProbability" -> 0.2, "Method" -> "Dropout", 
              "OutputPorts" -> 
              NeuralNetworks`ValidatedParameter[{"Output"}]|>, 
            "Inputs" -> <|
             "Input" -> NeuralNetworks`TensorT[{512, 2, 7, 7}, 
                NeuralNetworks`RealT]|>, 
            "Outputs" -> <|
             "Output" -> 
              NeuralNetworks`TensorT[{512, 2, 7, 7}, 
                NeuralNetworks`RealT]|>|>|>, 
        "Edges" -> {
         NeuralNetworks`NetPath["Nodes", "block/con/1", "Inputs", "Input"] -> 
          NeuralNetworks`NetPath["Inputs", "Input"], 
          NeuralNetworks`NetPath["Nodes", "block/skip/1", "Inputs", "Input"] -> 
          NeuralNetworks`NetPath["Inputs", "Input"], 
          NeuralNetworks`NetPath["Nodes", "block/con/2", "Inputs", "Input"] -> 
          NeuralNetworks`NetPath["Nodes", "block/con/1", "Outputs", "Output"],
           NeuralNetworks`NetPath["Nodes", "block/skip/2", "Inputs", "Input"] -> 
          NeuralNetworks`NetPath[
           "Nodes", "block/skip/1", "Outputs", "Output"], 
          NeuralNetworks`NetPath["Nodes", "block/con/3", "Inputs", "Input"] -> 
          NeuralNetworks`NetPath["Nodes", "block/con/2", "Outputs", "Output"],
           NeuralNetworks`NetPath["Nodes", "block/tot/1", "Inputs", "Input2"] -> 
          NeuralNetworks`NetPath[
           "Nodes", "block/skip/2", "Outputs", "Output"], 
          NeuralNetworks`NetPath["Nodes", "block/con/4", "Inputs", "Input"] -> 
          NeuralNetworks`NetPath["Nodes", "block/con/3", "Outputs", "Output"],
           NeuralNetworks`NetPath["Nodes", "block/con/5", "Inputs", "Input"] -> 
          NeuralNetworks`NetPath["Nodes", "block/con/4", "Outputs", "Output"],
           NeuralNetworks`NetPath["Nodes", "block/tot/1", "Inputs", "Input1"] -> 
          NeuralNetworks`NetPath["Nodes", "block/con/5", "Outputs", "Output"],
           NeuralNetworks`NetPath["Nodes", "block/tot/2", "Inputs", "Input"] -> 
          NeuralNetworks`NetPath["Nodes", "block/tot/1", "Outputs", "Output"],
           NeuralNetworks`NetPath["Nodes", "drop", "Inputs", "Input"] -> 
          NeuralNetworks`NetPath["Nodes", "block/tot/2", "Outputs", "Output"],
           NeuralNetworks`NetPath["Outputs", "Skip"] -> 
          NeuralNetworks`NetPath["Nodes", "drop", "Outputs", "Output"]}|>, 
      "dec_4" -> <|
       "Type" -> "Graph", 
        "Inputs" -> <|
         "Skip" -> NeuralNetworks`TensorT[{256, 4, 14, 14}, 
            NeuralNetworks`RealT], "Scale" -> 
          NeuralNetworks`TensorT[{512, 2, 7, 7}, NeuralNetworks`RealT]|>, 
        "Outputs" -> <|
         "Up" -> NeuralNetworks`TensorT[{256, 4, 14, 14}, 
            NeuralNetworks`RealT]|>, 
        "Nodes" -> <|
         "scaleU/1" -> <|
           "Type" -> "Resize", "Arrays" -> <||>, 
            "Parameters" -> <|
             "Specification" -> NeuralNetworks`ValidatedParameter[{
                 Scaled[2], 
                 Scaled[2], 
                 Scaled[2]}], "Resampling" -> "Nearest", "Dimensionality" -> 
              3, "Interleaving" -> False, "Scheme" -> "Bin", "$Channels" -> 
              512, "$InputSize" -> {2, 7, 7}, "$OutputSize" -> {4, 14, 14}|>, 
            "Inputs" -> <|
             "Input" -> NeuralNetworks`TensorT[{512, 2, 7, 7}, 
                NeuralNetworks`RealT]|>, 
            "Outputs" -> <|
             "Output" -> 
              NeuralNetworks`TensorT[{512, 4, 14, 14}, 
                NeuralNetworks`RealT]|>|>, 
          "scaleU/2" -> <|
           "Type" -> "Convolution", 
            "Arrays" -> <|
             "Weights" -> 
              NeuralNetworks`TensorT[{256, 512, 2, 2, 2}, 
                NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]]|>, 
            "Parameters" -> <|
             "OutputChannels" -> 256, "KernelSize" -> {2, 2, 2}, 
              "Stride" -> {1, 1, 1}, 
              "PaddingSize" -> {{0, 1}, {0, 1}, {0, 1}}, 
              "Dilation" -> {1, 1, 1}, "ChannelGroups" -> 1, "Dimensionality" -> 
              3, "Interleaving" -> False, "$InputChannels" -> 512, 
              "$InputSize" -> {4, 14, 14}, "$OutputSize" -> {4, 14, 14}, 
              "$WeightsInputChannels" -> 512|>, 
            "Inputs" -> <|
             "Input" -> NeuralNetworks`TensorT[{512, 4, 14, 14}, 
                NeuralNetworks`RealT]|>, 
            "Outputs" -> <|
             "Output" -> 
              NeuralNetworks`TensorT[{256, 4, 14, 14}, 
                NeuralNetworks`RealT]|>|>, 
          "cat" -> <|
           "Type" -> "Catenate", "Arrays" -> <||>, 
            "Parameters" -> <|"Level" -> 1|>, 
            "Inputs" -> <|
             "Input1" -> 
              NeuralNetworks`TensorT[{256, 4, 14, 14}, NeuralNetworks`RealT], 
              "Input2" -> 
              NeuralNetworks`TensorT[{256, 4, 14, 14}, 
                NeuralNetworks`RealT]|>, 
            "Outputs" -> <|
             "Output" -> 
              NeuralNetworks`TensorT[{512, 4, 14, 14}, 
                NeuralNetworks`RealT]|>|>, 
          "block/con/1" -> <|
           "Type" -> "Convolution", 
            "Arrays" -> <|
             "Weights" -> 
              NeuralNetworks`TensorT[{128, 512, 3, 3, 3}, 
                NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]]|>, 
            "Parameters" -> <|
             "OutputChannels" -> 128, "KernelSize" -> {3, 3, 3}, 
              "Stride" -> {1, 1, 1}, 
              "PaddingSize" -> {{1, 1}, {1, 1}, {1, 1}}, 
              "Dilation" -> {1, 1, 1}, "ChannelGroups" -> 1, "Dimensionality" -> 
              3, "Interleaving" -> False, "$InputChannels" -> 512, 
              "$InputSize" -> {4, 14, 14}, "$OutputSize" -> {4, 14, 14}, 
              "$WeightsInputChannels" -> 512|>, 
            "Inputs" -> <|
             "Input" -> NeuralNetworks`TensorT[{512, 4, 14, 14}, 
                NeuralNetworks`RealT]|>, 
            "Outputs" -> <|
             "Output" -> 
              NeuralNetworks`TensorT[{128, 4, 14, 14}, 
                NeuralNetworks`RealT]|>|>, 
          "block/skip/1" -> <|
           "Type" -> "Convolution", 
            "Arrays" -> <|
             "Weights" -> 
              NeuralNetworks`TensorT[{256, 512, 1, 1, 1}, 
                NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]]|>, 
            "Parameters" -> <|
             "OutputChannels" -> 256, "KernelSize" -> {1, 1, 1}, 
              "Stride" -> {1, 1, 1}, 
              "PaddingSize" -> {{0, 0}, {0, 0}, {0, 0}}, 
              "Dilation" -> {1, 1, 1}, "ChannelGroups" -> 1, "Dimensionality" -> 
              3, "Interleaving" -> False, "$InputChannels" -> 512, 
              "$InputSize" -> {4, 14, 14}, "$OutputSize" -> {4, 14, 14}, 
              "$WeightsInputChannels" -> 512|>, 
            "Inputs" -> <|
             "Input" -> NeuralNetworks`TensorT[{512, 4, 14, 14}, 
                NeuralNetworks`RealT]|>, 
            "Outputs" -> <|
             "Output" -> 
              NeuralNetworks`TensorT[{256, 4, 14, 14}, 
                NeuralNetworks`RealT]|>|>, 
          "block/con/2" -> <|
           "Type" -> "BatchNormalization", 
            "Arrays" -> <|
             "Scaling" -> NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT],
               "Biases" -> 
              NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
              "MovingMean" -> 
              NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
              "MovingVariance" -> 
              NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]|>, 
            "Parameters" -> <|
             "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> False, 
              "$Channels" -> 128, "$SpatialDimensions" -> {4, 14, 14}|>, 
            "Inputs" -> <|
             "Input" -> NeuralNetworks`TensorT[{128, 4, 14, 14}, 
                NeuralNetworks`RealT]|>, 
            "Outputs" -> <|
             "Output" -> 
              NeuralNetworks`TensorT[{128, 4, 14, 14}, 
                NeuralNetworks`RealT]|>|>, 
          "block/skip/2" -> <|
           "Type" -> "BatchNormalization", 
            "Arrays" -> <|
             "Scaling" -> NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT],
               "Biases" -> 
              NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT], 
              "MovingMean" -> 
              NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT], 
              "MovingVariance" -> 
              NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]|>, 
            "Parameters" -> <|
             "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> False, 
              "$Channels" -> 256, "$SpatialDimensions" -> {4, 14, 14}|>, 
            "Inputs" -> <|
             "Input" -> NeuralNetworks`TensorT[{256, 4, 14, 14}, 
                NeuralNetworks`RealT]|>, 
            "Outputs" -> <|
             "Output" -> 
              NeuralNetworks`TensorT[{256, 4, 14, 14}, 
                NeuralNetworks`RealT]|>|>, 
          "block/con/3" -> <|
           "Type" -> "Elementwise", "Arrays" -> <||>, 
            "Parameters" -> <|
             "Function" -> 
              NeuralNetworks`ValidatedParameter["GaussianErrorLinearUnit"], 
              "$Dimensions" -> {128, 4, 14, 14}|>, 
            "Inputs" -> <|
             "Input" -> NeuralNetworks`TensorT[{128, 4, 14, 14}, 
                NeuralNetworks`RealT]|>, 
            "Outputs" -> <|
             "Output" -> 
              NeuralNetworks`TensorT[{128, 4, 14, 14}, 
                NeuralNetworks`RealT]|>|>, 
          "block/con/4" -> <|
           "Type" -> "Convolution", 
            "Arrays" -> <|
             "Weights" -> 
              NeuralNetworks`TensorT[{256, 128, 3, 3, 3}, 
                NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]]|>, 
            "Parameters" -> <|
             "OutputChannels" -> 256, "KernelSize" -> {3, 3, 3}, 
              "Stride" -> {1, 1, 1}, 
              "PaddingSize" -> {{1, 1}, {1, 1}, {1, 1}}, 
              "Dilation" -> {1, 1, 1}, "ChannelGroups" -> 1, "Dimensionality" -> 
              3, "Interleaving" -> False, "$InputChannels" -> 128, 
              "$InputSize" -> {4, 14, 14}, "$OutputSize" -> {4, 14, 14}, 
              "$WeightsInputChannels" -> 128|>, 
            "Inputs" -> <|
             "Input" -> NeuralNetworks`TensorT[{128, 4, 14, 14}, 
                NeuralNetworks`RealT]|>, 
            "Outputs" -> <|
             "Output" -> 
              NeuralNetworks`TensorT[{256, 4, 14, 14}, 
                NeuralNetworks`RealT]|>|>, 
          "block/con/5" -> <|
           "Type" -> "BatchNormalization", 
            "Arrays" -> <|
             "Scaling" -> NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT],
               "Biases" -> 
              NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT], 
              "MovingMean" -> 
              NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT], 
              "MovingVariance" -> 
              NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]|>, 
            "Parameters" -> <|
             "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> False, 
              "$Channels" -> 256, "$SpatialDimensions" -> {4, 14, 14}|>, 
            "Inputs" -> <|
             "Input" -> NeuralNetworks`TensorT[{256, 4, 14, 14}, 
                NeuralNetworks`RealT]|>, 
            "Outputs" -> <|
             "Output" -> 
              NeuralNetworks`TensorT[{256, 4, 14, 14}, 
                NeuralNetworks`RealT]|>|>, 
          "block/tot/1" -> <|
           "Type" -> "Total", "Arrays" -> <||>, "Parameters" -> <||>, 
            "Inputs" -> <|
             "Input1" -> 
              NeuralNetworks`TensorT[{256, 4, 14, 14}, NeuralNetworks`RealT], 
              "Input2" -> 
              NeuralNetworks`TensorT[{256, 4, 14, 14}, 
                NeuralNetworks`RealT]|>, 
            "Outputs" -> <|
             "Output" -> 
              NeuralNetworks`TensorT[{256, 4, 14, 14}, 
                NeuralNetworks`RealT]|>|>, 
          "block/tot/2" -> <|
           "Type" -> "Elementwise", "Arrays" -> <||>, 
            "Parameters" -> <|
             "Function" -> 
              NeuralNetworks`ValidatedParameter["GaussianErrorLinearUnit"], 
              "$Dimensions" -> {256, 4, 14, 14}|>, 
            "Inputs" -> <|
             "Input" -> NeuralNetworks`TensorT[{256, 4, 14, 14}, 
                NeuralNetworks`RealT]|>, 
            "Outputs" -> <|
             "Output" -> 
              NeuralNetworks`TensorT[{256, 4, 14, 14}, 
                NeuralNetworks`RealT]|>|>, 
          "drop" -> <|
           "Type" -> "Dropout", "Arrays" -> <||>, 
            "Parameters" -> <|
             "DropoutProbability" -> 0.2, "Method" -> "Dropout", 
              "OutputPorts" -> 
              NeuralNetworks`ValidatedParameter[{"Output"}]|>, 
            "Inputs" -> <|
             "Input" -> NeuralNetworks`TensorT[{256, 4, 14, 14}, 
                NeuralNetworks`RealT]|>, 
            "Outputs" -> <|
             "Output" -> 
              NeuralNetworks`TensorT[{256, 4, 14, 14}, 
                NeuralNetworks`RealT]|>|>|>, 
        "Edges" -> {
         NeuralNetworks`NetPath["Nodes", "cat", "Inputs", "Input1"] -> 
          NeuralNetworks`NetPath["Inputs", "Skip"], 
          NeuralNetworks`NetPath["Nodes", "scaleU/1", "Inputs", "Input"] -> 
          NeuralNetworks`NetPath["Inputs", "Scale"], 
          NeuralNetworks`NetPath["Nodes", "scaleU/2", "Inputs", "Input"] -> 
          NeuralNetworks`NetPath["Nodes", "scaleU/1", "Outputs", "Output"], 
          NeuralNetworks`NetPath["Nodes", "cat", "Inputs", "Input2"] -> 
          NeuralNetworks`NetPath["Nodes", "scaleU/2", "Outputs", "Output"], 
          NeuralNetworks`NetPath["Nodes", "block/con/1", "Inputs", "Input"] -> 
          NeuralNetworks`NetPath["Nodes", "cat", "Outputs", "Output"], 
          NeuralNetworks`NetPath["Nodes", "block/skip/1", "Inputs", "Input"] -> 
          NeuralNetworks`NetPath["Nodes", "cat", "Outputs", "Output"], 
          NeuralNetworks`NetPath["Nodes", "block/con/2", "Inputs", "Input"] -> 
          NeuralNetworks`NetPath["Nodes", "block/con/1", "Outputs", "Output"],
           NeuralNetworks`NetPath["Nodes", "block/skip/2", "Inputs", "Input"] -> 
          NeuralNetworks`NetPath[
           "Nodes", "block/skip/1", "Outputs", "Output"], 
          NeuralNetworks`NetPath["Nodes", "block/con/3", "Inputs", "Input"] -> 
          NeuralNetworks`NetPath["Nodes", "block/con/2", "Outputs", "Output"],
           NeuralNetworks`NetPath["Nodes", "block/tot/1", "Inputs", "Input2"] -> 
          NeuralNetworks`NetPath[
           "Nodes", "block/skip/2", "Outputs", "Output"], 
          NeuralNetworks`NetPath["Nodes", "block/con/4", "Inputs", "Input"] -> 
          NeuralNetworks`NetPath["Nodes", "block/con/3", "Outputs", "Output"],
           NeuralNetworks`NetPath["Nodes", "block/con/5", "Inputs", "Input"] -> 
          NeuralNetworks`NetPath["Nodes", "block/con/4", "Outputs", "Output"],
           NeuralNetworks`NetPath["Nodes", "block/tot/1", "Inputs", "Input1"] -> 
          NeuralNetworks`NetPath["Nodes", "block/con/5", "Outputs", "Output"],
           NeuralNetworks`NetPath["Nodes", "block/tot/2", "Inputs", "Input"] -> 
          NeuralNetworks`NetPath["Nodes", "block/tot/1", "Outputs", "Output"],
           NeuralNetworks`NetPath["Nodes", "drop", "Inputs", "Input"] -> 
          NeuralNetworks`NetPath["Nodes", "block/tot/2", "Outputs", "Output"],
           NeuralNetworks`NetPath["Outputs", "Up"] -> 
          NeuralNetworks`NetPath["Nodes", "drop", "Outputs", "Output"]}|>, 
      "dec_3" -> <|
       "Type" -> "Graph", 
        "Inputs" -> <|
         "Skip" -> NeuralNetworks`TensorT[{128, 8, 28, 28}, 
            NeuralNetworks`RealT], "Scale" -> 
          NeuralNetworks`TensorT[{256, 4, 14, 14}, NeuralNetworks`RealT]|>, 
        "Outputs" -> <|
         "Up" -> NeuralNetworks`TensorT[{128, 8, 28, 28}, 
            NeuralNetworks`RealT]|>, 
        "Nodes" -> <|
         "scaleU/1" -> <|
           "Type" -> "Resize", "Arrays" -> <||>, 
            "Parameters" -> <|
             "Specification" -> NeuralNetworks`ValidatedParameter[{
                 Scaled[2], 
                 Scaled[2], 
                 Scaled[2]}], "Resampling" -> "Nearest", "Dimensionality" -> 
              3, "Interleaving" -> False, "Scheme" -> "Bin", "$Channels" -> 
              256, "$InputSize" -> {4, 14, 14}, 
              "$OutputSize" -> {8, 28, 28}|>, 
            "Inputs" -> <|
             "Input" -> NeuralNetworks`TensorT[{256, 4, 14, 14}, 
                NeuralNetworks`RealT]|>, 
            "Outputs" -> <|
             "Output" -> 
              NeuralNetworks`TensorT[{256, 8, 28, 28}, 
                NeuralNetworks`RealT]|>|>, 
          "scaleU/2" -> <|
           "Type" -> "Convolution", 
            "Arrays" -> <|
             "Weights" -> 
              NeuralNetworks`TensorT[{128, 256, 2, 2, 2}, 
                NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]]|>, 
            "Parameters" -> <|
             "OutputChannels" -> 128, "KernelSize" -> {2, 2, 2}, 
              "Stride" -> {1, 1, 1}, 
              "PaddingSize" -> {{0, 1}, {0, 1}, {0, 1}}, 
              "Dilation" -> {1, 1, 1}, "ChannelGroups" -> 1, "Dimensionality" -> 
              3, "Interleaving" -> False, "$InputChannels" -> 256, 
              "$InputSize" -> {8, 28, 28}, "$OutputSize" -> {8, 28, 28}, 
              "$WeightsInputChannels" -> 256|>, 
            "Inputs" -> <|
             "Input" -> NeuralNetworks`TensorT[{256, 8, 28, 28}, 
                NeuralNetworks`RealT]|>, 
            "Outputs" -> <|
             "Output" -> 
              NeuralNetworks`TensorT[{128, 8, 28, 28}, 
                NeuralNetworks`RealT]|>|>, 
          "cat" -> <|
           "Type" -> "Catenate", "Arrays" -> <||>, 
            "Parameters" -> <|"Level" -> 1|>, 
            "Inputs" -> <|
             "Input1" -> 
              NeuralNetworks`TensorT[{128, 8, 28, 28}, NeuralNetworks`RealT], 
              "Input2" -> 
              NeuralNetworks`TensorT[{128, 8, 28, 28}, 
                NeuralNetworks`RealT]|>, 
            "Outputs" -> <|
             "Output" -> 
              NeuralNetworks`TensorT[{256, 8, 28, 28}, 
                NeuralNetworks`RealT]|>|>, 
          "block/con/1" -> <|
           "Type" -> "Convolution", 
            "Arrays" -> <|
             "Weights" -> 
              NeuralNetworks`TensorT[{64, 256, 3, 3, 3}, 
                NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]]|>, 
            "Parameters" -> <|
             "OutputChannels" -> 64, "KernelSize" -> {3, 3, 3}, 
              "Stride" -> {1, 1, 1}, 
              "PaddingSize" -> {{1, 1}, {1, 1}, {1, 1}}, 
              "Dilation" -> {1, 1, 1}, "ChannelGroups" -> 1, "Dimensionality" -> 
              3, "Interleaving" -> False, "$InputChannels" -> 256, 
              "$InputSize" -> {8, 28, 28}, "$OutputSize" -> {8, 28, 28}, 
              "$WeightsInputChannels" -> 256|>, 
            "Inputs" -> <|
             "Input" -> NeuralNetworks`TensorT[{256, 8, 28, 28}, 
                NeuralNetworks`RealT]|>, 
            "Outputs" -> <|
             "Output" -> 
              NeuralNetworks`TensorT[{64, 8, 28, 28}, 
                NeuralNetworks`RealT]|>|>, 
          "block/skip/1" -> <|
           "Type" -> "Convolution", 
            "Arrays" -> <|
             "Weights" -> 
              NeuralNetworks`TensorT[{128, 256, 1, 1, 1}, 
                NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]]|>, 
            "Parameters" -> <|
             "OutputChannels" -> 128, "KernelSize" -> {1, 1, 1}, 
              "Stride" -> {1, 1, 1}, 
              "PaddingSize" -> {{0, 0}, {0, 0}, {0, 0}}, 
              "Dilation" -> {1, 1, 1}, "ChannelGroups" -> 1, "Dimensionality" -> 
              3, "Interleaving" -> False, "$InputChannels" -> 256, 
              "$InputSize" -> {8, 28, 28}, "$OutputSize" -> {8, 28, 28}, 
              "$WeightsInputChannels" -> 256|>, 
            "Inputs" -> <|
             "Input" -> NeuralNetworks`TensorT[{256, 8, 28, 28}, 
                NeuralNetworks`RealT]|>, 
            "Outputs" -> <|
             "Output" -> 
              NeuralNetworks`TensorT[{128, 8, 28, 28}, 
                NeuralNetworks`RealT]|>|>, 
          "block/con/2" -> <|
           "Type" -> "BatchNormalization", 
            "Arrays" -> <|
             "Scaling" -> NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
              "Biases" -> NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
              "MovingMean" -> 
              NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
              "MovingVariance" -> 
              NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]|>, 
            "Parameters" -> <|
             "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> False, 
              "$Channels" -> 64, "$SpatialDimensions" -> {8, 28, 28}|>, 
            "Inputs" -> <|
             "Input" -> NeuralNetworks`TensorT[{64, 8, 28, 28}, 
                NeuralNetworks`RealT]|>, 
            "Outputs" -> <|
             "Output" -> 
              NeuralNetworks`TensorT[{64, 8, 28, 28}, 
                NeuralNetworks`RealT]|>|>, 
          "block/skip/2" -> <|
           "Type" -> "BatchNormalization", 
            "Arrays" -> <|
             "Scaling" -> NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT],
               "Biases" -> 
              NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
              "MovingMean" -> 
              NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
              "MovingVariance" -> 
              NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]|>, 
            "Parameters" -> <|
             "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> False, 
              "$Channels" -> 128, "$SpatialDimensions" -> {8, 28, 28}|>, 
            "Inputs" -> <|
             "Input" -> NeuralNetworks`TensorT[{128, 8, 28, 28}, 
                NeuralNetworks`RealT]|>, 
            "Outputs" -> <|
             "Output" -> 
              NeuralNetworks`TensorT[{128, 8, 28, 28}, 
                NeuralNetworks`RealT]|>|>, 
          "block/con/3" -> <|
           "Type" -> "Elementwise", "Arrays" -> <||>, 
            "Parameters" -> <|
             "Function" -> 
              NeuralNetworks`ValidatedParameter["GaussianErrorLinearUnit"], 
              "$Dimensions" -> {64, 8, 28, 28}|>, 
            "Inputs" -> <|
             "Input" -> NeuralNetworks`TensorT[{64, 8, 28, 28}, 
                NeuralNetworks`RealT]|>, 
            "Outputs" -> <|
             "Output" -> 
              NeuralNetworks`TensorT[{64, 8, 28, 28}, 
                NeuralNetworks`RealT]|>|>, 
          "block/con/4" -> <|
           "Type" -> "Convolution", 
            "Arrays" -> <|
             "Weights" -> 
              NeuralNetworks`TensorT[{128, 64, 3, 3, 3}, 
                NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]]|>, 
            "Parameters" -> <|
             "OutputChannels" -> 128, "KernelSize" -> {3, 3, 3}, 
              "Stride" -> {1, 1, 1}, 
              "PaddingSize" -> {{1, 1}, {1, 1}, {1, 1}}, 
              "Dilation" -> {1, 1, 1}, "ChannelGroups" -> 1, "Dimensionality" -> 
              3, "Interleaving" -> False, "$InputChannels" -> 64, 
              "$InputSize" -> {8, 28, 28}, "$OutputSize" -> {8, 28, 28}, 
              "$WeightsInputChannels" -> 64|>, 
            "Inputs" -> <|
             "Input" -> NeuralNetworks`TensorT[{64, 8, 28, 28}, 
                NeuralNetworks`RealT]|>, 
            "Outputs" -> <|
             "Output" -> 
              NeuralNetworks`TensorT[{128, 8, 28, 28}, 
                NeuralNetworks`RealT]|>|>, 
          "block/con/5" -> <|
           "Type" -> "BatchNormalization", 
            "Arrays" -> <|
             "Scaling" -> NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT],
               "Biases" -> 
              NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
              "MovingMean" -> 
              NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
              "MovingVariance" -> 
              NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]|>, 
            "Parameters" -> <|
             "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> False, 
              "$Channels" -> 128, "$SpatialDimensions" -> {8, 28, 28}|>, 
            "Inputs" -> <|
             "Input" -> NeuralNetworks`TensorT[{128, 8, 28, 28}, 
                NeuralNetworks`RealT]|>, 
            "Outputs" -> <|
             "Output" -> 
              NeuralNetworks`TensorT[{128, 8, 28, 28}, 
                NeuralNetworks`RealT]|>|>, 
          "block/tot/1" -> <|
           "Type" -> "Total", "Arrays" -> <||>, "Parameters" -> <||>, 
            "Inputs" -> <|
             "Input1" -> 
              NeuralNetworks`TensorT[{128, 8, 28, 28}, NeuralNetworks`RealT], 
              "Input2" -> 
              NeuralNetworks`TensorT[{128, 8, 28, 28}, 
                NeuralNetworks`RealT]|>, 
            "Outputs" -> <|
             "Output" -> 
              NeuralNetworks`TensorT[{128, 8, 28, 28}, 
                NeuralNetworks`RealT]|>|>, 
          "block/tot/2" -> <|
           "Type" -> "Elementwise", "Arrays" -> <||>, 
            "Parameters" -> <|
             "Function" -> 
              NeuralNetworks`ValidatedParameter["GaussianErrorLinearUnit"], 
              "$Dimensions" -> {128, 8, 28, 28}|>, 
            "Inputs" -> <|
             "Input" -> NeuralNetworks`TensorT[{128, 8, 28, 28}, 
                NeuralNetworks`RealT]|>, 
            "Outputs" -> <|
             "Output" -> 
              NeuralNetworks`TensorT[{128, 8, 28, 28}, 
                NeuralNetworks`RealT]|>|>, 
          "drop" -> <|
           "Type" -> "Dropout", "Arrays" -> <||>, 
            "Parameters" -> <|
             "DropoutProbability" -> 0.2, "Method" -> "Dropout", 
              "OutputPorts" -> 
              NeuralNetworks`ValidatedParameter[{"Output"}]|>, 
            "Inputs" -> <|
             "Input" -> NeuralNetworks`TensorT[{128, 8, 28, 28}, 
                NeuralNetworks`RealT]|>, 
            "Outputs" -> <|
             "Output" -> 
              NeuralNetworks`TensorT[{128, 8, 28, 28}, 
                NeuralNetworks`RealT]|>|>|>, 
        "Edges" -> {
         NeuralNetworks`NetPath["Nodes", "cat", "Inputs", "Input1"] -> 
          NeuralNetworks`NetPath["Inputs", "Skip"], 
          NeuralNetworks`NetPath["Nodes", "scaleU/1", "Inputs", "Input"] -> 
          NeuralNetworks`NetPath["Inputs", "Scale"], 
          NeuralNetworks`NetPath["Nodes", "scaleU/2", "Inputs", "Input"] -> 
          NeuralNetworks`NetPath["Nodes", "scaleU/1", "Outputs", "Output"], 
          NeuralNetworks`NetPath["Nodes", "cat", "Inputs", "Input2"] -> 
          NeuralNetworks`NetPath["Nodes", "scaleU/2", "Outputs", "Output"], 
          NeuralNetworks`NetPath["Nodes", "block/con/1", "Inputs", "Input"] -> 
          NeuralNetworks`NetPath["Nodes", "cat", "Outputs", "Output"], 
          NeuralNetworks`NetPath["Nodes", "block/skip/1", "Inputs", "Input"] -> 
          NeuralNetworks`NetPath["Nodes", "cat", "Outputs", "Output"], 
          NeuralNetworks`NetPath["Nodes", "block/con/2", "Inputs", "Input"] -> 
          NeuralNetworks`NetPath["Nodes", "block/con/1", "Outputs", "Output"],
           NeuralNetworks`NetPath["Nodes", "block/skip/2", "Inputs", "Input"] -> 
          NeuralNetworks`NetPath[
           "Nodes", "block/skip/1", "Outputs", "Output"], 
          NeuralNetworks`NetPath["Nodes", "block/con/3", "Inputs", "Input"] -> 
          NeuralNetworks`NetPath["Nodes", "block/con/2", "Outputs", "Output"],
           NeuralNetworks`NetPath["Nodes", "block/tot/1", "Inputs", "Input2"] -> 
          NeuralNetworks`NetPath[
           "Nodes", "block/skip/2", "Outputs", "Output"], 
          NeuralNetworks`NetPath["Nodes", "block/con/4", "Inputs", "Input"] -> 
          NeuralNetworks`NetPath["Nodes", "block/con/3", "Outputs", "Output"],
           NeuralNetworks`NetPath["Nodes", "block/con/5", "Inputs", "Input"] -> 
          NeuralNetworks`NetPath["Nodes", "block/con/4", "Outputs", "Output"],
           NeuralNetworks`NetPath["Nodes", "block/tot/1", "Inputs", "Input1"] -> 
          NeuralNetworks`NetPath["Nodes", "block/con/5", "Outputs", "Output"],
           NeuralNetworks`NetPath["Nodes", "block/tot/2", "Inputs", "Input"] -> 
          NeuralNetworks`NetPath["Nodes", "block/tot/1", "Outputs", "Output"],
           NeuralNetworks`NetPath["Nodes", "drop", "Inputs", "Input"] -> 
          NeuralNetworks`NetPath["Nodes", "block/tot/2", "Outputs", "Output"],
           NeuralNetworks`NetPath["Outputs", "Up"] -> 
          NeuralNetworks`NetPath["Nodes", "drop", "Outputs", "Output"]}|>, 
      "dec_2" -> <|
       "Type" -> "Graph", 
        "Inputs" -> <|
         "Skip" -> NeuralNetworks`TensorT[{64, 16, 56, 56}, 
            NeuralNetworks`RealT], "Scale" -> 
          NeuralNetworks`TensorT[{128, 8, 28, 28}, NeuralNetworks`RealT]|>, 
        "Outputs" -> <|
         "Up" -> NeuralNetworks`TensorT[{64, 16, 56, 56}, 
            NeuralNetworks`RealT]|>, 
        "Nodes" -> <|
         "scaleU/1" -> <|
           "Type" -> "Resize", "Arrays" -> <||>, 
            "Parameters" -> <|
             "Specification" -> NeuralNetworks`ValidatedParameter[{
                 Scaled[2], 
                 Scaled[2], 
                 Scaled[2]}], "Resampling" -> "Nearest", "Dimensionality" -> 
              3, "Interleaving" -> False, "Scheme" -> "Bin", "$Channels" -> 
              128, "$InputSize" -> {8, 28, 28}, 
              "$OutputSize" -> {16, 56, 56}|>, 
            "Inputs" -> <|
             "Input" -> NeuralNetworks`TensorT[{128, 8, 28, 28}, 
                NeuralNetworks`RealT]|>, 
            "Outputs" -> <|
             "Output" -> 
              NeuralNetworks`TensorT[{128, 16, 56, 56}, 
                NeuralNetworks`RealT]|>|>, 
          "scaleU/2" -> <|
           "Type" -> "Convolution", 
            "Arrays" -> <|
             "Weights" -> 
              NeuralNetworks`TensorT[{64, 128, 2, 2, 2}, 
                NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]]|>, 
            "Parameters" -> <|
             "OutputChannels" -> 64, "KernelSize" -> {2, 2, 2}, 
              "Stride" -> {1, 1, 1}, 
              "PaddingSize" -> {{0, 1}, {0, 1}, {0, 1}}, 
              "Dilation" -> {1, 1, 1}, "ChannelGroups" -> 1, "Dimensionality" -> 
              3, "Interleaving" -> False, "$InputChannels" -> 128, 
              "$InputSize" -> {16, 56, 56}, "$OutputSize" -> {16, 56, 56}, 
              "$WeightsInputChannels" -> 128|>, 
            "Inputs" -> <|
             "Input" -> NeuralNetworks`TensorT[{128, 16, 56, 56}, 
                NeuralNetworks`RealT]|>, 
            "Outputs" -> <|
             "Output" -> 
              NeuralNetworks`TensorT[{64, 16, 56, 56}, 
                NeuralNetworks`RealT]|>|>, 
          "cat" -> <|
           "Type" -> "Catenate", "Arrays" -> <||>, 
            "Parameters" -> <|"Level" -> 1|>, 
            "Inputs" -> <|
             "Input1" -> 
              NeuralNetworks`TensorT[{64, 16, 56, 56}, NeuralNetworks`RealT], 
              "Input2" -> 
              NeuralNetworks`TensorT[{64, 16, 56, 56}, 
                NeuralNetworks`RealT]|>, 
            "Outputs" -> <|
             "Output" -> 
              NeuralNetworks`TensorT[{128, 16, 56, 56}, 
                NeuralNetworks`RealT]|>|>, 
          "block/con/1" -> <|
           "Type" -> "Convolution", 
            "Arrays" -> <|
             "Weights" -> 
              NeuralNetworks`TensorT[{32, 128, 3, 3, 3}, 
                NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                NeuralNetworks`TensorT[{32}, NeuralNetworks`RealT]]|>, 
            "Parameters" -> <|
             "OutputChannels" -> 32, "KernelSize" -> {3, 3, 3}, 
              "Stride" -> {1, 1, 1}, 
              "PaddingSize" -> {{1, 1}, {1, 1}, {1, 1}}, 
              "Dilation" -> {1, 1, 1}, "ChannelGroups" -> 1, "Dimensionality" -> 
              3, "Interleaving" -> False, "$InputChannels" -> 128, 
              "$InputSize" -> {16, 56, 56}, "$OutputSize" -> {16, 56, 56}, 
              "$WeightsInputChannels" -> 128|>, 
            "Inputs" -> <|
             "Input" -> NeuralNetworks`TensorT[{128, 16, 56, 56}, 
                NeuralNetworks`RealT]|>, 
            "Outputs" -> <|
             "Output" -> 
              NeuralNetworks`TensorT[{32, 16, 56, 56}, 
                NeuralNetworks`RealT]|>|>, 
          "block/skip/1" -> <|
           "Type" -> "Convolution", 
            "Arrays" -> <|
             "Weights" -> 
              NeuralNetworks`TensorT[{64, 128, 1, 1, 1}, 
                NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]]|>, 
            "Parameters" -> <|
             "OutputChannels" -> 64, "KernelSize" -> {1, 1, 1}, 
              "Stride" -> {1, 1, 1}, 
              "PaddingSize" -> {{0, 0}, {0, 0}, {0, 0}}, 
              "Dilation" -> {1, 1, 1}, "ChannelGroups" -> 1, "Dimensionality" -> 
              3, "Interleaving" -> False, "$InputChannels" -> 128, 
              "$InputSize" -> {16, 56, 56}, "$OutputSize" -> {16, 56, 56}, 
              "$WeightsInputChannels" -> 128|>, 
            "Inputs" -> <|
             "Input" -> NeuralNetworks`TensorT[{128, 16, 56, 56}, 
                NeuralNetworks`RealT]|>, 
            "Outputs" -> <|
             "Output" -> 
              NeuralNetworks`TensorT[{64, 16, 56, 56}, 
                NeuralNetworks`RealT]|>|>, 
          "block/con/2" -> <|
           "Type" -> "BatchNormalization", 
            "Arrays" -> <|
             "Scaling" -> NeuralNetworks`TensorT[{32}, NeuralNetworks`RealT], 
              "Biases" -> NeuralNetworks`TensorT[{32}, NeuralNetworks`RealT], 
              "MovingMean" -> 
              NeuralNetworks`TensorT[{32}, NeuralNetworks`RealT], 
              "MovingVariance" -> 
              NeuralNetworks`TensorT[{32}, NeuralNetworks`RealT]|>, 
            "Parameters" -> <|
             "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> False, 
              "$Channels" -> 32, "$SpatialDimensions" -> {16, 56, 56}|>, 
            "Inputs" -> <|
             "Input" -> NeuralNetworks`TensorT[{32, 16, 56, 56}, 
                NeuralNetworks`RealT]|>, 
            "Outputs" -> <|
             "Output" -> 
              NeuralNetworks`TensorT[{32, 16, 56, 56}, 
                NeuralNetworks`RealT]|>|>, 
          "block/skip/2" -> <|
           "Type" -> "BatchNormalization", 
            "Arrays" -> <|
             "Scaling" -> NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
              "Biases" -> NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
              "MovingMean" -> 
              NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
              "MovingVariance" -> 
              NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]|>, 
            "Parameters" -> <|
             "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> False, 
              "$Channels" -> 64, "$SpatialDimensions" -> {16, 56, 56}|>, 
            "Inputs" -> <|
             "Input" -> NeuralNetworks`TensorT[{64, 16, 56, 56}, 
                NeuralNetworks`RealT]|>, 
            "Outputs" -> <|
             "Output" -> 
              NeuralNetworks`TensorT[{64, 16, 56, 56}, 
                NeuralNetworks`RealT]|>|>, 
          "block/con/3" -> <|
           "Type" -> "Elementwise", "Arrays" -> <||>, 
            "Parameters" -> <|
             "Function" -> 
              NeuralNetworks`ValidatedParameter["GaussianErrorLinearUnit"], 
              "$Dimensions" -> {32, 16, 56, 56}|>, 
            "Inputs" -> <|
             "Input" -> NeuralNetworks`TensorT[{32, 16, 56, 56}, 
                NeuralNetworks`RealT]|>, 
            "Outputs" -> <|
             "Output" -> 
              NeuralNetworks`TensorT[{32, 16, 56, 56}, 
                NeuralNetworks`RealT]|>|>, 
          "block/con/4" -> <|
           "Type" -> "Convolution", 
            "Arrays" -> <|
             "Weights" -> 
              NeuralNetworks`TensorT[{64, 32, 3, 3, 3}, NeuralNetworks`RealT],
               "Biases" -> NeuralNetworks`Nullable[
                NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]]|>, 
            "Parameters" -> <|
             "OutputChannels" -> 64, "KernelSize" -> {3, 3, 3}, 
              "Stride" -> {1, 1, 1}, 
              "PaddingSize" -> {{1, 1}, {1, 1}, {1, 1}}, 
              "Dilation" -> {1, 1, 1}, "ChannelGroups" -> 1, "Dimensionality" -> 
              3, "Interleaving" -> False, "$InputChannels" -> 32, 
              "$InputSize" -> {16, 56, 56}, "$OutputSize" -> {16, 56, 56}, 
              "$WeightsInputChannels" -> 32|>, 
            "Inputs" -> <|
             "Input" -> NeuralNetworks`TensorT[{32, 16, 56, 56}, 
                NeuralNetworks`RealT]|>, 
            "Outputs" -> <|
             "Output" -> 
              NeuralNetworks`TensorT[{64, 16, 56, 56}, 
                NeuralNetworks`RealT]|>|>, 
          "block/con/5" -> <|
           "Type" -> "BatchNormalization", 
            "Arrays" -> <|
             "Scaling" -> NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
              "Biases" -> NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
              "MovingMean" -> 
              NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
              "MovingVariance" -> 
              NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]|>, 
            "Parameters" -> <|
             "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> False, 
              "$Channels" -> 64, "$SpatialDimensions" -> {16, 56, 56}|>, 
            "Inputs" -> <|
             "Input" -> NeuralNetworks`TensorT[{64, 16, 56, 56}, 
                NeuralNetworks`RealT]|>, 
            "Outputs" -> <|
             "Output" -> 
              NeuralNetworks`TensorT[{64, 16, 56, 56}, 
                NeuralNetworks`RealT]|>|>, 
          "block/tot/1" -> <|
           "Type" -> "Total", "Arrays" -> <||>, "Parameters" -> <||>, 
            "Inputs" -> <|
             "Input1" -> 
              NeuralNetworks`TensorT[{64, 16, 56, 56}, NeuralNetworks`RealT], 
              "Input2" -> 
              NeuralNetworks`TensorT[{64, 16, 56, 56}, 
                NeuralNetworks`RealT]|>, 
            "Outputs" -> <|
             "Output" -> 
              NeuralNetworks`TensorT[{64, 16, 56, 56}, 
                NeuralNetworks`RealT]|>|>, 
          "block/tot/2" -> <|
           "Type" -> "Elementwise", "Arrays" -> <||>, 
            "Parameters" -> <|
             "Function" -> 
              NeuralNetworks`ValidatedParameter["GaussianErrorLinearUnit"], 
              "$Dimensions" -> {64, 16, 56, 56}|>, 
            "Inputs" -> <|
             "Input" -> NeuralNetworks`TensorT[{64, 16, 56, 56}, 
                NeuralNetworks`RealT]|>, 
            "Outputs" -> <|
             "Output" -> 
              NeuralNetworks`TensorT[{64, 16, 56, 56}, 
                NeuralNetworks`RealT]|>|>, 
          "drop" -> <|
           "Type" -> "Dropout", "Arrays" -> <||>, 
            "Parameters" -> <|
             "DropoutProbability" -> 0.2, "Method" -> "Dropout", 
              "OutputPorts" -> 
              NeuralNetworks`ValidatedParameter[{"Output"}]|>, 
            "Inputs" -> <|
             "Input" -> NeuralNetworks`TensorT[{64, 16, 56, 56}, 
                NeuralNetworks`RealT]|>, 
            "Outputs" -> <|
             "Output" -> 
              NeuralNetworks`TensorT[{64, 16, 56, 56}, 
                NeuralNetworks`RealT]|>|>|>, 
        "Edges" -> {
         NeuralNetworks`NetPath["Nodes", "cat", "Inputs", "Input1"] -> 
          NeuralNetworks`NetPath["Inputs", "Skip"], 
          NeuralNetworks`NetPath["Nodes", "scaleU/1", "Inputs", "Input"] -> 
          NeuralNetworks`NetPath["Inputs", "Scale"], 
          NeuralNetworks`NetPath["Nodes", "scaleU/2", "Inputs", "Input"] -> 
          NeuralNetworks`NetPath["Nodes", "scaleU/1", "Outputs", "Output"], 
          NeuralNetworks`NetPath["Nodes", "cat", "Inputs", "Input2"] -> 
          NeuralNetworks`NetPath["Nodes", "scaleU/2", "Outputs", "Output"], 
          NeuralNetworks`NetPath["Nodes", "block/con/1", "Inputs", "Input"] -> 
          NeuralNetworks`NetPath["Nodes", "cat", "Outputs", "Output"], 
          NeuralNetworks`NetPath["Nodes", "block/skip/1", "Inputs", "Input"] -> 
          NeuralNetworks`NetPath["Nodes", "cat", "Outputs", "Output"], 
          NeuralNetworks`NetPath["Nodes", "block/con/2", "Inputs", "Input"] -> 
          NeuralNetworks`NetPath["Nodes", "block/con/1", "Outputs", "Output"],
           NeuralNetworks`NetPath["Nodes", "block/skip/2", "Inputs", "Input"] -> 
          NeuralNetworks`NetPath[
           "Nodes", "block/skip/1", "Outputs", "Output"], 
          NeuralNetworks`NetPath["Nodes", "block/con/3", "Inputs", "Input"] -> 
          NeuralNetworks`NetPath["Nodes", "block/con/2", "Outputs", "Output"],
           NeuralNetworks`NetPath["Nodes", "block/tot/1", "Inputs", "Input2"] -> 
          NeuralNetworks`NetPath[
           "Nodes", "block/skip/2", "Outputs", "Output"], 
          NeuralNetworks`NetPath["Nodes", "block/con/4", "Inputs", "Input"] -> 
          NeuralNetworks`NetPath["Nodes", "block/con/3", "Outputs", "Output"],
           NeuralNetworks`NetPath["Nodes", "block/con/5", "Inputs", "Input"] -> 
          NeuralNetworks`NetPath["Nodes", "block/con/4", "Outputs", "Output"],
           NeuralNetworks`NetPath["Nodes", "block/tot/1", "Inputs", "Input1"] -> 
          NeuralNetworks`NetPath["Nodes", "block/con/5", "Outputs", "Output"],
           NeuralNetworks`NetPath["Nodes", "block/tot/2", "Inputs", "Input"] -> 
          NeuralNetworks`NetPath["Nodes", "block/tot/1", "Outputs", "Output"],
           NeuralNetworks`NetPath["Nodes", "drop", "Inputs", "Input"] -> 
          NeuralNetworks`NetPath["Nodes", "block/tot/2", "Outputs", "Output"],
           NeuralNetworks`NetPath["Outputs", "Up"] -> 
          NeuralNetworks`NetPath["Nodes", "drop", "Outputs", "Output"]}|>, 
      "dec_1" -> <|
       "Type" -> "Graph", 
        "Inputs" -> <|
         "Skip" -> NeuralNetworks`TensorT[{32, 32, 112, 112}, 
            NeuralNetworks`RealT], "Scale" -> 
          NeuralNetworks`TensorT[{64, 16, 56, 56}, NeuralNetworks`RealT]|>, 
        "Outputs" -> <|
         "Up" -> NeuralNetworks`TensorT[{32, 32, 112, 112}, 
            NeuralNetworks`RealT]|>, 
        "Nodes" -> <|
         "scaleU/1" -> <|
           "Type" -> "Resize", "Arrays" -> <||>, 
            "Parameters" -> <|
             "Specification" -> NeuralNetworks`ValidatedParameter[{
                 Scaled[2], 
                 Scaled[2], 
                 Scaled[2]}], "Resampling" -> "Nearest", "Dimensionality" -> 
              3, "Interleaving" -> False, "Scheme" -> "Bin", "$Channels" -> 
              64, "$InputSize" -> {16, 56, 56}, 
              "$OutputSize" -> {32, 112, 112}|>, 
            "Inputs" -> <|
             "Input" -> NeuralNetworks`TensorT[{64, 16, 56, 56}, 
                NeuralNetworks`RealT]|>, 
            "Outputs" -> <|
             "Output" -> 
              NeuralNetworks`TensorT[{64, 32, 112, 112}, 
                NeuralNetworks`RealT]|>|>, 
          "scaleU/2" -> <|
           "Type" -> "Convolution", 
            "Arrays" -> <|
             "Weights" -> 
              NeuralNetworks`TensorT[{32, 64, 2, 2, 2}, NeuralNetworks`RealT],
               "Biases" -> NeuralNetworks`Nullable[
                NeuralNetworks`TensorT[{32}, NeuralNetworks`RealT]]|>, 
            "Parameters" -> <|
             "OutputChannels" -> 32, "KernelSize" -> {2, 2, 2}, 
              "Stride" -> {1, 1, 1}, 
              "PaddingSize" -> {{0, 1}, {0, 1}, {0, 1}}, 
              "Dilation" -> {1, 1, 1}, "ChannelGroups" -> 1, "Dimensionality" -> 
              3, "Interleaving" -> False, "$InputChannels" -> 64, 
              "$InputSize" -> {32, 112, 112}, "$OutputSize" -> {32, 112, 112},
               "$WeightsInputChannels" -> 64|>, 
            "Inputs" -> <|
             "Input" -> NeuralNetworks`TensorT[{64, 32, 112, 112}, 
                NeuralNetworks`RealT]|>, 
            "Outputs" -> <|
             "Output" -> 
              NeuralNetworks`TensorT[{32, 32, 112, 112}, 
                NeuralNetworks`RealT]|>|>, 
          "cat" -> <|
           "Type" -> "Catenate", "Arrays" -> <||>, 
            "Parameters" -> <|"Level" -> 1|>, 
            "Inputs" -> <|
             "Input1" -> 
              NeuralNetworks`TensorT[{32, 32, 112, 112}, 
                NeuralNetworks`RealT], "Input2" -> 
              NeuralNetworks`TensorT[{32, 32, 112, 112}, 
                NeuralNetworks`RealT]|>, 
            "Outputs" -> <|
             "Output" -> 
              NeuralNetworks`TensorT[{64, 32, 112, 112}, 
                NeuralNetworks`RealT]|>|>, 
          "block/con/1" -> <|
           "Type" -> "Convolution", 
            "Arrays" -> <|
             "Weights" -> 
              NeuralNetworks`TensorT[{16, 64, 3, 3, 3}, NeuralNetworks`RealT],
               "Biases" -> NeuralNetworks`Nullable[
                NeuralNetworks`TensorT[{16}, NeuralNetworks`RealT]]|>, 
            "Parameters" -> <|
             "OutputChannels" -> 16, "KernelSize" -> {3, 3, 3}, 
              "Stride" -> {1, 1, 1}, 
              "PaddingSize" -> {{1, 1}, {1, 1}, {1, 1}}, 
              "Dilation" -> {1, 1, 1}, "ChannelGroups" -> 1, "Dimensionality" -> 
              3, "Interleaving" -> False, "$InputChannels" -> 64, 
              "$InputSize" -> {32, 112, 112}, "$OutputSize" -> {32, 112, 112},
               "$WeightsInputChannels" -> 64|>, 
            "Inputs" -> <|
             "Input" -> NeuralNetworks`TensorT[{64, 32, 112, 112}, 
                NeuralNetworks`RealT]|>, 
            "Outputs" -> <|
             "Output" -> 
              NeuralNetworks`TensorT[{16, 32, 112, 112}, 
                NeuralNetworks`RealT]|>|>, 
          "block/skip/1" -> <|
           "Type" -> "Convolution", 
            "Arrays" -> <|
             "Weights" -> 
              NeuralNetworks`TensorT[{32, 64, 1, 1, 1}, NeuralNetworks`RealT],
               "Biases" -> NeuralNetworks`Nullable[
                NeuralNetworks`TensorT[{32}, NeuralNetworks`RealT]]|>, 
            "Parameters" -> <|
             "OutputChannels" -> 32, "KernelSize" -> {1, 1, 1}, 
              "Stride" -> {1, 1, 1}, 
              "PaddingSize" -> {{0, 0}, {0, 0}, {0, 0}}, 
              "Dilation" -> {1, 1, 1}, "ChannelGroups" -> 1, "Dimensionality" -> 
              3, "Interleaving" -> False, "$InputChannels" -> 64, 
              "$InputSize" -> {32, 112, 112}, "$OutputSize" -> {32, 112, 112},
               "$WeightsInputChannels" -> 64|>, 
            "Inputs" -> <|
             "Input" -> NeuralNetworks`TensorT[{64, 32, 112, 112}, 
                NeuralNetworks`RealT]|>, 
            "Outputs" -> <|
             "Output" -> 
              NeuralNetworks`TensorT[{32, 32, 112, 112}, 
                NeuralNetworks`RealT]|>|>, 
          "block/con/2" -> <|
           "Type" -> "BatchNormalization", 
            "Arrays" -> <|
             "Scaling" -> NeuralNetworks`TensorT[{16}, NeuralNetworks`RealT], 
              "Biases" -> NeuralNetworks`TensorT[{16}, NeuralNetworks`RealT], 
              "MovingMean" -> 
              NeuralNetworks`TensorT[{16}, NeuralNetworks`RealT], 
              "MovingVariance" -> 
              NeuralNetworks`TensorT[{16}, NeuralNetworks`RealT]|>, 
            "Parameters" -> <|
             "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> False, 
              "$Channels" -> 16, "$SpatialDimensions" -> {32, 112, 112}|>, 
            "Inputs" -> <|
             "Input" -> NeuralNetworks`TensorT[{16, 32, 112, 112}, 
                NeuralNetworks`RealT]|>, 
            "Outputs" -> <|
             "Output" -> 
              NeuralNetworks`TensorT[{16, 32, 112, 112}, 
                NeuralNetworks`RealT]|>|>, 
          "block/skip/2" -> <|
           "Type" -> "BatchNormalization", 
            "Arrays" -> <|
             "Scaling" -> NeuralNetworks`TensorT[{32}, NeuralNetworks`RealT], 
              "Biases" -> NeuralNetworks`TensorT[{32}, NeuralNetworks`RealT], 
              "MovingMean" -> 
              NeuralNetworks`TensorT[{32}, NeuralNetworks`RealT], 
              "MovingVariance" -> 
              NeuralNetworks`TensorT[{32}, NeuralNetworks`RealT]|>, 
            "Parameters" -> <|
             "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> False, 
              "$Channels" -> 32, "$SpatialDimensions" -> {32, 112, 112}|>, 
            "Inputs" -> <|
             "Input" -> NeuralNetworks`TensorT[{32, 32, 112, 112}, 
                NeuralNetworks`RealT]|>, 
            "Outputs" -> <|
             "Output" -> 
              NeuralNetworks`TensorT[{32, 32, 112, 112}, 
                NeuralNetworks`RealT]|>|>, 
          "block/con/3" -> <|
           "Type" -> "Elementwise", "Arrays" -> <||>, 
            "Parameters" -> <|
             "Function" -> 
              NeuralNetworks`ValidatedParameter["GaussianErrorLinearUnit"], 
              "$Dimensions" -> {16, 32, 112, 112}|>, 
            "Inputs" -> <|
             "Input" -> NeuralNetworks`TensorT[{16, 32, 112, 112}, 
                NeuralNetworks`RealT]|>, 
            "Outputs" -> <|
             "Output" -> 
              NeuralNetworks`TensorT[{16, 32, 112, 112}, 
                NeuralNetworks`RealT]|>|>, 
          "block/con/4" -> <|
           "Type" -> "Convolution", 
            "Arrays" -> <|
             "Weights" -> 
              NeuralNetworks`TensorT[{32, 16, 3, 3, 3}, NeuralNetworks`RealT],
               "Biases" -> NeuralNetworks`Nullable[
                NeuralNetworks`TensorT[{32}, NeuralNetworks`RealT]]|>, 
            "Parameters" -> <|
             "OutputChannels" -> 32, "KernelSize" -> {3, 3, 3}, 
              "Stride" -> {1, 1, 1}, 
              "PaddingSize" -> {{1, 1}, {1, 1}, {1, 1}}, 
              "Dilation" -> {1, 1, 1}, "ChannelGroups" -> 1, "Dimensionality" -> 
              3, "Interleaving" -> False, "$InputChannels" -> 16, 
              "$InputSize" -> {32, 112, 112}, "$OutputSize" -> {32, 112, 112},
               "$WeightsInputChannels" -> 16|>, 
            "Inputs" -> <|
             "Input" -> NeuralNetworks`TensorT[{16, 32, 112, 112}, 
                NeuralNetworks`RealT]|>, 
            "Outputs" -> <|
             "Output" -> 
              NeuralNetworks`TensorT[{32, 32, 112, 112}, 
                NeuralNetworks`RealT]|>|>, 
          "block/con/5" -> <|
           "Type" -> "BatchNormalization", 
            "Arrays" -> <|
             "Scaling" -> NeuralNetworks`TensorT[{32}, NeuralNetworks`RealT], 
              "Biases" -> NeuralNetworks`TensorT[{32}, NeuralNetworks`RealT], 
              "MovingMean" -> 
              NeuralNetworks`TensorT[{32}, NeuralNetworks`RealT], 
              "MovingVariance" -> 
              NeuralNetworks`TensorT[{32}, NeuralNetworks`RealT]|>, 
            "Parameters" -> <|
             "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> False, 
              "$Channels" -> 32, "$SpatialDimensions" -> {32, 112, 112}|>, 
            "Inputs" -> <|
             "Input" -> NeuralNetworks`TensorT[{32, 32, 112, 112}, 
                NeuralNetworks`RealT]|>, 
            "Outputs" -> <|
             "Output" -> 
              NeuralNetworks`TensorT[{32, 32, 112, 112}, 
                NeuralNetworks`RealT]|>|>, 
          "block/tot/1" -> <|
           "Type" -> "Total", "Arrays" -> <||>, "Parameters" -> <||>, 
            "Inputs" -> <|
             "Input1" -> 
              NeuralNetworks`TensorT[{32, 32, 112, 112}, 
                NeuralNetworks`RealT], "Input2" -> 
              NeuralNetworks`TensorT[{32, 32, 112, 112}, 
                NeuralNetworks`RealT]|>, 
            "Outputs" -> <|
             "Output" -> 
              NeuralNetworks`TensorT[{32, 32, 112, 112}, 
                NeuralNetworks`RealT]|>|>, 
          "block/tot/2" -> <|
           "Type" -> "Elementwise", "Arrays" -> <||>, 
            "Parameters" -> <|
             "Function" -> 
              NeuralNetworks`ValidatedParameter["GaussianErrorLinearUnit"], 
              "$Dimensions" -> {32, 32, 112, 112}|>, 
            "Inputs" -> <|
             "Input" -> NeuralNetworks`TensorT[{32, 32, 112, 112}, 
                NeuralNetworks`RealT]|>, 
            "Outputs" -> <|
             "Output" -> 
              NeuralNetworks`TensorT[{32, 32, 112, 112}, 
                NeuralNetworks`RealT]|>|>, 
          "drop" -> <|
           "Type" -> "Dropout", "Arrays" -> <||>, 
            "Parameters" -> <|
             "DropoutProbability" -> 0.2, "Method" -> "Dropout", 
              "OutputPorts" -> 
              NeuralNetworks`ValidatedParameter[{"Output"}]|>, 
            "Inputs" -> <|
             "Input" -> NeuralNetworks`TensorT[{32, 32, 112, 112}, 
                NeuralNetworks`RealT]|>, 
            "Outputs" -> <|
             "Output" -> 
              NeuralNetworks`TensorT[{32, 32, 112, 112}, 
                NeuralNetworks`RealT]|>|>|>, 
        "Edges" -> {
         NeuralNetworks`NetPath["Nodes", "cat", "Inputs", "Input1"] -> 
          NeuralNetworks`NetPath["Inputs", "Skip"], 
          NeuralNetworks`NetPath["Nodes", "scaleU/1", "Inputs", "Input"] -> 
          NeuralNetworks`NetPath["Inputs", "Scale"], 
          NeuralNetworks`NetPath["Nodes", "scaleU/2", "Inputs", "Input"] -> 
          NeuralNetworks`NetPath["Nodes", "scaleU/1", "Outputs", "Output"], 
          NeuralNetworks`NetPath["Nodes", "cat", "Inputs", "Input2"] -> 
          NeuralNetworks`NetPath["Nodes", "scaleU/2", "Outputs", "Output"], 
          NeuralNetworks`NetPath["Nodes", "block/con/1", "Inputs", "Input"] -> 
          NeuralNetworks`NetPath["Nodes", "cat", "Outputs", "Output"], 
          NeuralNetworks`NetPath["Nodes", "block/skip/1", "Inputs", "Input"] -> 
          NeuralNetworks`NetPath["Nodes", "cat", "Outputs", "Output"], 
          NeuralNetworks`NetPath["Nodes", "block/con/2", "Inputs", "Input"] -> 
          NeuralNetworks`NetPath["Nodes", "block/con/1", "Outputs", "Output"],
           NeuralNetworks`NetPath["Nodes", "block/skip/2", "Inputs", "Input"] -> 
          NeuralNetworks`NetPath[
           "Nodes", "block/skip/1", "Outputs", "Output"], 
          NeuralNetworks`NetPath["Nodes", "block/con/3", "Inputs", "Input"] -> 
          NeuralNetworks`NetPath["Nodes", "block/con/2", "Outputs", "Output"],
           NeuralNetworks`NetPath["Nodes", "block/tot/1", "Inputs", "Input2"] -> 
          NeuralNetworks`NetPath[
           "Nodes", "block/skip/2", "Outputs", "Output"], 
          NeuralNetworks`NetPath["Nodes", "block/con/4", "Inputs", "Input"] -> 
          NeuralNetworks`NetPath["Nodes", "block/con/3", "Outputs", "Output"],
           NeuralNetworks`NetPath["Nodes", "block/con/5", "Inputs", "Input"] -> 
          NeuralNetworks`NetPath["Nodes", "block/con/4", "Outputs", "Output"],
           NeuralNetworks`NetPath["Nodes", "block/tot/1", "Inputs", "Input1"] -> 
          NeuralNetworks`NetPath["Nodes", "block/con/5", "Outputs", "Output"],
           NeuralNetworks`NetPath["Nodes", "block/tot/2", "Inputs", "Input"] -> 
          NeuralNetworks`NetPath["Nodes", "block/tot/1", "Outputs", "Output"],
           NeuralNetworks`NetPath["Nodes", "drop", "Inputs", "Input"] -> 
          NeuralNetworks`NetPath["Nodes", "block/tot/2", "Outputs", "Output"],
           NeuralNetworks`NetPath["Outputs", "Up"] -> 
          NeuralNetworks`NetPath["Nodes", "drop", "Outputs", "Output"]}|>, 
      "map" -> <|
       "Type" -> "Graph", 
        "Inputs" -> <|
         "Input" -> NeuralNetworks`TensorT[{32, 32, 112, 112}, 
            NeuralNetworks`RealT]|>, 
        "Outputs" -> <|
         "Output" -> 
          NeuralNetworks`TensorT[{32, 112, 112, 20}, NeuralNetworks`RealT]|>, 
        "Nodes" -> <|
         "1" -> <|"Type" -> "Convolution", 
            "Arrays" -> <|
             "Weights" -> 
              NeuralNetworks`TensorT[{20, 32, 1, 1, 1}, NeuralNetworks`RealT],
               "Biases" -> NeuralNetworks`Nullable[
                NeuralNetworks`TensorT[{20}, NeuralNetworks`RealT]]|>, 
            "Parameters" -> <|
             "OutputChannels" -> 20, "KernelSize" -> {1, 1, 1}, 
              "Stride" -> {1, 1, 1}, 
              "PaddingSize" -> {{0, 0}, {0, 0}, {0, 0}}, 
              "Dilation" -> {1, 1, 1}, "ChannelGroups" -> 1, "Dimensionality" -> 
              3, "Interleaving" -> False, "$InputChannels" -> 32, 
              "$InputSize" -> {32, 112, 112}, "$OutputSize" -> {32, 112, 112},
               "$WeightsInputChannels" -> 32|>, 
            "Inputs" -> <|
             "Input" -> NeuralNetworks`TensorT[{32, 32, 112, 112}, 
                NeuralNetworks`RealT]|>, 
            "Outputs" -> <|
             "Output" -> 
              NeuralNetworks`TensorT[{20, 32, 112, 112}, 
                NeuralNetworks`RealT]|>|>, 
          "2" -> <|"Type" -> "Transpose", "Arrays" -> <||>, 
            "Parameters" -> <|
             "Specification" -> 
              NeuralNetworks`ValidatedParameter[{4, 1, 2, 3}]|>, 
            "Inputs" -> <|
             "Input" -> NeuralNetworks`TensorT[{20, 32, 112, 112}, 
                NeuralNetworks`RealT]|>, 
            "Outputs" -> <|
             "Output" -> 
              NeuralNetworks`TensorT[{32, 112, 112, 20}, 
                NeuralNetworks`RealT]|>|>, 
          "3" -> <|"Type" -> "Softmax", "Arrays" -> <||>, 
            "Parameters" -> <|"Level" -> -1|>, 
            "Inputs" -> <|
             "Input" -> NeuralNetworks`TensorT[{32, 112, 112, 20}, 
                NeuralNetworks`RealT]|>, 
            "Outputs" -> <|
             "Output" -> 
              NeuralNetworks`TensorT[{32, 112, 112, 20}, 
                NeuralNetworks`RealT]|>|>|>, 
        "Edges" -> {
         NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
          NeuralNetworks`NetPath["Inputs", "Input"], 
          NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
          NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
          NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
          NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"], 
          NeuralNetworks`NetPath["Outputs", "Output"] -> 
          NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"]}|>|>, 
    "Edges" -> {
     NeuralNetworks`NetPath["Nodes", "start", "Inputs", "Input"] -> 
      NeuralNetworks`NetPath["Inputs", "Input"], 
      NeuralNetworks`NetPath["Nodes", "enc_1", "Inputs", "Input"] -> 
      NeuralNetworks`NetPath["Nodes", "start", "Outputs", "Output"], 
      NeuralNetworks`NetPath["Nodes", "enc_2", "Inputs", "Input"] -> 
      NeuralNetworks`NetPath["Nodes", "enc_1", "Outputs", "Down"], 
      NeuralNetworks`NetPath["Nodes", "dec_1", "Inputs", "Skip"] -> 
      NeuralNetworks`NetPath["Nodes", "enc_1", "Outputs", "Skip"], 
      NeuralNetworks`NetPath["Nodes", "enc_3", "Inputs", "Input"] -> 
      NeuralNetworks`NetPath["Nodes", "enc_2", "Outputs", "Down"], 
      NeuralNetworks`NetPath["Nodes", "dec_2", "Inputs", "Skip"] -> 
      NeuralNetworks`NetPath["Nodes", "enc_2", "Outputs", "Skip"], 
      NeuralNetworks`NetPath["Nodes", "enc_4", "Inputs", "Input"] -> 
      NeuralNetworks`NetPath["Nodes", "enc_3", "Outputs", "Down"], 
      NeuralNetworks`NetPath["Nodes", "dec_3", "Inputs", "Skip"] -> 
      NeuralNetworks`NetPath["Nodes", "enc_3", "Outputs", "Skip"], 
      NeuralNetworks`NetPath["Nodes", "enc_5", "Inputs", "Input"] -> 
      NeuralNetworks`NetPath["Nodes", "enc_4", "Outputs", "Down"], 
      NeuralNetworks`NetPath["Nodes", "dec_4", "Inputs", "Skip"] -> 
      NeuralNetworks`NetPath["Nodes", "enc_4", "Outputs", "Skip"], 
      NeuralNetworks`NetPath["Nodes", "dec_4", "Inputs", "Scale"] -> 
      NeuralNetworks`NetPath["Nodes", "enc_5", "Outputs", "Skip"], 
      NeuralNetworks`NetPath["Nodes", "dec_3", "Inputs", "Scale"] -> 
      NeuralNetworks`NetPath["Nodes", "dec_4", "Outputs", "Up"], 
      NeuralNetworks`NetPath["Nodes", "dec_2", "Inputs", "Scale"] -> 
      NeuralNetworks`NetPath["Nodes", "dec_3", "Outputs", "Up"], 
      NeuralNetworks`NetPath["Nodes", "dec_1", "Inputs", "Scale"] -> 
      NeuralNetworks`NetPath["Nodes", "dec_2", "Outputs", "Up"], 
      NeuralNetworks`NetPath["Nodes", "map", "Inputs", "Input"] -> 
      NeuralNetworks`NetPath["Nodes", "dec_1", "Outputs", "Up"], 
      NeuralNetworks`NetPath["Outputs", "Output"] -> 
      NeuralNetworks`NetPath["Nodes", "map", "Outputs", "Output"]}|>, <|
   "Version" -> "14.1.1", "Unstable" -> False|>],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellLabel->"Out[18]=",ExpressionUUID->"ee07d783-e110-2443-9caf-942a7bca1807"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Summarize a Unet", "Subsubsection",ExpressionUUID->"24c9b318-cf54-9a4d-a1e9-bca028fe8b56"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"NetSummary", "[", 
  RowBox[{"net", ",", "\"\<Mem\>\""}], "]"}]], "Input",
 CellLabel->"In[20]:=",ExpressionUUID->"46ca1167-0534-1b47-bd35-f7ae4029c003"],

Cell[BoxData[
 TagBox[GridBox[{
    {
     StyleBox["\<\"Weight mem: \"\>",
      StripOnInput->False,
      FontWeight->Bold], "\<\"52.22 MB\"\>"},
    {
     StyleBox["\<\"Net mem: \"\>",
      StripOnInput->False,
      FontWeight->Bold], "\<\"1.74 GB\"\>"}
   },
   AutoDelete->False,
   GridBoxAlignment->{"Columns" -> {{Left}}},
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
  "Grid"]], "Output",
 CellLabel->"Out[20]=",ExpressionUUID->"97f4fba9-de75-294b-914a-78b98232f290"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"NetSummary", "[", "net", "]"}]], "Input",
 CellLabel->"In[19]:=",ExpressionUUID->"64685413-e627-2f48-8f78-917e48317452"],

Cell[BoxData[
 TagBox[GridBox[{
    {
     StyleBox["\<\"Number of batch norm. Layers: \"\>",
      StripOnInput->False,
      FontWeight->Bold], 
     StyleBox["28",
      StripOnInput->False,
      FontWeight->Bold]},
    {
     StyleBox["\<\" - Number of Weights: \"\>",
      StripOnInput->False,
      FontWeight->Bold], "\<\"14.78 K\"\>"},
    {
     StyleBox["\<\"Number of convolution Layers: \"\>",
      StripOnInput->False,
      FontWeight->Bold], 
     StyleBox["37",
      StripOnInput->False,
      FontWeight->Bold]},
    {
     StyleBox["\<\" - Number of Kernels: \"\>",
      StripOnInput->False,
      FontWeight->Bold], "\<\"1.00 M\"\>"},
    {
     StyleBox["\<\" - Number of Weighths: \"\>",
      StripOnInput->False,
      FontWeight->Bold], "\<\"13.03 M\"\>"},
    {"\<\"\"\>", ""},
    {
     StyleBox["\<\"Convolution Kernel Distribution:\"\>",
      StripOnInput->False,
      FontWeight->Bold], "\[SpanFromLeft]"},
    {
     ItemBox[
      TagBox[GridBox[{
         {
          StyleBox["\<\"Count\"\>",
           StripOnInput->False,
           FontWeight->Bold], 
          StyleBox["\<\"Size\"\>",
           StripOnInput->False,
           FontWeight->Bold], 
          StyleBox["\<\"Kernels\"\>",
           StripOnInput->False,
           FontWeight->Bold], 
          StyleBox["\<\"Weights\"\>",
           StripOnInput->False,
           FontWeight->Bold]},
         {"8", 
          RowBox[{"{", 
           RowBox[{"2", ",", "2", ",", "2"}], 
           "}"}], "\<\"261.12 K\"\>", "\<\"2.09 M\"\>"},
         {"11", 
          RowBox[{"{", 
           RowBox[{"1", ",", "1", ",", "1"}], 
           "}"}], "\<\"349.33 K\"\>", "\<\"349.33 K\"\>"},
         {"18", 
          RowBox[{"{", 
           RowBox[{"3", ",", "3", ",", "3"}], 
           "}"}], "\<\"392.45 K\"\>", "\<\"10.60 M\"\>"}
        },
        AutoDelete->False,
        GridBoxAlignment->{"Columns" -> {{Right}}},
        GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
        GridBoxSpacings->{"Columns" -> {{1.5}}, "Rows" -> {{1}}}],
       "Grid"],
      Alignment->Right,
      StripOnInput->False], "\[SpanFromLeft]"},
    {"\<\"\"\>", ""},
    {
     StyleBox["\<\"Total Weight Memory\"\>",
      StripOnInput->False,
      FontWeight->Bold], "\<\"52.22 MB\"\>"},
    {
     StyleBox["\<\"Total Network Memory\"\>",
      StripOnInput->False,
      FontWeight->Bold], "\<\"1.74 GB\"\>"}
   },
   AutoDelete->False,
   GridBoxAlignment->{"Columns" -> {Left, Right}},
   GridBoxBackground->{"Columns" -> {{
        GrayLevel[0.95]}}},
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
   GridBoxSpacings->{"Columns" -> {{1}}, "Rows" -> {{1}}}],
  "Grid"]], "Output",
 CellLabel->"Out[19]=",ExpressionUUID->"a66531a4-f7b8-8f4e-9a7f-faba7c57363b"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"NetSummary", "[", 
  RowBox[{"net", ",", "\"\<Full\>\""}], "]"}]], "Input",
 CellLabel->"In[21]:=",ExpressionUUID->"e2e64890-0f15-9440-abd9-7d7ce92f87c8"],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1: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
Z+mhMT1kppPGJD1GqQXzEmcM0JnNPFEzOxee+vy+FiezSVS7MTWlmU0CW9Ov
fdY5jdc1zN66FTXNfzoyxclselGJHm5eWw/AWpBnzVo1133EPzY63dTqbFjP
7/3xzZZT+lTo838hNR8dqzYPT//W75LZACSNzAa4bpE7NiRmy1PFNLNN7C+N
ymw9+w50dHScPn26q6urra2tt7e3qampr69vcZMfA90YhxJ/jxLJbBe+Vzh7
JnxtT3HzZz7X9Tu/78xsoT/5IpkNgCvIbIhpdXU1dC5SUn1Cpu6BIXmY6Rb5
ydT0zbqOzsFLw/MLC5lui9W2zGxn+/o2y2wvvfTSG2+8sXfv3meeeUYC20MP
PRQOhxfu3EkwDt29d+/k6a7eocj07GwqjdTMNvLjn5lg1v4bv23KPb/3xy3/
5tdlHjIbgNSR2RCTBLb9Vcf3HquSqbgq2Hl2MNMt8hmJbcXVQVl7x1tPEd42
k+AlmTEzWziWxDPb2npsO1LfJO9R+cmGOOEtkcw29OS3pXD1jbeaP/O5Kz//
pclsZ37/85Fvfz/80FfIbABSR2ZDTCXVJzSw6fR+RXVrb5hpW1NdR9f7ldVm
HR6sqa1qbm3sPpPxhtkzhZ/9XiKZ7frhiujM9kHZa6+9tnv37pKSkh07drS0
tAQCgTiZrf+xJ9samjc2oKnnjPOjfqC65lhjy8nO7sQbGXU+mwSzO5ELzoOh
8lCC3OyZsOQ6MhuAVJDZEFNUZttXefzi1VGmbU2n+8/urfgks+2rOl7deqqz
f+D8lasZb5g908DzLyR4G43xuoaefQc+mT4ok3h28uTJpqamtra2EydO9PT0
HDt2LE5mO/u1vzof6tvYgL4LF0qqaz75nFdUH21obusNnxseSbyR5tjo/Zu3
pNz35w9LQtPrQ83AWv9ffl0mMhuAFJHZEFP3wJA5NipTa28o0y3ymcvXJt6v
qC6uDracCV2dmFxeWcl0i2yU+O1qZ2/d6ujoeOmllySYvfbaaxLY9uzZc/Dg
wcrKyl27dpmntnVsdOb27UM1dfI2nWg/LVn63uJiEo2MOp9NH46/u9eZ2WbP
hKWy78sBMhuAVJDZENPq6mpn/0BxVY1MRxoa28P9mW6Rn4xNXW/tDRPVtrSt
zHb69Ok33nhDgtnu3bubmpoksB07duzEiRN79+41TyWe2ebuzEucjhPVEmyk
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
Ta30ODpckNm2AdZiwwFyjdfjbM7KmONspjIRhetcaSSZzSrt4X6ZzEMdKKDf
AeJjwwFyiheZTWLVxuOYMTObDp2Zypjns0muM2WZeVsZLw4ym1WWlpbL6upH
J6c2PqUXwaW/SYD92HCAnOLRdaMStMyxUU1ZMTObls2cMRdlLkF1MbDNkNns
MzV9U3qfe4uLpmZ0YrIz3FdZ38CZOcBm2HCA3GH//dk8QmazUPfAUGPX348M
zMzNSdezp+xw8dEKbu0ObIYNB8gRVmU255Cach4YdReZzULLKysVjS0jY+PO
Sm4zBcTHhgPkCKsyWzqR2ew0PTtbGqydX1gwNZHhEVPmV7CBmNhwgFxAZoNt
+i9crOvojKrkV7CB+NhwgKxHZoNtVldXq1vahoYvOyv5FWwgPjYcIOuR2WCh
uTvzh2rq5F9TE/Ur2GvrF8dlpnGArdhwgOxGZoOdhoYvV7e0ra6u6kPzK9id
4b5gc6v+EDYHeoAobDhAFiOzwVp1HZ39Fy5GVe4pOyz9TnlN7czcnPQ+nFMN
RGHDAbIVmQ3Wml9YKA3WTs/OSnllYWFx6npXU0tbXb0WGoMnZJJy/Gnp1q20
NVgbmcSUzkbevb84MXcriWl6/nbaGumLNWltI50bjr7dNZ0dFW0tWihvapDJ
qrfbF59JXzTS2s8k3EJmg7VWl5cjpWXt339x6Km/Cf2PLyc99X/lsUs/3Dm+
p1h2TV408kaw7srru849/Zy1jVxeWTk60P2j+iOPfPDWf939UtLTf/9/rz5b
uf/v2mulJ3K9kb5Yk75opLzd77Wd/ObBd/+3xW+3Lz6TvmikLz6TcAuZDXa6
NzZ+/vkdkb/+ztSRyrlw/9Ls7MriYnLT3Sujt5rbrry5W3ZKH1XV5Fojr9y6
8Y3D7wU+3F0aau8ZH5lZmF9cXkpuGrl5ve5C/yuNx6QPKj8bfVuJVPhiTfqi
kb54u2mkW3zxmYSLyGyw0Myp031fevRa8cHlu3eT3gVtnG6fHRz65rOXXnxF
vpnmSCMbLw3+0XuvvNvVcPf+YtI9zsYpNHHlqwd3PVd9YHllJUfWpC8a6Yu3
m0bm1IYDdzkzWyTHZHrdI7b7N6bli95Me6eLeyEzLd+5c/65F64fqcyFRl6/
Myvf65tHhlzsdMx0e3HhicNFpeH2XFiTvmikL95uGplTGw5cF2GcDZYZ/tGr
V3e948WOSKe7I5dlX3fv0z/OmJWN/O7x0teaK73od3S6eGNKurYrt25k/Zr0
RSN98XbTyJzacOA6Mhuscnf48tmHH0/lrIxEpmv7Sq68viu7G3nhxuTn9/40
lZNwEpne7jz5o/oj2b0mfdFIX7zdNDKnNhx4gcwGq0zX1g/vfM3THZFMsz29
555+LrsbWTl05nvBg572OzJ1XL3wyAdvZfea9EUjffF208ic2nDgBTIbrDL2
zp6Jkg+93hfdv3kr/D+/unr/fhY38hetwf/X1eR11zN993bBOz+SQhavSV80
0hdvN43MqQ0HXiCzwSoXX3hps7NqO9rbjx45YqZwb28qu6OBx55cnLre2t0T
PvfJJ+Ht0kM/f29vnLYVH62QGWQa/M4Oj079dbGR3ygv8ugk6qjpC/t/MTF3
y/U1ydudfW83jfTphrO2/iNo8v+W19TGaZ78LTKPNNLZ2s1+33ZbM8Mgs8Eq
F3/w4mxvX8y9h+x/Tnd0TIyP63RjaiqVfdHg15+qrayWvYTuMGVfpLsLsw/Z
yDwVp5HuTqk08umK97tGL223Hzl89Mh2X/LnB948eLLW9TXJ252GtzuJKZW3
2xefSV+syXRuOJrZNK1J0JJps+bpPPLnBJtbTRbd7M/Z1swwyGywSvx9keyC
JsfH20+dMtPZviQ7U9kXhdtPy+7C7DD1i542Q3ae+qXP7FGlrN+CZc50duJJ
N9KL/rHr+tjeyJmNXU9D6Izra5K3Ow1vd3JJI+m32xefSV+sybRtOH2Bb8r3
CG2eNENaaIbCpDGStaRG/gTnPlxzncwmT8lLzNBczPk3mxmbIbPBKlvui2T/
U15WFu7tNVPS/aN8fzQ7TLNjdH7Rixqr17K8pP9vvp+2TjzpRj7+wTvu9o/j
d2b/bcnP/rSmeGPXMzF3y/U1ydudhrc7uaSR9Nvti8+kL9Zk2jac/gfHRiVx
ScNkco6zRT1cW89gmrukkZpC5YWbzR9/ZsREZoNVEslssv9Znr87WfLhxP5S
na4frkixfzT7SfNFTwqyS5F9iO4nzUGBj4fxn/1unE58aW5u/tKwTlJ2PrUw
Ni6Vzod3r1z1qJGPHXzLxf5x/v7iH1Tt/Xcfvjm94R4IUV2PW2uStzsNb3fq
SSP7PpOJN3L+/r3zH12T6eqtj9K8JtO24YQf/Ua4/bQ0QAfHpGCaJ82QSmme
OR9Po9fGv8K03zl//JmxGTIbrBIns8ku6MbUlO6LZEfU9GufdU7jdQ2zt25F
TfOf7kPj9I96QqxMuleU/YYW5FmzD9EZZJ8T/2DZdFOrs2E9v/fHN1tO6VOh
z/+F1Hx0rNo8PP1bv5t4J76tRrp7HGrnmaZf3buz98a1Lbset9Ykb3ca3u7U
k0b2fSYTb6Sktbznv6zTP//bx/5s38+Hp6fSsybTueG01dWvOS5/MI0xhzhN
g3UGmfSP0rLJY875t5wZmyGzwSpbnjuk+yL5zhi1L+rZd6Cjo+P06dNdXV1t
bW29vb1NTU19fX2Lm/wSnzm31lhM+JL2RDrxC98rnD0TvranuPkzn+v6nd93
duKhP/nitjrx5BrpYv8YHD3/T997sfhCKE7X48Wa5O329O3+3bdelLAhwSOJ
zJa2Rqb/M7ndzPYH7/64Yqjnb2vL/tkLj35m55NTt2fTsCZ9seHAC2Q2WGXL
fdHZvr7N9kUvvfTSG2+8sXfv3meeeUZ2RA899FA4HF64cyfBfdHde/dOnu7q
HYpMz86m0kjtxEd+/DPTU7f/xm+bcs/v/XHLv/l1mSe5TjzxRrrVP47MTv/r
4te+dao68a7HrTXJ2+3p2+1WZsuyz+R2M9tfHtylD0tCp+ThXx3bk4Y16YsN
Z1tWV1dD5yIl1Sdk6h4YkocuLjybkNlglQSv0Yu5LwrHkvi+aG19d3Skvmnv
sarykw1xdkqJdOJDT35bClffeKv5M5+78vNfmk78zO9/PvLt74cf+kpynXji
jXSlf5y/v/ifjr7z24d3zy4uJN71uLUmebs9fbvdymxZ9plMOrPJ9M9eePS3
f/lCGtakLzacbZHAtr/quCxTpuKqYOfZwdSXmZXIbLBKgvui64crovdFH5S9
9tpru3fvLikp2bFjR0tLSyAQiLMv6n/sybaG5tbecNTU1HNGvujprkOmA9U1
xxpbTnZ2O+cJP/u9xE9wkp76TuSC6cSl15aH0rPPnglLRx+/E0+lkY8d2p16
//hkW+W/2v+TCzPxTrH+wr5fVHS0e7Emebu9eLu/WPzGv/3xUzL9k+8/LJHj
Mzuf1IcJnouVytvti89k4o3cmNl0TSb4d2X9hrOtaV/FcbO09dhWk+m+yFJk
Nlgl8Xthjdc1yHfGT6YPymS3c/Lkyaampra2thMnTvT09Bw7dizOvujs1/7q
fKjv4tXRqKnvwoWS6ppPdh0V1Ucbmtt6w+eGR5zzDDz/QiIHy+7fvCXlvj9/
WLpsvWDQjLT0/+XXZdqyE0+lkU+UvZti/7h7sOufvvdi5ZVzW2SA/b/oiAx5
sSZ5u714u1PMbKm83b74TCbeyI2Z7V+8+Phvvv6dBP+urN9wtjXtrwqS2RJB
ZoNVEs9ss7dudXR0vPTSS7LDkW+OsiPas2fPwYMHKysrd+3aZZ7a1pj/zO3b
h2rq3q+oPtF++vyVq/cWF5NoZNQJTvpw/N29zk589kxYKvu+HEjiYFmCjUzx
OFTDtWHpHH/YfXLLl8Q8xOPKmuTt9vTtdvHYaDZ9JpM+Nto5eikqwuX4hrMt
3QND5tjo/srjp0Lh1JeZlchssMq29kWnT59+4403ZIeze/du+eYoOyL5zihf
Hvfu3WueSnxfNHdnvuVMKJFdUOKd+MLY+NlHnjA3fHCe0RR+6CvNn/ncdjvx
xBuZSv/Yf2PyX+3/ySON5cl1PW6tSd5uT99utzJbln0mk8hs8/fv1V7o/+xP
vvUr3/1q38TVNKxJX2w427K6utrZP1BcVSOTBDauQdiMjzJbYWFhXl6eW0sj
s9lpW/uirq4u2e3IDqekpKStrU2+OcqOqKGhoayszDyV+L4o8b1EIp142+f+
Q8dv/o6eQzL4xLeW5+9GdeI623Y78cQbmXT/2HBt+Ff37vxC3cH5+4vJdT1u
rUnebk/fbj1Iuq1biqX4dvviM5nc/dlk+hcvPl4SOpWeNemLDQde8FFmy1vn
1tLIbHba1r5I9j/PPPOM7HB27Nghe6Fdu3bJ/kd2RK+++qp5altj/q40cmFs
3Nx4fLLkw9uDQ+apGzUnnbcin/rgcPw7k6fSyOT6x6feen1bnWPMrsetNcnb
nbg031M3nY1M82cy8UZO3739TmeDThVDPfIwbWvSFxsOvOBRZtMxMVFQUKA1
UigqKsrPz4+KXsFgMO+BUCi02QIDgQDjbLlgW/sivSGk7HBaWlp6eno23isy
I524i5Nbnfjho0dkennP2/9+x7d+90ff+fOfvfzXb/3ilfeL3i4t1qf+rmS/
9Iy/8cJTv/Kn//V/vb7zw8OHtT7OlP6uh7c7Dt9lNms/k75Yk77YcOAFLzKb
ZjMtS1STrKUFk8pMpQY2rZTyZplNFiiZTZ4ls2W9be2LzA0h5eNx7NixFO8V
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
c2/pXHjU/0sjaaTvGmk47y/q7Jqf//TvAUV1vpo6ZH7toJ1DgqWfvue8GX5J
MbPZ38gt6fvl/CuiwpLzjzV5Ms7bOndn/lBNnfzrrByd+PhvjH+jNjNiZqKv
8weh1hzjbCazRZ29tjHiapudJ7OtkdmsRGZDBumeRMsJjmnoDM6ZzXdD515I
Cs39QxvHNJLrxGkkjbSqkcbGoZ74Q1hrD37MMWpmfcq7cTb7G7klk7fNJ8Rk
tiTG2dTQ8OXqlrbV1VVT09rdI4Htl/uKy2tqtzy3TT9pUQNrJsJtNs6mYp7P
FvUJJLNZiMyGDNKdm/nqtxbr3CHTo208d2htfQ/54oGyi47fsIt57lDUwk3/
6OxPaSSN9EsjjS1PFXve8Ys/G08Vkybt2PeBCRV6opTzVDHzcv0zTSfuHHTK
jkYm+Ifo0F/UONvahs+GHtV1tm0zdR2d/RcuOmvC5yL17R0zc3Ob3WL35Qe/
ABXzfDbzAXv9wXmAUeezaSOjRt70W0lUvCSzWYjMBgCAi0yA39L8wkJpsHZ6
dtbURIZH9AiploPNrfprpJ40FH5DZgMAwEWJZzYxMjZe0diyvLIS81nJbHvK
DpsUhxxHZgMAIIMau3q6B4aiKvUWu5LZMtIk2InMBgBABt1bXCyrq5+avmlq
wuci5ha7oxOTlfUNMnGEFGQ2AAAya3RySmLb0tLyJw8nJjWhBZtb3y49pKe0
JXjTXWQxMhsAABnXHu6XyVnT2t0jOU3H3PRQaabaBkuQ2QAAyLilpeWyuvrR
ySlTYwbWpBAZHuHYKMhsAADYYGr6psS2e4uLUl68f797YPBQ1XEJbOU1tZlu
GqxAZgMAwBLdA0ONXR//3qjkt4tXR0cnJrf8QQTkDjIbAACWWF5ZqWhsGRkb
Hxq+rOHN0J9IyFTDYAMyGwAAGbe6uqrXjU7PzpYGa1vOhIqrg/prpJHhkcr6
huKjFWS2HEdmAwDABhevjlY0ttR3dp84dbq4qmbvsaqJGzf0qZm5OclsweZW
7viRy3yR2fIcgsGgK8skswEAbHNrbu5oQ7OkNZ16Bs+Zp7gSAX7JbK4vk8wG
ALDQ0tJya29YM1t5XUPMecLnIoeqju8pO8wNQHKKR5mtsLBQh8UKCgq0RgpF
RUX5+flab+YMBoNmDC0UCm1clFTKq1xsmyKzAQCsdfHq6L7K4xLb5u7MO+sl
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
    "], {{0, 378.75}, {621., 0}}, {0, 255},
    ColorFunction->RGBColor,
    ImageResolution->{96., 96.},
    RasterInterpolation->"High"],
   BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSize->Automatic,
  ImageSizeRaw->{621., 378.75},
  PlotRange->{{0, 621.}, {0, 378.75}}]], "Output",
 CellLabel->"Out[21]=",ExpressionUUID->"c7cfe487-a875-5a45-afbc-9f7fbee641ec"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Change the network Depth", "Subsubsection",ExpressionUUID->"337973c5-99be-b949-a53e-0cd4b92a5f12"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Grid", "@", 
  RowBox[{"Partition", "[", 
   RowBox[{
    RowBox[{"Table", "[", 
     RowBox[{
      RowBox[{"Show", "[", 
       RowBox[{
        RowBox[{"netIm", "@", 
         RowBox[{"MakeUnet", "[", 
          RowBox[{"chanIn", ",", "featOut", ",", 
           RowBox[{"{", 
            RowBox[{"128", ",", "128", ",", "128"}], "}"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"NetworkDepth", "->", "i"}]}], "\[IndentingNewLine]", 
          "]"}]}], ",", 
        RowBox[{"ImageSize", "->", "400"}], ",", 
        RowBox[{"AspectRatio", "->", "0.5"}]}], "]"}], ",", 
      RowBox[{"{", 
       RowBox[{"i", ",", "2", ",", "7"}], "}"}]}], "]"}], ",", "3"}], 
   "]"}]}]], "Input",
 CellLabel->"In[77]:=",ExpressionUUID->"e33d48b0-7975-2747-9aa5-4c9d7d97e767"],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1: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
ezCi1U6aW/FVIW7WMMEo7UwMhd1mwvRJX7iipGJjEb0j/W/4vup3P+y+qG5Z
dQvBKNXd4XlWzvBh9w2vUOUQZWsiSsQ+VXjDhfSRkbZvSP8bbV+DBSPVkdCt
ySEYZfYq/ApLiyzbRfl+jriv+t0T2VcPDK5u6XvZSMHYlZ4dktgZ7haRvcXE
f6VtXGI0kMK+xtdaHEj1IPcNyWSv2EAq6kVTnvjvi32bnyST782xFoaNjJAZ
qHD9rmCgFF4o0fZVv3si+1qfJBOMdNPezLqfX/FI1n0j7mSpKQtXSawNpfva
rn6lIamiyLKeLP7KYzl5wNrE86Gd6c9DUlXua5hzPnQwXoxfOnxqqfUWMlZ6
KURZFKZqMUwwcisrd16Lz9JpAURZ+INQbbKN0w/GvknftuH7qt/9sPsadiXt
Ut0sGDlklFN4nmNm+FD7RqxQKw+sjoa0tYo/RLw+4oLws8PjC8RoqWj7GhyS
Ks1DcghG6X0ou0WjXfaI97OsvhSqTM3uieyrEwaHpErfy0aGpGZ+9pXUzghl
JBUIQhJyo71wJ/hztH2jGUCrDcqWCsaI96HYQLxkRSxuxHf948rqZPK9O46f
MtIxlhoo2TsiWgWpeaFE21fl7onsawuSTDDSTXszc78pTKZ0hCSUmjKZSuKg
Yum+svq1rCnTg709fzAYjLmZ0iwo62tUv0tjnsLMe7ODkYedcnI3tzoysn2T
M4H5xcDqWrR3VrgWs0Um9WPH8FXjUd1aZRJoRcSnQGmatWUvpaaKUkr790OU
zba9i3QDuFva9m8ASpG2OfQsqWvLdGp3R2tZbva2dy5qDjd9jUWOppKyv516
0xdxMwPGMGqL8fbKAEysbqVJbw4Mndcz+DDjLv1VMHR9j1vKMnO2p2aVDd1i
VZ1ZVzjJoLcDvSNCyr739habqYbS4pbK8sDmRrTq880tkJkaae/crz7vUriB
0vsUnLizxuxLmyhJaaC0BTdt0uDb3n7c5cx0lNPfza2tBI9GZq3Z2dPU1T09
v6DgAKtZVuNJS8vDgoK56f0Z2AY/+azrp7/gRJ/pl/GRkezs7L5nz5QPEtE5
t0Um9WNlfb2ypdU5MLi2sWnMGVHdWmXysJCPUdPWca+k7NGTNvY3kgwqVPfg
UP6jGkqd7gH1ZYz4FMScl3tlcZGq2NnZ6d/eXn3qFDcAJfq6ubZWXVVVXFRE
/1U4CL3anP/xy9Ze19zikjh1zHUW6Jh05LraWt/avn8uPfXMvaxdn6+zo4Py
RjlULoLtBCPVaV1Hp+xy2R3Dqrv3zV89rq4bn5n1BwJ8ajXLarQ0N9PZlxYW
Ihq6kaEhOrVnUElRBg5mSW24lTowNr69sxPfVSJL2NXvznRUUGp/1pd8TWqH
Ml/u0bHq1vZBZ3dMM7UwO5uZmenq7aW7yFteJb15yPisr6xUVVaWlZZGM1Nq
VihI8BScksP3TkoDpS1qltVIvps2Kc0X6cS0YsedwpK0QkfD067ED0iXpbat
gw6YU14Z7SFS45zTi5JelxkZGY8bG1v+9d/q/u7vOdHn2poaqve2J0+UazYQ
XYvZIpP6Qd4yFZyK72h47Br2JN5QoIzpV9IW1a0mk4eFvBFSi/tPd7GjMxkj
HFgOUwEp3S0urWg+xELh4U+BmoWcyFvOzc0ld7orPUvcAJTaUu/S7yXFxd65
6L1Cz19tpNpKG5vo1HmV1Z197sXVVTUL89GR6bx0lq6nT6Wnbj/3u6LCwry8
PMpbzPzbTjCGDlwyvlz3K6qSwzEzsrrbGvYvXWZpBbdHqRGMZOjYoJFylBq6
5n/9N/Kp6HeSqzFPTYZuIK8wrchBiZTO8MTkYdusyN26V1LKT3d6SRlVvU7V
YRaHNV9kpjIzstWYqYG+PjZHnSl/fMlMlThycnLIK172ehUMlN6n4JQcgjEk
MVDCnpudI2uhch1Gu9y0PW/+So0pS0rzleko5xIZmco+/4PKRdJdvb1Uv4/+
4Z9EzVb94z/Tu2xhdlbN7sPfXqNzJXEmbZFscSVtkclEUt6jarONjfYId0uT
pHLl39XFRXrjPPjyD9I3TnnK1b5nz2I2FwQOXm1P33hbdurWM79Rs5L73tZW
bXV1Tna29NSP3vxl25MnW+vrajLv/I9fks9prkFAMrG6yfjEFIx/27ezM/f+
/ZcM3f/1L/V1dTF9KmHoCr+9puFFSy8pN9veaEwc5kulYAwchEOQmSp875z0
5ilLuxvTTKlfAz3uU/zNkHZ2h1tCpORLuGnvJIv52u9hLNzvYbxT5Khtf5r4
AUVHyb3i0mjtimp6c3Y2Nx83NmZkZNAbqvlffipqtuunv1BzV3CK2Ztj5Uzq
h+hbMabF3vQraYvqVpPJw5L/qEbYq2wLz9IcNxVNLWlFDi5gWnFpeVOL+n3D
nwI1b5yJ0dGCBw8otafelb5xluoaVd4A0h7GdEdZw9Ou8ZnZQRVdTuSoV5SX
Z2dnt7e2Sk89clFpfhJZsmMPo3g0xOUSAZY2RU0Po1bVzT2M9JhUND8ZGBuf
TM+OKRiFoWtsaEjE0HEPI529qLYhjkEQmY6K5PO4pBzWfKnvYRzzePLz8ooK
C9supUhvns1hjxoDpfcpOCVfD2PSGChtUdnDaJebtufkaTVReUlpvqjgdIdn
OMpJLa5v+hI8Gr3Z6Wgx3V01zjm9Jckrm56YCEQaRqH+nRVxvJj1M6kf5CcX
1zcaGdmF6tYqk4el0z1wt7iUvZGOZ/1aHdY67OzuUrlIC1OiD77tbZU7RnwK
Yr5x1paX2YEnjzp8DKPKG2B/DOOJX8r8CjWD2kqKi6sqKykPgbBBbepvP9sJ
Rno0GjudSeaGGVbdPSd/VVX2SDqQUE1IKg/Wnp2aSsTQjV75vvpPf0lksHz7
sz4R03WvuLSpy6ldDViCQ5mvPs8oSX53pzOmmVr2ejMzM52dnbs+X/hYLTUG
Su9TcEoOwUjv68qW1iQzUNqiRjAm302b9OYrceitpMbdjemcc82Oj4yofz1F
TBGdc1tkUj8SbxY4LKhurTJ5WOiY5U0t90rK6K96MXUUiPgUxHzj1NXWPqqo
SPAGOPQsqQep79mz3NxcngIlkWQ7wUhOdfK5YYZV97NDzZJ6kHhqCG4WSySN
JjxLajAYbO15ll5SToncreSYNSI+qOws+dX43lWVlZQSMVB6n4JTcghGerEm
n4HSlqN508J8aUVM57y9tTVxxyyQmBazRSZtgS2upC0yCXRF+Y2zvrKSkZHB
c+QmkuITjEWFhb3dsUe9xUy2E4xJiYnVHVMwtjQ3V1dVaWLosKyG5sT0vZcW
FhI0UzF978RPwSk5BCOICW5akAgKznmwITf07XGREqxcnRSEdTJpC2xxJW2R
SaArCm8c6Q1A90MiN8BhBWMw68KLU2ddSPD2g2C0AiZWt4Jg1NzQQTBqjpLv
7Z1+yUx11cRtoPQ+BSf43kcE3LQgEWzhnNsik7bAFlfSFpkEugLBCIwBghHE
B3xvYDtw04JEsIVzbotM2gJbXElbZBLoCgQjMAYIRhAf8L2B7cBNCxLBFs65
LTJpC2xxJW2RSaArEIzAGCAYQXzA9wa2AzctSAQl59zTQ68tkRKp2YB+CsIy
mbQFtriStsgk0BUFwSi9Aeh+SOQGOLRg7Kp5cerEXnYBCEZrYGJ1KwlGrQ0d
BKPmKPnea8svVd/UUNwGSu9TcILvfUTATQsSYam2YfjLSwm+j9SkkctX54tK
kziTtsAWV9IWmQS60vPaSd9YoqsJxEzrff19pz+QnXrkYoq3VIM5eGOm7mMn
9paXTbm8QGBidZPxGU25bsCpyZwuNzSZdYWTlaDf7/z5cfXLxsWR/D6f3qfg
tNraHm4JQfKBmxYkwtbYRO/xU3rXLKX+M7/ZcMW5XrktMmkLbHElbZFJoCvD
//XVcv1jvW+A+ULHyKUrslPP5jyY+POPep96c8hDN7kp1xZIMbG6yfiQCdL7
1JTo1GRUTbm8yc3gJ58tNzbrWneDH/9e71NQmst7OHblhtmXExhB/4ef4qa1
EVcKHE2ugfj2vV1erW1miO5jJ7ZnZnWt2b3V1f1O6q2t5M6kLbDFlbRFJqVk
1TV9+GMGJ0dbZ7TNVD6/Q9OzdEBNMqY5lLG486befE2lpk/eTtP1BqA0du3P
8wXFslOvtj0deP+3ep96sbLGc+FyfJcRaIiJ1U3Gh0wQGSJdT02GlMyp8kUg
h0SYL4WHVP3zq4ejoglknOPOW/iOU7fTZjITDRhWTpM3/zqdcV/v+9NzMQXB
NkcEumn1vqMMvmnJXxLmi+RVtILb1HzFLRgTsXUKjFxMUV4nXYP753ba8Odf
J30mbYEtrqQtMikgASU1U19m5kfUjOqf30REmd7EnTcyegrGXMame7DntZO6
NhpsTU7tB756RmWnJje+9/ipleZW/U7t9/nc7360UFIex2UE2mJudZMJ0rth
ZOKH2+Hd6FJYLYqvZKMimin1z69OjoomJJI36VViyEzRzbOz4NWv+ryPanpe
PaHrKTbcg93HTmA89RGBbtru199MmpuW1SL95dLJnDEp4c9vROhQ5MJpdrkT
hgUjm19pmx4bav6F8izNNm0pRLTmnuSud5EcJ/3emKud3YmbI1tk0hbY4kra
IpMCmXmhR5Uf2GjPL30VT3roZU+MdhFbKvRUmogQjJRVSpRPLib9KArFDWJc
Fv4XlYU3Vu+tTd5KHfo00akpFdLg7z6fSk2PeOqVpie9b7yj3/tuOj174MNP
g36/NlUCEsPE6iYTRIYu2qw7mhg6Oj6ZU4Xi0yMpa8HmJzra8ytzVEIST4wP
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
    "], {{0, 342.}, {908.25, 0}}, {0, 255},
    ColorFunction->RGBColor,
    ImageResolution->{96., 96.},
    RasterInterpolation->"High"],
   BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSize->Automatic,
  ImageSizeRaw->{908.25, 342.},
  PlotRange->{{0, 908.25}, {0, 342.}}]], "Output",
 CellLabel->"Out[77]=",ExpressionUUID->"c7b7c3dc-0d03-364b-8cd3-9352e891c015"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Debugging", "Subsubsection",ExpressionUUID->"bf7ca46a-5830-ef47-b38f-a97d5a83dc51"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"net", "=", 
   RowBox[{"MakeUnet", "[", 
    RowBox[{"chanIn", ",", "featOut", ",", "patch", ",", 
     RowBox[{"MonitorCalc", "->", "True"}]}], "]"}]}], ";"}]], "Input",
 CellLabel->"In[93]:=",ExpressionUUID->"7b6e5902-4562-934c-816e-f2b01388d67d"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  TagBox["\<\"Network block type: \"\>",
   "EchoLabel"], "  ", 
  RowBox[{"{", 
   RowBox[{"\<\"UNet\"\>", ",", "\<\"ResNet\"\>", ",", "\<\"GELU\"\>"}], 
   "}"}]}]], "Echo",ExpressionUUID->"9e9a7496-c0e3-1d49-b709-38c30727366b"],

Cell[BoxData[
 RowBox[{
  TagBox["\<\"Network dimension order: \"\>",
   "EchoLabel"], "  ", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"32", ",", "112", ",", "112"}], "}"}], ",", "3"}], 
   "}"}]}]], "Echo",ExpressionUUID->"d9aea0c5-d5cd-b84a-ab97-cccb5c2b9a15"],

Cell[BoxData[
 RowBox[{
  TagBox["\<\"Network scaling shedual: \"\>",
   "EchoLabel"], "  ", 
  RowBox[{"{", 
   RowBox[{"2", ",", "2", ",", "2", ",", "2", ",", "2"}], "}"}]}]], "Echo",Exp\
ressionUUID->"b7da5b1c-bee7-6341-bffd-0ccca27802d6"],

Cell[BoxData[
 RowBox[{
  TagBox["\<\"Network setting shedual: \"\>",
   "EchoLabel"], "  ", 
  RowBox[{"{", 
   RowBox[{"2", ",", "2", ",", "2", ",", "2", ",", "2"}], "}"}]}]], "Echo",Exp\
ressionUUID->"7bddc067-0e0a-5245-a24d-56b49fda2553"],

Cell[BoxData[
 RowBox[{
  TagBox["\<\"Network feature shedual: \"\>",
   "EchoLabel"], "  ", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"32", ",", "16"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"64", ",", "32"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"128", ",", "64"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"256", ",", "128"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"512", ",", "256"}], "}"}]}], "}"}]}]], "Echo",ExpressionUUID->\
"6fc6f7d1-d595-dd4e-9a83-839748525f0d"],

Cell[BoxData[
 RowBox[{
  TagBox["\<\"Network discription: \"\>",
   "EchoLabel"], "  ", 
  TagBox[GridBox[{
     {
      StyleBox["\<\"Number of batch norm. Layers: \"\>",
       StripOnInput->False,
       FontWeight->Bold], 
      StyleBox["28",
       StripOnInput->False,
       FontWeight->Bold]},
     {
      StyleBox["\<\" - Number of Weights: \"\>",
       StripOnInput->False,
       FontWeight->Bold], "\<\"14.78 K\"\>"},
     {
      StyleBox["\<\"Number of convolution Layers: \"\>",
       StripOnInput->False,
       FontWeight->Bold], 
      StyleBox["37",
       StripOnInput->False,
       FontWeight->Bold]},
     {
      StyleBox["\<\" - Number of Kernels: \"\>",
       StripOnInput->False,
       FontWeight->Bold], "\<\"1.00 M\"\>"},
     {
      StyleBox["\<\" - Number of Weighths: \"\>",
       StripOnInput->False,
       FontWeight->Bold], "\<\"13.03 M\"\>"},
     {"\<\"\"\>", ""},
     {
      StyleBox["\<\"Convolution Kernel Distribution:\"\>",
       StripOnInput->False,
       FontWeight->Bold], "\[SpanFromLeft]"},
     {
      ItemBox[
       TagBox[GridBox[{
          {
           StyleBox["\<\"Count\"\>",
            StripOnInput->False,
            FontWeight->Bold], 
           StyleBox["\<\"Size\"\>",
            StripOnInput->False,
            FontWeight->Bold], 
           StyleBox["\<\"Kernels\"\>",
            StripOnInput->False,
            FontWeight->Bold], 
           StyleBox["\<\"Weights\"\>",
            StripOnInput->False,
            FontWeight->Bold]},
          {"8", 
           RowBox[{"{", 
            RowBox[{"2", ",", "2", ",", "2"}], 
            "}"}], "\<\"261.12 K\"\>", "\<\"2.09 M\"\>"},
          {"11", 
           RowBox[{"{", 
            RowBox[{"1", ",", "1", ",", "1"}], 
            "}"}], "\<\"349.33 K\"\>", "\<\"349.33 K\"\>"},
          {"18", 
           RowBox[{"{", 
            RowBox[{"3", ",", "3", ",", "3"}], 
            "}"}], "\<\"392.45 K\"\>", "\<\"10.60 M\"\>"}
         },
         AutoDelete->False,
         GridBoxAlignment->{"Columns" -> {{Right}}},
         GridBoxItemSize->{
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
         GridBoxSpacings->{"Columns" -> {{1.5}}, "Rows" -> {{1}}}],
        "Grid"],
       Alignment->Right,
       StripOnInput->False], "\[SpanFromLeft]"},
     {"\<\"\"\>", ""},
     {
      StyleBox["\<\"Total Weight Memory\"\>",
       StripOnInput->False,
       FontWeight->Bold], "\<\"52.22 MB\"\>"},
     {
      StyleBox["\<\"Total Network Memory\"\>",
       StripOnInput->False,
       FontWeight->Bold], "\<\"1.74 GB\"\>"}
    },
    AutoDelete->False,
    GridBoxAlignment->{"Columns" -> {Left, Right}},
    GridBoxBackground->{"Columns" -> {{
         GrayLevel[0.95]}}},
    GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
    GridBoxSpacings->{"Columns" -> {{1}}, "Rows" -> {{1}}}],
   "Grid"]}]], "Echo",ExpressionUUID->"7f278104-11e3-b046-921a-04a99dd822d3"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"QMRITools`SegmentationTools`$debugUnet", "=", "True"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"MakeUnet", "[", 
   RowBox[{"chanIn", ",", "featOut", ",", "patch", ",", 
    RowBox[{"MonitorCalc", "->", "False"}]}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"QMRITools`SegmentationTools`$debugUnet", "=", "False"}], 
  ";"}]}], "Input",
 CellLabel->"In[94]:=",ExpressionUUID->"887f8edf-29ea-044a-aad0-c2ff16e09888"],

Cell[CellGroupData[{

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRIz
UBAkoQTEIPb/UTBiQGdnJzDGMzMzaWdFJhgALcK0xd3dnQEMgLIQEQgbInj4
8GGI4N27dxlgAC6IFWDaAhRZvnw53DqIdqA5QDaQAZSCMCCCcJX4AaYtcI9A
AMQcIAPociADaCnEFjiDbFswvU91W4BcTO2YtkAE8UcHHlv+owYaxHCstgDZ
BGMfnmaQw58SoKyszIAKIA4bBZQDAHjjq0E=
    "], {{0, 12.}, {25.5, 0}}, {0, 255},
    ColorFunction->RGBColor,
    ImageResolution->{96., 96.},
    RasterInterpolation->"High"],
   BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSize->Automatic,
  ImageSizeRaw->{25.5, 12.},
  PlotRange->{{0, 25.5}, {0, 12.}}]], "Print",
 CellLabel->
  "During evaluation of \
In[94]:=",ExpressionUUID->"e54d83a6-bd1f-8348-881c-578786cc9550"],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1:eJztnVFu1DAQhit44ZEroL0E4o2nilcQB2hFQftSpIKEOMKepAfZS/DSs5hh
R4yGmbEzsbMFkv+TWm28iWMnf8ax/W/y4vrz249PLi4uvjyjf2+vvr2+u7v6
/u45Lby//bL/dHvz4c3t15tPN3cvr59S4iv6+0F/vz4XAP4xSJb7/V4WD4eD
SZlkt9tdnDgejzoTWQSgzfGELO5PkIryOjyc4KxMpL2/v1+wqGDFGB0ys3Qo
PDw8QIegjwV1SKq7vLw0KUOFA5uBpEJxzCR26JCDocmK22sA2lAkpC6GT5+r
Qxahj6sUHiFFkCHTLrPMasqsibCgXQZpjA55vEUQIe1OhDmQPvUmOgBChyBJ
GA89PJ4zN3PoECRpt7mygukIT4JxbAAAAAAAAAAA/zumv0xdYzN4OLl5bfyw
D/S1N4gfxxZN+vniBqTeZZWDscdNYXS42+14kc2E+eBmdMgzyxwheexRu3FI
6iIzCaRGxtDhpjA6ZAMhaYBFmJ9D8TqUeUCOq6EOKUVCLryLW8b4vvi2kCU0
qEMjpFCH5t5SlwRGne3gfV+0GLaek3TrsJEhpLgdfD+Fz772tU7OQZeEDkXz
fOfJ31JKTWxolzeF99v4H9+Vpu+LmdShzpm05/spJn/ocFOc1fc1AnS4Kc7k
+xoB49gAAAAAAAAAAAAATJ//UH62nJ99Y/vELHNjAwzvrIk+/yFtIiOKSTHw
dF7e0JgEw93rYNx/KJu0CWf6eJBcTyPSOnQh8Aygno/Wu9P5QIfrYNB/6J95
WCOUq8hPxMa7FneifODVaHeYhl4lg/5DE53aaxod6sadV6jZZTlIFmUHEuAN
WwGD/sOGa8sTOsGSOuRvy5/+bckWUlwBGf9h+d1cmjtJI4C2ZYJzMImyCwnC
NR3yZ2+3QLu8DpL+QzNIokdgtBunbVPUD7Vj/fBtof5RQE2H2j2rgQ7XQdJ/
mAQ2RdBHxvOfzwc2RQAAAAAAAAAAqyHsL+tEP+6XhDvRMtzddkT4ObtJMkOd
ecxxCF1qMuDZ/jW3Jnx/q2Tu3/Q6XvISnTKx85nxXj0/ZabvMw6WmpcvrEuj
guH4YW2S5ejeKNrGDOYsq8N2qeaOKzbGUfXZkROXHCkN398qk0ch4yXn021W
qz3ZYFCHtW2ZsC5h4iwdFjUTpy1bUhd9GRYVD+UpImLu0lFFZ+XjW+YInFWH
Zh6cmftqYL2yOfuG8ZKH+jm3DsOjdCYd6gtZPkjh/RUhk9RcQq6XLBZlpCld
7bJkMj7vHB4H8Zx72YSntYbWIR8lyXl8ptKUXK5KuYXw7bIUZhEdNo5SXofh
+0ZNoolyJYpgUnJdHjkmVFSuI9WrNjfdp8PwPadlvh8sPA61XVDms2aOjA5F
G2EkHyy5yVM/avLc7bI/EWFdfKL3fYWJohC+kH2BDaJGfW2yy5p1GLZoHTps
vGJylh8sPA4mN9kLZZvvpMgmJh7KV76NHi+5PiaPpsMSPZs6rEuY2NFP4ZKH
bYreF1+nOlRyvY6VH6r4INP9ntPigv/kNHq7nyK1CEU4mbm5P5TzFapovOR8
ycvnvA5L5JDPlKHMuUtfpJ9C1ZGQaNrWozJxcYoum3Yw6qZZXxq+n9L3ntOw
sm1PWq3Xqe86Sv0BtrXMw/e3hl28BUte/jw47XEbSeTTqk+izjZTQf/tsjr8
i3QbyXxl21kNVnlBw9sjlzzJgi+cDRPDkLuUGWyEbiOZHyzNZNVd5QUNb49c
8iQLvnAWVj3wb/ITbbP1eQ==
    "], {{0, 43.5}, {162., 0}}, {0, 255},
    ColorFunction->RGBColor,
    ImageResolution->{96., 96.},
    RasterInterpolation->"High"],
   BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSize->Automatic,
  ImageSizeRaw->{162., 43.5},
  PlotRange->{{0, 162.}, {0, 43.5}}]], "Print",
 CellLabel->
  "During evaluation of \
In[94]:=",ExpressionUUID->"77ed42ba-5d5b-cd4c-aad2-3db3fbede25a"],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1: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
    "], {{0, 33.75}, {230.25, 0}}, {0, 255},
    ColorFunction->RGBColor,
    ImageResolution->{96., 96.},
    RasterInterpolation->"High"],
   BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSize->Automatic,
  ImageSizeRaw->{230.25, 33.75},
  PlotRange->{{0, 230.25}, {0, 33.75}}]], "Print",
 CellLabel->
  "During evaluation of \
In[94]:=",ExpressionUUID->"5aa1a796-a2cd-b243-82a1-06303054dc2e"],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRIz
UBAkoQTEIPb/UTBigLKyMgMYHD58mEZWdIIBkAG0Ai11ubu7Q2yHKAACCBvN
SXfv3mWAAYLuhChGtn358uVw6yDagQqAbCADKAVhQAThKgkCZI3IHoEAiDlA
BtAxEI9DFMMZxACIRyAmoLkfGVBiC8QKNDMzMzMxtWPaAhEkMjqwKkMONIjh
WG2BJBv8sQ90M3L4w5MT2QCeL9BcOAooBwAsmaTD
    "], {{0, 12.}, {25.5, 0}}, {0, 255},
    ColorFunction->RGBColor,
    ImageResolution->{96., 96.},
    RasterInterpolation->"High"],
   BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSize->Automatic,
  ImageSizeRaw->{25.5, 12.},
  PlotRange->{{0, 25.5}, {0, 12.}}]], "Print",
 CellLabel->
  "During evaluation of \
In[94]:=",ExpressionUUID->"deae6f11-ea12-8a4c-bb0a-9b14f6870d4a"],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1:eJztnUFu2zAQRY1202WvUPgSRXddGd2m6AESNA28SYGkQNEj5CQ5iC/RTc7C
Tj3IYDIzpEaUnKbSf0ACm5FpkvoaSsMf6d3F97Nvrzabze0b+nV2/vPjzc35
r89v6c2X69v91fXl10/XPy6vLm/eX7ymwg/085t+/r4uALwwSJb7/V7e3t3d
mZJBttvt5sjhcNCVyFsA2hyOyNv9EVJRXod3R7gqE2nv7+9nbCpYMEaHzCgd
Cg8PD9Ah6GNGHZLqdrudKZnUOLAaSCoUx0xhhw45GJqqeL4GoA1FQrrE8OVj
dcgi9HGVwiOkCDJk5mWWWU2ZNREWzMsgjdEh51sEEdL2SFgD6VN/RAdA6BAk
CeOhh/M5YyuHDkGS9pwrG5gL4UGQxwYAAAAAAAAA8L9jrpfp0tgkDwc/Xssf
9oFr7RXi89iiSb9e3IDUO69ykHtcFUaH2+2W37KZMB/cjA55ZZkjJOcetRuH
pC4yk0BqZAwdrgqjQzYQkgZYhPk1FK9DWQfkuBrqkEok5MK7uGaM74tPC1lC
E3VohBTq0Jxb6pbAqLMevO+L3oaz5yDdOmxUCCmuB3+dwntf+1oH16BLQoei
eT7z5L9SSU1smJdXhffb+H++K03fFzOoQ10zac9fp5j6ocNVcVLf1xSgw1Vx
It/XFJDHBgAAAAAAAAAAAGD6/Ifyb8v51Te2T4wyNzZAemdJ9PkP6SOSUUyK
gZfz8obGJEh3L4Pp/kP5SJtwpY+T5HoZkbahA4FXAPV6tP46XQ90uAwm+g/9
PQ9rhHIV+YnY+KvFnSgveDP6OixDL5KJ/kMTndpbGh3qyZ03qNllOUgWZQcS
4A1bABP9hw3Xlid0giV1yH8tT/3bUi2kuAAy/sPyOF2aM0kjgLZlgmswhfIV
EoRrOuTX3m6BeXkZJP2HJkmiMzDajdO2Keqb2rF++LRQ/1NATYfaPauBDpdB
0n+YBDZF0EfG85+vBzZFAAAAAAAAAACLIbxe1oU+75eEL6Il3d12RPg1u0Ey
qc48tXFgdCF73jLeodDqJllTk2udseV+l4mdz+R7dS/M8n3GwVLz8oV9aXQw
zB/WFlkO7omibUwyZ14dtls1Nq8YjkM4aJxpH+th07tY9n6Ybp3ect7dZrPa
nQ0m6rD2WSbsS1g4SodFrcRpy5b0RR+GRcVDuYuImLt0QNBV+fiWGYFT6LB2
XPB3jdWhWUyXrziFDkP9nFqHYQdPpENZBS6PxgPdeH9EyCI1t5D7JW+LMtKU
rnlZKpm+7uzHwd/CsTy9Q1RSh2Jc99uH2pjYcjkqZfb387KM+Sw6bHQwr8Pw
eaOm0ES5EkUwabluj4wJNZX7SP2qrU336TB8zmkZ7wfz47A7Iq9pA+NCHzsv
b9yN9cLlp4ktN7ODvtXkqedlPyZhX3yh932FhaIQKudDKTwZ0O3nJuljk13W
rMNwGbFDh41HTI7yg4XjoO8cxW0zTxLcjLwZuKmwNoDTW67H5Nl0WKJ7U4d9
CQs7rlO45ZvmtTP3Wh+bbMXhmmsRzMSH7uecFhf8B5fR/Tjo48XvER/222v0
eigaIpyl5XzIy+u8DkvkkO/oYK0vjcKx1ynUHQmJZm49KBMXl+i2aQejnpr1
oeGvU/qecxp2tu1JC8dBzqn88WsOpVrl/pSmNO+CO1fL9eC08zZSyLtV70Rd
7agONvpSK8zo8B/SbSTznW1XNbHLMxrenrnlSWZ84GxYGIbcucxgU+g2kvlk
aaaq7i7PaHh75pYnmfGBs7DqgZfJH1eZ6eg=
    "], {{0, 43.5}, {162., 0}}, {0, 255},
    ColorFunction->RGBColor,
    ImageResolution->{96., 96.},
    RasterInterpolation->"High"],
   BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSize->Automatic,
  ImageSizeRaw->{162., 43.5},
  PlotRange->{{0, 162.}, {0, 43.5}}]], "Print",
 CellLabel->
  "During evaluation of \
In[94]:=",ExpressionUUID->"d49e4e6f-3a66-cb42-bd55-b6af3f23b322"],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1: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
    "], {{0, 33.75}, {230.25, 0}}, {0, 255},
    ColorFunction->RGBColor,
    ImageResolution->{96., 96.},
    RasterInterpolation->"High"],
   BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSize->Automatic,
  ImageSizeRaw->{230.25, 33.75},
  PlotRange->{{0, 230.25}, {0, 33.75}}]], "Print",
 CellLabel->
  "During evaluation of \
In[94]:=",ExpressionUUID->"a4167942-0a4b-334b-9eb4-4da55915056c"],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRIz
UBAkoQTEIPb/UTAywPLlyxlgAMimtXV3795VVlZGFnF3d4fY3tnZCRGBsCGC
hw8fhmuEuxMuiAsAFQCNhXOBpsG9BhSHaAeaA1EDlIIrJjIQMjMzIS4BugrT
I8iBCVcDdxKa2wgCiMfhFsHdjwwotwXNZKAHMbVj2gIRJBgdaH5BsxQeYhDD
sdoCZBOMfXiaoVbxBUyoDKgAObpHASUAAJ+LqLw=
    "], {{0, 12.}, {25.5, 0}}, {0, 255},
    ColorFunction->RGBColor,
    ImageResolution->{96., 96.},
    RasterInterpolation->"High"],
   BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSize->Automatic,
  ImageSizeRaw->{25.5, 12.},
  PlotRange->{{0, 25.5}, {0, 12.}}]], "Print",
 CellLabel->
  "During evaluation of \
In[94]:=",ExpressionUUID->"4841c4d8-1120-2b45-a974-a91ffd37a96e"],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1:eJztnUFu3DgQRRuZzSznCkFfIshuVsZsPZgDxIgn6I0DOAMEOUKfxAfpcxg5
ClPpggvlqiJVItmOp/s/wEGLkShS+iLF4pf09ubz9b9vNpvNl9/pn+sPX/+8
v//w7e8/aOGfuy+7T3e3H/+6++/20+39u5vfKPE9/X2nv5+/CwD/B0iru91O
Fvf7vUlZZLvdbo4cDgediSwC0MHhiCzujpC08uLcH+GsTJv88PAwsajg0jDi
ZFaJU3h8fIQ4wUQmipOkeHV1ZVKGCgcuG9IPtXgmsUOc3GyarLi7B6ADajNp
LOPT14qTlelbYGpIoU/QTaZbZ+3V5FpTZkG3DsYw4uQQkCDq2h4JcyDR6k10
UwlxghHCltPDIaa1mUOcYIR2ly0rmGH4IgjCAwAAAAAAAAAAI5jROg3MTZBz
cfNanLMPjPQB44PwIlQ/V96AJD1XToiRAiPO7XbLi2zOzDeDRpw8q85tKcdI
tWeJ9C/akybXaBviBEacbMgkYbAy87NCXpwy3cktcChOSpHGGV5QYDCWOb7V
ZF0NitOoKxSnuV/VJYGd6cLxljlaDDvfRbrF2cgQ+rxw/ICIJaHNw4vz7yUh
TrkQ+G6W/5dSagpEtw68K8k/SlmaljlmUZw6ZxKkHxCZ/CFOcFLL3AgQJziR
ZW4EBOEBAAAAAAAAAAAAXi19fk55XD0/ych+klVm0QaIOJ09fX5O2kQin0mF
8Kxl3iCaBLH6M2bczymbtAknNDnCr2dLaR26OniiU8/F693pfCDOM2bQz+nf
yVkj1LBoUhTIuxa3p/zg1Wh3mIK/HAb9nKYda69pxKnvDXiFmieZm9OiTFMC
bHXnyqCfs2F484QmuqQ4+X/Lc+e8ZAt9nisZP2d56m3N3alRRdtDwjmYRNmF
NNc1cfJv7z9Bt37GJP2cJm6jg0Las9S2fer3K7Ko+FZTP6NRE6e2KGsgzjMm
6edMAtsnmEjmEYx8PrB9AgAAAAAAAAAAUwhH6zrRxyeT8BBeYvVti4ifmlwk
E5LN44+D/4CyBGZ1OFdMhkmbgezOb8JGRJn7GIlIbKKPQeuTqIutI9V6Ds6Y
GZImn5o3MqxOo45hnLM2bXRw3wVuY+JLc8XZLtXa+Kc/DuEHlOXcSURX5v1X
VSE8HTwB4Y2FHbHc8PNSZp3aiy/GxVnbnAmrEyauEmdRE47a7WaudGkQpOWU
l8+IL063Pzor3xJmjsApxCk1CoPAkq59qslzV9Mw1+IU4gwL9gLiNPYJ5kTi
lBnw8uTE0OX3l4lM0HMJuWqyWHqbHV+v8Tn3teI0Z9ZcpG38y0vL85ebzRWn
XLxyT+K7danjLHHKgxL+mOTFGX412CSa9rBEbZ0UXpdHDgsVlatJVavNy/eJ
M/xacVlvpQuPQ6mIkxKl2PLpT/6REdLVEflNmxyeP1kw/vFlXR3Ts+iXo75A
t56sjk/0lrkwUWRD6XymwnsJXQUukr5m2d/O4qx1lGvPQuObsKusdOFxkFL5
UZJeWa+QfKOpfukZ19p8P3Tz/BmEtbZAXx19lF5SnCV6H3tYnTCxY0DEhW+3
Elxxfc2yYYlzrrV1pnfu/lpxcd3EooUg2a0bZZpiyyhp0T2ou1Gz38VuPWOH
MNXhlkF+58VZoqcVkmUoa4YDUwZEVCN9/HXXfFD+N07RZdOOUN2z6+tFEmXv
fV8rDivbtvP547CPPqBs2jc+j3LzZrzTjd3JJr65WBTnYuZhdfThaoeSJFGP
+Mx5aZfB3we2q1NLzIjzF9LtwfOVbWc1vcoT3YNr61Je5AxOPDW1xLB9nuWj
G6Hbg+eDupmsJlZ5onuwry7lxGdw4qmpJQLwOvkBaxhrbw==
    "], {{0, 43.5}, {167.25, 0}}, {0, 255},
    ColorFunction->RGBColor,
    ImageResolution->{96., 96.},
    RasterInterpolation->"High"],
   BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSize->Automatic,
  ImageSizeRaw->{167.25, 43.5},
  PlotRange->{{0, 167.25}, {0, 43.5}}]], "Print",
 CellLabel->
  "During evaluation of \
In[94]:=",ExpressionUUID->"dc2dc83a-6ea9-ee46-8e7c-125b1f03c654"],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1: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
    "], {{0, 33.75}, {230.25, 0}}, {0, 255},
    ColorFunction->RGBColor,
    ImageResolution->{96., 96.},
    RasterInterpolation->"High"],
   BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSize->Automatic,
  ImageSizeRaw->{230.25, 33.75},
  PlotRange->{{0, 230.25}, {0, 33.75}}]], "Print",
 CellLabel->
  "During evaluation of \
In[94]:=",ExpressionUUID->"23049bbd-4846-6d4d-bc73-541e3ccd86e5"],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1:eJztkUEOgjAURBvduPQKyiXcuiJuMR4AIpJuagImxiNwEg7Sc/QsMDixqa1i
gnElk9AM0/6+33aVnZPTTAhRLTAk6XVblultv8TPQVWyUPlxpy55kZebbI6w
n1jj63076Z+ktcaj13X9UwoQcRx7FCTiLpvTM0RjDI0x4iEbhpJSNk2D0aXA
I7Q4lrMZGEzRMLQr3wnlXO9R7EEo7gODzt0qa4YVRRELQ0p4/HEUProrQDkF
aFgeUhgOPIcn7yzt86Vx85cUt9WPuJAyTrgN737Y2KTv1QGWzZ/1
    "], {{0, 12.}, {25.5, 0}}, {0, 255},
    ColorFunction->RGBColor,
    ImageResolution->{96., 96.},
    RasterInterpolation->"High"],
   BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSize->Automatic,
  ImageSizeRaw->{25.5, 12.},
  PlotRange->{{0, 25.5}, {0, 12.}}]], "Print",
 CellLabel->
  "During evaluation of \
In[94]:=",ExpressionUUID->"8e6da780-deca-8448-abf7-4d9925dfde8d"],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1:eJztnVFu1DAQhlfwwiNXQLkE4o2nFa9FHKAVpdqXIrVIiCPsSXqQnKOvXMOY
HXU0nRk748RZVPJ/UtGuyTqe5I/jjP8k766+X3x7tdvt7t/kfy4uf368u7v8
9flt/vLl9v5wc3v99dPtj+ub67v3V69z4Yf89zv//f2cAHixZAEfDgf+ejwe
VckkwzDsTozjKCvhrwD0YjzBXw8nst7iij2eoKpU7/3w8NCxqQAko1iiSbHM
4+MjFAvWpqNisz73+70qWdQ4AAxZVLlvVIUzFEsdrKqKRgsA9CL3rvmiyZa3
Kpbkavvq3OVCtKAvkVEBCbKk4ZJcE0YFYAWUYikrxbDkhhNuDVnJ8ieyU4Vi
QXfcPtZCWa/WyqFY0J36GZ8XUEmASTCDAAAAAAAAAAAAvFxUrmC/36tk7OTP
S/nYeSDPACrYGQRWr/UJVMg676sx5HKBi1LsMAz0lcyu8Q5TKZYcBdTrUi5X
OrvyQcGC5M5ZCR6KBS5KsWRwzWohucbnuaxieVaX+mpXsbmEu3F4a0EE5Tak
4SuJbaFileRcxaoxsGwJTF/AYt2G+at77p5ktmIrFUK0wGKvvEgn0qE96T1I
AcXy0UEjZPrfXFKSJUYFwMV6t+yNsanqNiQmFStrziq1V16qfigWuKzqNlwC
FAtcVnIbLgEzCAAAAAAAAAAAAAAgzjx/LD+mID6XSgabJvNtBSTBtsk8f2z+
CWdog7Khydm44TYIJhq2xnJ/LP+kjjtvS9MTclI4L5MPGZrPlT4EuTpZDxS7
NRb6Y+0zY0u4wmahsixp1eye5Q+0WF4d7AcbZ6E/VvV49SWVYuXQghYoGb+p
403CWsbAkbgpFvpjK15Bi+s/DCqW/jc9v2eBq4VoN0XEH5ueTtZqxKukUjfV
UA2qkFfBHXtJsfTZGnIwKtgaQX+sSiXJPJV0dtVttPJRn6Q0Gr7KW2ZKipU+
cAkUuzWC/tggsNGCtYncEROvBzZaAAAAAAAAAADgP8DNFchCm0cNQgkEnmio
e2bsDOwkkdRxHLsdbP1sxVQ2IS4Prte+YJ1T0zKhLVe3PEAbo92zco0yzS6n
GpW7I2iFcr2mbiz1AN18bGkibDRv966jUl59FVtvVWue1m4Ht373oaOtM8Xu
C9ZZFZzTZjdF8jbOjES03a12u5UejbJcsaWfp0IspQCbFJvEvKo0CnI48phN
oo/lZxaxpVD2J7Kqpp6Kt8AainXrt4pV7og4JaMRl0tHsVXFcsW6SjuDYu0W
W0+xPPufnqwpsv322GFzArWQQuOvaaobCdLFb1BRrKzfnqap2fbcPUlJsUoz
qk+QrYqvi5Ax8mHIoxE7KuDm9VIs37eiwmlSrPvub1Vo94jtFbnxsj28WXJT
KcwcWsmTME+x7jvHU7sL0d0O9fqp5fLc2vT8UndhrpZXTcf4zlxBzNhWMkZ1
YpJP9D3DqGAXePKqW2jdhm4haymX00a23amEdSsPZLqzgBRbOhu27oXKS5yb
xpbudqjXzz+RzW4aIVjF5hLZDLmAXbh18GxjlKGdU7Gp8ER3u0xJtK1XXtR4
e9Sr1dERLbtfCm0s3PAluxdi9jvHkzmnTNon7Hao15+bag9eup6KrC4ZESq5
pucbxFqMWgO0MVIfwp/jik3ezSPBNiTvumPVKy+5p9SZfRTWQSqRbZMOWzkw
kMeRvfKa985xN966E9JuB7d+zne5OSJlUC+t7ui9YF2NskghPKqMDNQnn5ha
j7Ge3eJCeVWodlY86slYSoVuFKXCf8Js+6KNt15V95DXNl62BpjOsls7viO+
pFi3J+9lQVzCbPuizT9HquoY8trGy3kBppV3a8d3xMNHCv4D/gDdkPyk
    "], {{0, 43.5}, {172.5, 0}}, {0, 255},
    ColorFunction->RGBColor,
    ImageResolution->{96., 96.},
    RasterInterpolation->"High"],
   BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSize->Automatic,
  ImageSizeRaw->{172.5, 43.5},
  PlotRange->{{0, 172.5}, {0, 43.5}}]], "Print",
 CellLabel->
  "During evaluation of \
In[94]:=",ExpressionUUID->"07ff2b73-a76b-d64c-adb1-1ac0c9aa59e8"],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1: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
    "], {{0, 33.75}, {230.25, 0}}, {0, 255},
    ColorFunction->RGBColor,
    ImageResolution->{96., 96.},
    RasterInterpolation->"High"],
   BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSize->Automatic,
  ImageSizeRaw->{230.25, 33.75},
  PlotRange->{{0, 230.25}, {0, 33.75}}]], "Print",
 CellLabel->
  "During evaluation of \
In[94]:=",ExpressionUUID->"bafab487-456c-3c47-a813-adb23e67e61b"],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRIz
UBAkoQTEIPb/UTAywPLlyxlgQFlZmXa2ZGZmYpVyd3eH2N7Z2QkRgbAhgocP
H4YI3r17F+5OuCCRtgBNA0rBrYNoB5oDZEN0QRgQQbhKPH6BuwRZMdwjyFJA
BtDlQAbQUogtcAaRAOJxiCHI7kcGlNsCBMDYh5sMDEZM7Zi2QARxRQcmgAQd
sghyoEEMx2oLkE0w9uFphlrFFzBAGFABPBZGAYUAAN9+o38=
    "], {{0, 12.}, {25.5, 0}}, {0, 255},
    ColorFunction->RGBColor,
    ImageResolution->{96., 96.},
    RasterInterpolation->"High"],
   BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSize->Automatic,
  ImageSizeRaw->{25.5, 12.},
  PlotRange->{{0, 25.5}, {0, 12.}}]], "Print",
 CellLabel->
  "During evaluation of \
In[94]:=",ExpressionUUID->"b9b527f1-0c9a-1c46-a588-714db47f33fc"],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1:eJztnUFu2zAQRY1202WvUPgSRXddGd2m6AESNA28SYGkQNEj5CQ5iM+Rba/B
Tj3IYDwzpEiRcpHqPyBBzFjUkPqi6OGX/O7q+8W3V5vN5v4N/bq4/Pnx7u7y
1+e39OLL7f3+5vb666fbH9c313fvr15T4Qf6+U0/f/9OALxYSMD7/V5ePjw8
mJJJ/CZccjgcRgYKQEqHI/Jyf4T0Vq/YwiaPj4/DAgXgiFEs06TYwiZQLBgO
FAteFiSqp6cnUzhKsVTYFRwAp9Dout1uffkoxe52O4gWjKVmVkCD8GT2ALMC
cB6MYjkrJYjktkfCGnKbJCgWLEA4xno4hdVaORQLhjN5xec30Iy0qVqsIAAA
AAAAAAAAAC8XkyvY7XY+s1reXNO/yIU8AyjgVxBEvSQbbznIQTofqzHkckGI
Uex2u+WX9LtpwDSKZUcBj7qcyyUFSlKXTgoRpAzORvBQLAgxiuUbakgtLNf6
dS6vWFnV5bE6VCyVyDBu7uWBYkGIcRvy9JXF1qlYI7lQsWYOrCOB6Qt4vNuQ
XobX7klmK7ZQIUQLPP6TF+uE7QQ86NW4DScVK2cHz5D5v1SSkyVmBSDEe7dI
Rf6jUMFtyEwqVtdMKvWfvEz9UCwIWdRt2AMUC0IWchv2gBUEAAAAAAAAAAAA
AFDPPH8sbdJqiGWDTZP5tgCSYOtknj+WNpEMbaVseHG23nBbCRYa1ka/P1Y2
KROu2/LyhF4UpvfQKcPrudqHoHeHx86smU5/LEuuZkehsEWoIkvetbhn5Q9+
G+0O9oOV0+mPNSNe+Z1GsXpqwW/IGb954E3KWibAkbgqOv2xBa+gJ/QfViqW
/5tO71mQaiHaVVHjj03PF2sz4zVSKZtquAZTKLuQgT2nWP7bG3IwK1gblf5Y
k0rSeSrt7CrbaPVzO1lpPH3Vt8zkFKt94Boodm1U+mMrgY0WLE3NHTH19cBG
CwAAAAAAAAAA/AeEuQJd6POolXACQRYayp4ZvwI7SU3quB7TDzrnrJPMvFPz
9dOtxksfuZg8TT1SLu/sSZJsoq9o10dWh6HT7Hqp0bg7Kq1Qodc0bEu5gWE+
NrcQZmxUk5iU11jFlqNqzdP6fhAzg4Z7UjdkhvEyjDx8nGlhDXpGItofVt9v
uUej9Cs2t3nKtCXXwCbFJrWuqo2C0hx9ziY1xsozi8RSqMcuXZUfM2t64GyK
ZXLHaMaxKyjW+C4M/YoNoz2DYn27llOsrP6nZ2uKjt+fO2JO4Ai5afIynapi
xqxAKun3G4SKzc2FwmNUb7zUu5DI9eWYS7hDTKHetmlf6bSNEq0slPtZgRya
UYqV6ZOxMzUpNvzub1Po+82PihK8jke6hULlZlLTcp6EeYo1jh0dc1M9YT/k
dhEeo3rjZa5ahiLnPtFXbe/8nNFXuo3m/NJP9D3DrGBT8eTVsNC7DcNC0RKV
c7/54VQjutUnMt9ZwIoNr7YzFMv1h93V5EIM+0FjDoo/Rk3Gy1SMXILRHeKv
pK02S99GHcA5FZsyT3T378mJtvWTFwfvr5Vmd3xG6+GXm3bI3PAlY4tQ9jwU
Dnpy15RJ+0TYD1KVuSh7ATcZL8uRUyf4YYFKzC5aG5hcG3kMkb/rFZuim0cq
Y0jR9GnRT166P82V/aCsg1yiY9MOWz0x0AdCCmXvBfuiTIp8PWF7y05I3w/h
HFKyUlI+w3gZRi41h9mnmon65BNTfRt1JOXslhRyePpYm5M3F0PrnLxHsf+Q
2fZF395yVcObvLTxsrWB6SyHdeB3xOcUG47koyyIPcy2L/r8c01VA5u8tPFy
XgPTwod14HfEw0cK/gP+ADtfDa4=
    "], {{0, 43.5}, {172.5, 0}}, {0, 255},
    ColorFunction->RGBColor,
    ImageResolution->{96., 96.},
    RasterInterpolation->"High"],
   BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSize->Automatic,
  ImageSizeRaw->{172.5, 43.5},
  PlotRange->{{0, 172.5}, {0, 43.5}}]], "Print",
 CellLabel->
  "During evaluation of \
In[94]:=",ExpressionUUID->"c1f0b7fb-24dd-c848-9004-6fefae39a19a"],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1:eJztnNtvFNcdx7ftSx/7B0SJip/73D4l6gNCfU3Vp1yqRIXILzSCSqSOqqRF
TmuESUSCpSZKixxTAya+rAGDAviGY4Lc+BKE8QVfsHHM2rvry9rjXXvX/bLf
+KfDzO54dnfGe+n56jA6c+a3Z34zPp/9nTPzW37+5h9fPvRjn8939KfYvPzG
sV8fOfLGn3/7M+z87vDR8rcOH/zDbw7/6eBbB4/86s2foPEX+PfLH/l8T+vb
xalYLBaJRFa0tIpfGMnRaDTfSLksXFQgEAgGg2EtreIXRjLGM2jNN1iuCTGU
V2RoaZWKVldXMao3NjbyjZc7QhjFN0++b6qWlssKhUJANd94uSPEUMwQ8n1H
tbRcFkZ1ycx4NaRaJSkNqZZWgUtDqqVV4Cp2SLu7u31JbWtItUpUAmlZWRmG
en19fb6xy0zdSbG+l5CG793//vK1mc/OTn3yT4dlrqFpofvrtYXFTM916NCh
mzdvenEVxaKzZ88+ePDAoTEsa2pqdjVraGhgt9jm5p3nMkVSDemuijwJzHz6
76lTnyxcblseGIoMjzgsoY7uubrz4385vtBzJ6MzZg1pbW1tZWVlFh88ceJE
Fp/ySD09PQDKub1DSHGNxBOd4xTZ++e9NKQZKbIYHD9eFbrRHjeMeDSaRVmf
mp46eXr+2lfOT0pIIVT27duHCQ/R279/Pyqc7YsBPwIz7PIQzNCCcYvR+H5S
HJOyyyHNyILd6upqMcPWeQhL6Tl9oMPwipeAXR6qq6vz7YgG9+/fRwXO021D
CaPwkx7SMYhfJg1Jic8CKYxpYL0KHIIlIS38YKohzUgz//oicOV6dnhKiS4s
jr9XufJoxuFJBVKMZI5hDmkMY1KJRlKpQmo8G0k5wo3kmMTQxRCVcIP2trY2
jHNpcT2S0h9s4RIq8EoYpNBSmxQdVicP4hW/Z9RPkTU00mFeFCEluSmd4UdU
Np1E3jxKQ+pcK1PTkx+czDqGqiXc1TNbd97hedVIyhaOeYxzMsv6rpBKNEG9
LSnuctBC0uIWpHCAUVIgZTuRFFdpwxaTpeqMegnv74jO03PiiS3abYIjO1Qh
LajpvVUaUuda7L0790V97oSiGHPfT5z4yOF5bSDlwObkEMAyPKHCUGuClCOZ
4SZlJHUdUgmX6SBFhRFTbVERNp6NpIRUJsASSU2Q8mJTcioTY4o2RR1Jy8rK
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
    "], {{0, 33.75}, {233.25, 0}}, {0, 255},
    ColorFunction->RGBColor,
    ImageResolution->{96., 96.},
    RasterInterpolation->"High"],
   BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSize->Automatic,
  ImageSizeRaw->{233.25, 33.75},
  PlotRange->{{0, 233.25}, {0, 33.75}}]], "Print",
 CellLabel->
  "During evaluation of \
In[94]:=",ExpressionUUID->"a33ab862-2d2d-da4e-91cc-210bb3e38972"],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRIz
UBAkoQTEIPb/UTAUgLKy8t27dyk0pLOzExjjmZmZtLMlEwyAFmHa4u7uzgAD
EFuAJJoImuDhw4fxewfNFmQRuF+ADLjJcDbQ8OXLlxPjI0xbkEMJwkZ2MwQA
pYCOB3qZGCuItwXufjig0BZIZEEY8FjAGjgEowOPLfDwAUoBXYsZ+3AvAK0g
GPuQZAwHRMYjHgAMVbToozyvjQIIAADrn6CU
    "], {{0, 12.}, {25.5, 0}}, {0, 255},
    ColorFunction->RGBColor,
    ImageResolution->{96., 96.},
    RasterInterpolation->"High"],
   BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSize->Automatic,
  ImageSizeRaw->{25.5, 12.},
  PlotRange->{{0, 25.5}, {0, 12.}}]], "Print",
 CellLabel->
  "During evaluation of \
In[94]:=",ExpressionUUID->"5c793345-4615-3d4e-a447-c505db9fc476"],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1:eJztnVFuEzEQhiN44ZEroFwC8cZTxGsRB2hFqfJSpBYJcYSeJAfJJXjpWZYh
I42mM2N3du2E4P6f1CpxNl579197Pf7jfXf1/eLbq9Vqdf+G/l1c/vx4d3f5
6/NbevPl9n57c3v99dPtj+ub67v3V68p8QP9/aa/v68nAM4MkuV2u5W36/V6
dWC/3ydzeHh4MJlwSj4H8MLZH5C3Dwc4Pdlsbg/Qt7QOmd1u17GoYGCMDoXH
x8dZ3Td0CFoo6ZAktNls8vlAh6AFkgo1fSaRG0OfXiHUIXfxANShlpBGJSaR
RTh3iBHqkFpUSBFkMP1yKEJO9DLToF8GLRgdkpZWCmnN1gfCHDhEI2jtQYcg
SWmcYuDgzNzMoUOQ5Nk+lzeYNXaeEMcGAAAAAAAAAPD/E1q28lGa3W6n44el
zXjcvWDorUuFAfio+Dh2ycRVYpYjYq59wn998XfBORPGsdt1qOdldP5+Yz93
Iw2sn8GBDkeliw5FS145lLkWntEh7cVIi7pv2YA+MsWADkcl9H21t4danBUd
8mZ6X+Zu0+QM986QhL6vqYcOpTuut4eSKGr0baAGRrJRyfTL9Tnokg65md0c
qG88qSuCfxdTsuCiXx4V/zup0MRV8X3VxymUIX/KAjOjEvrID2d012xaP+hw
VI7q++oOdDgqR/J9dQdxbAAAAAAAAAAAALxATNxGYsv1YJ2OVCd3pAPU7ZFA
RHJGws+niCYr82t61jgphvqE3WIQ2R4Do8P1ei3+hGRbJ1+pQ7r1mhGTtoiZ
fQ68Fqiecda7w5IR42F0yGecO9CM6ya/TGIoV23L0btmdYl06QVvRrsz09zQ
4RgY/yFrgM91RoemdapvaXRoLGG0AZVEuybEJStmMFmuVoANbAC8/5DeehmU
oI3zMvD9cl6H/ClnYu4w4Ugcg9L62GYpTu4uzZ2kEcCzNkXfg8supBEu6ZBf
hx7aeRUGZ4n3fYXPCzBBkpJ7v2JTnJ6aG1k/2pQoggx1yFt61UGHY5D0HyY5
vU0ROhyDzFqv+XxOaVNEHBsAAAAAAAAAwFEJx8s60cf9kvAgWj/8ojK89XN2
z5IJdeZZlVc4MWHMVbSST4lwHT/JvMtDWn3+/pTpn4rreK+enzLT9xkHS8nL
F9alUsEwfliaZNmnH0LKmGBOXx3WSzU3rliJo+qzIycuGSkN1/GTyaOQ9pLz
6TabhX6ndh2WvsuEdQkTZ+lwUjNx2rIlddGX4aTaQ9611MusLKez8u1b5ggc
VYdmHpyZtQSQ2dicfUN7yUP9HFuH4VE6kg71hSwvpPD+ipBJai4h16u0styC
flkyaZ93Do+DeM69bMLTWkLrkI+S5Nw+U2lKLlel3EL4flkK00WHlaOU12G4
7pxJNK3cFLVgUnJdHjkmVFSuI9WrNDe9TIelR6POzSo8DqVdyKI9SYwORRth
S95YcpOnzNGfoF/2JyKsi0/0vq8wURTCF7IvsEHUqK9NdlmzDsMebYEOK49G
neUHC4+DyU32QtnmBynyFdMeyke+j24vuT4mJ9Ph9PQoSYqvS5i4YJzCJQ/7
FL0vvk51U8n12hd+qOIbmfrcd/35vH6Z2UpWvsr+u1LI0pOCK5mb+0M5X6GK
2kvOl7y8zutwihzymTJMc+7Su4xTqDrSJJq+da9MXJyiy6YdjKWV5fw4pWIk
Kz0atVTZuietNOrUdx26hOaOqJR5uI5fOMTrWPLp6cGpx20kkU+rPok620wF
/ad9dfgPWWwk85WtZ9VY5Y6GtxOXPEnHB86GiWGT28sM1sJiI5kPlmayWlzl
joa3E5c8SccHzsKqB86TPxg+zDk=
    "], {{0, 43.5}, {162., 0}}, {0, 255},
    ColorFunction->RGBColor,
    ImageResolution->{96., 96.},
    RasterInterpolation->"High"],
   BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSize->Automatic,
  ImageSizeRaw->{162., 43.5},
  PlotRange->{{0, 162.}, {0, 43.5}}]], "Print",
 CellLabel->
  "During evaluation of \
In[94]:=",ExpressionUUID->"6255242b-95ce-814a-885b-f6cc87b8e0a0"],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1: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
    "], {{0, 33.75}, {254.25, 0}}, {0, 255},
    ColorFunction->RGBColor,
    ImageResolution->{96., 96.},
    RasterInterpolation->"High"],
   BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSize->Automatic,
  ImageSizeRaw->{254.25, 33.75},
  PlotRange->{{0, 254.25}, {0, 33.75}}]], "Print",
 CellLabel->
  "During evaluation of \
In[94]:=",ExpressionUUID->"4f2c97fa-fd9f-b545-b188-f44a70ca87b4"],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRIz
UBAkoQTEIPb/UTAUgLKy8t27dyk3hAEMDh8+TCNbOsEAyABagZa63N3dGWAA
YguQRBNBE8TlTjiAKEa2PTMzE80vQAZcMZwN1LV8+XIiPQVUCXQ8nIscShA2
spshABICyLqI8Qhy4GO1Be5+OCDeFogVaEEKDC5IfAEZcAdgDRziowNTGTx8
gHYBXYsZ+3AvQJIN/tiHOBUOIO6nBMDzBWZqHAUUAgCfVZoW
    "], {{0, 12.}, {25.5, 0}}, {0, 255},
    ColorFunction->RGBColor,
    ImageResolution->{96., 96.},
    RasterInterpolation->"High"],
   BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSize->Automatic,
  ImageSizeRaw->{25.5, 12.},
  PlotRange->{{0, 25.5}, {0, 12.}}]], "Print",
 CellLabel->
  "During evaluation of \
In[94]:=",ExpressionUUID->"0cd7bec7-328e-2a4a-a70d-3fad82ee0439"],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1:eJztnVFuEzEQhiN44ZEroFwC8cZTxGsRB2hFqfJSpBYJcYSeJAfJJXjpWZYh
I0bTmbE73nVCMP8ntUqcjdf2/muvx39231x9vfjyYrVa3b+ifxeX39/f3V3+
+Pia3ny6vd/e3F5//nD77frm+u7t1UtKfEd/P+nv9+sJgDODZLndbuXter1e
Hdjv98kcHh4eTCacks8B/OfsD8jbhwOcnuw2twfoW1qHzG6361hUMDBGh8Lj
42PT8A0dgiWUdEgS2mw2+XygQ7AEkgp1fSaRO0OfXiHUIQ/xANShnpBmJSaR
Rdg6xQh1SD0qpAgymHE5FCEneplpMC6DJRgdkpZWCunN1gfCHDhEI2jtQYcg
SWmeYuDgTGvm0CFI8uyYyxs0zZ0nxLEBAAAAAAAAAPz7hJatfJRmt9vp+GFp
M553z5h661JhAj4qPo5dMnGVaHJEtNon/NdnfxecM2Ece7kO9bqMzt9v7Ndu
pIP1KzjQ4ah00aFoySuHMtfCMzqkvRhp0fAtG9BHphjQ4aiEvq/l/aEWZ0WH
vJnel7naNDnDvTMkoe9r6qFDGY7r/aEkihp9H6iBkWxUMuNyfQ26pEPuZjcH
6htP6ozg38WULLgYl0fF/04qNHFVfF/1eQplyJ+ywMyshD7y0xk9NJveDzoc
laP6vroDHY7KkXxf3UEcGwAAAAAAAAAAAP8hJm4jseV6sE5HqpM70gHq5ZFA
RHJGwq+niCYr62t61TgphvqC3WwQ2R4Do8P1ei3+hGRfJ1+pQ7r1mhGTtoiZ
fQ58L1C94qx3h1tGjIfRIR9xHkAzrpv8bRJDuWpbjt41q0ukSy94M9qdWeaG
DsfA+A9ZA3ysMzo0vVN9S6NDYwmjDagk2jUhLlkxg8ntagXYwAbA+w/prZdB
Cdo4LwM/Lud1yJ9yJuYKE47EMSjdH9vcipOHS3MlaQTwrE3Rj+CyC+mESzrk
16GHtq3C4Czxvq/weQEmSFJy71dsitNTcyPrR5sSRZChDnlLrzrocAyS/sMk
p7cpQodjkLnXaz6fU9oUEccGAAAAAAAAAHBUwvmyTvRxvyQ8idYPv6hMb/2a
3bNkQp15Su3A6ET2vGW8Q6HVTaKmJtbaseT+kOmfiut4r66FWb7POFhKXr6w
LpUKhvHD0iLLPv0QUsYEc/rqsF6q1rhi2A5ho3GkvdXDpg+xHP0w3Lq85Hy4
zWah32m5DkvfZcK6hIlNOpzUSpy2bEld9Gk4qf6Qdy31MneW01n5/i3TAsfQ
Yem84H216tAspssujqHDUD/H1mFYwSPpUFaBpz/GA114f0bIIjWXkOtVurPc
jHFZMlm+7uzbgR0UZiCTpca8DsW47rcPtbGw5HJWyujvx2Vp8y46rFQwr8Pw
vnMm0fRyU9SDScl1eaRNqKhcR6pXaW16ng5Lj0Ztzcq3g75DFAvGuNBbx2Xz
FbnzT9+Sm9FBTpwTjMu+TcK6+ETv+woTRSGUzqdSeDGgy89F0ucmu6xZh+Ey
4gwdVh6N2uQHC9tBzLdSNvPwwVXLb3N8hqUGXF5y3SYn0+H0tIKS4usSJs6Y
p3DJV9W5M9dan5tsxeGcSz2Y6R/qa9/15/P628xWsvJVnp5eM/gj4rv9+hq9
boqKCLuUnE95eZ3X4RQ55GdUsFSXSmLrPIWqI12iGVv3ysTFKbps2sFYurOc
n6dUjGSlR6OWKlv3pIXtINdU/vw1p1Ipc39Jo6vJGCV0KblunHrcRhL5sOqD
qLNtqmClLqXEjA7/IrONZL6y9awWVrmj4e3EJU/S8YGzYWLY5fYygy1htpHM
B0szWc2uckfD24lLnqTjA2dh1QPnyS8CJMCo
    "], {{0, 43.5}, {162., 0}}, {0, 255},
    ColorFunction->RGBColor,
    ImageResolution->{96., 96.},
    RasterInterpolation->"High"],
   BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSize->Automatic,
  ImageSizeRaw->{162., 43.5},
  PlotRange->{{0, 162.}, {0, 43.5}}]], "Print",
 CellLabel->
  "During evaluation of \
In[94]:=",ExpressionUUID->"1739b975-e2db-ef42-826d-a868a513a0e6"],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1:eJztnN1PG1cah9ntzV7uH1C1arje+71qtRdRtLetetWPVasNFTdplayUlqpq
diO6SxTSVdogLVV3ESVLEqd8mCQkahK+QkkRW8CNIHzEQCCUGGyDMYxtsNlf
/NavTmbGkzGewWDeRxPr+Pj4nOHYz3nPGZ/JS+++/2rZr0tKSo79Bg+vvnP8
D0ePvvPRa7/Fk9ePHCt/78jhP//xyF8Ov3f46O/ffQ6Zv8O/135VUvIkvbU3
SSQS0Wg0IgiCGbAjHo8XWlOHwR8VCASCwWBYEAQzYAccwQhQaFkdA7Ge/iJN
EITsrK6uwpRYLFZoZZ0B4R6jWaE7VRD2AKFQCPoXWllnQKzHTKbQPSoIewCY
UjSzfRFfEGwi4gvCPkTEF4R9yF4Xv6enpyTNlogvCLZh8UtLS6FPY2NjoVXO
jZ40lN5J8cP3Rn6+cn32q7rpL/9l85j3NC/2fL+2uJRrW3V1dTU1NfxUTdvh
1KlTubaow+PxnDhxAo9cYW9vb551Okh9fT0N/pWVlYU+lz2DLuKL+M8k+jgw
W/uf6TNfLl5pXxnyRUfHbB6hzp75hguTn5xc7L2bU4skPnu38+Ln2mI28Ie4
MWJAfEocOHDA8cqLFRE/J6JLwcmTVaGbHUlNS8bj2zjWp2emT59duP6d/UbJ
F/h7//59LaMhHulpe3s7xgSkkYMyCM1IU4LGCqQpZNNLVCE/Rc30lAcWZJ7I
gDQXZmepaWqXXkKaGuLCWnqeQPl0blzYk0atk08sT0R8+4j4OTH7728CV29s
T3k+4otLk59WRh7O2myUxAesvGYmPotMCdJfy4iPBNVA5bWMj1RebY5HGF2L
DItPb+SGeATAI85ZJ76mRPz8JyFGysrKbt265Xi1xYqIb5/I9MzUZ6e3HevV
I9zdO9dwwWa77AupZBHxNcUyLSOsapkaeQGt1lG/2pzxekI28dVVv9oQzRMs
xKdhStduPiDW84RfsIOIb5+lvv75bxrztx6HNv+z/9Q/bbarLo0hl04iUsxa
fCpJgVgVVkuHdZ2A9iO+TnyesdNkngvwYKVb47ensdkJFhw8eHBkZCT/evYV
1uKXlpYeOnSI0uXl5VVVVRYCckkGOSUZHjx4kI/gaBonYNquHfHbFFpbW5ua
mrxeL+fY7Kv5b1tDt7scER/H2LEKm+2qvvDMnBKAgri1+Ejw0pvyebltFF9d
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
    "], {{0, 33.75}, {254.25, 0}}, {0, 255},
    ColorFunction->RGBColor,
    ImageResolution->{96., 96.},
    RasterInterpolation->"High"],
   BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSize->Automatic,
  ImageSizeRaw->{254.25, 33.75},
  PlotRange->{{0, 254.25}, {0, 33.75}}]], "Print",
 CellLabel->
  "During evaluation of \
In[94]:=",ExpressionUUID->"337d8d44-ed30-1c41-a4a0-3a7a06aa8f27"],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRIz
UBAkoQTEIPb/UTAUgLKy8t27dykxYfny5QwwAGTTyBY4AJoDNA1ZxN3dHe4A
iC1AEk0ETfDw4cP4bQEqABoL53Z2dmZmZqL5Be4MZCfhCQRkADQNzXn/UUMJ
wkZ2MwRguo0ggBiCZjKaLWhBSoYt/8ERAQ9YoAeBgQb3KcRGrIFDTHSg+QWN
CwRAu4C2Y8Y+3AtAKwjGPtAQ5HCmHABDFS36qJULRgEAElaeDw==
    "], {{0, 12.}, {25.5, 0}}, {0, 255},
    ColorFunction->RGBColor,
    ImageResolution->{96., 96.},
    RasterInterpolation->"High"],
   BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSize->Automatic,
  ImageSizeRaw->{25.5, 12.},
  PlotRange->{{0, 25.5}, {0, 12.}}]], "Print",
 CellLabel->
  "During evaluation of \
In[94]:=",ExpressionUUID->"a0042f4f-fa53-5142-8d7d-96420330b958"],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1:eJztnVFuEzEQhiN44ZEroFwC8cZTxGsRB2hFqfJSpBYJcYScJAfJOSqOsgwZ
dTSZGTvjXSfQ7P9JoMTdeO3df+31+F/vu5vvV99eLRaLxzf039X1z48PD9e/
Pr+lL1/uH9d397dfP93/uL27fXh/85oSP9C/3/Tv7+cBgJcAaXW9XsvX5XK5
2LPb7ZI5bDYbkwmn5HMAwLPbI183ezg92cCu99CvtDiZ7XbbsahgbhhxCk9P
T029P8QJulMSJ+lqtVrl84E4QXdIP9RImkRuNn16hVCcfIcAwAiozaThj0lk
ZbaOZUJxUtsLfYLRmG49VCYneu1p0K2D7hhxksAWCmn3lnvCHDhqJGhBQpxg
CqUBkYHjRa2ZQ5xgCke7bN6gaeQ+IAgPAAAAAAAAAABMI3S75QNH2+1WxzlL
m/Gof8TAX5cKw/9Z4YPwJf9biSaLSKufxP989G/BiyMMwk8Xp55p0vn7jf1s
lDTFfk4K4pwVXcQpAvNyosy1Go04aS9Gb9T7ywb0J1MMiHNWhJa56S2nVmxF
nLyZ3pe5gzU5w+M0H0LL3NBDnNKb11tOSRSJ+tZSAw/erMh06/X595I4uUFe
7alvPKjLhJ9dKvmc0a3PCv+AW+h/q1jm6gMiypD/yqozwx/6kx836Z7dtJMQ
56w4qWWuOxDnrDiRZa47CMIDAAAAAAAAAAAA/A+YUJIExutBRR1mT+5IR9en
RywRXLp4/AyRCLUyjahnzJMKqc9LjgZh+QvGiHO5XIphI9kqyk/qkJi9kMQe
Lwpn4wcvYKtn2/XusKjITDDiZBlw/5vxJuWX8Qw1rM1LetcsOdEzfeDNaHdm
ih/ivGCMn5OFwQLIiNO0Y/UtjTiNm442oJJoG4lYkcVHJwsvC3DQXSrez0lf
vTZK0MZ5bfhuPS9O/itnYu5a4fC8YEprwpv1Y7m3NXenRhVHbZ/+BkB2Ic11
SZz8OTQqt1UYvBy8ZS58m4aJ25QepqjYPodDsyiLSps8RaWhOHlLL0WI84JJ
+jmTnN/2CXFeMJlVi/P5nNP2iSA8AAAAAAAAAIALJhyt60Qfn0zCQ3j9vpjK
4NpPTR4lE5LN44+DXw1SArM6nKufvm/anf8JGxFl7mNKRGIRrWypT6Iuto5U
6zk4Y2ZImnxK3siwOpU6hnHO0rTRLv0qYcbEl/qKs16q1vinPw7hapBy7iSi
q9fPyVchPB08AeGNhSNiueFaGWab0CfWRZylnzNhdcLEJnEOasJRu93MlS4N
grScvGupmlnkUGflW8LMETiFOKVGYRBY0rVPNXnuShrmWpxCnGHBziBOY59g
TiROmQEfnp0Yuvz+MpEJei4hV620yOGIbl0ymT7n3ipOc2bNRVqHzSqmP5W5
2u7ilItX7kl8ty517CVOeVDCH5O8OMMlEE2iaQ+HqK2TwuvyyGGhonI1qWql
eflx4iy94Lg1q/A4DOW3IUux5W2h/CEjJL24GYt8d/hkgSnJiMOiq2N6FrkK
ztOtJ6vjE71lLkwU2VA6n6nwXkJXgYukr1n2t7M4Sx1l61movOC4yUoXHgcp
lR8l6Y31BsmlI8U7PTzX2rxydHH4DEKrLdBXRx+lc4pzOKyspPjqhIkjBkRc
+HorwRXX1ywbljjnUltneuf6vH/91dt+weRKVr7KulRmzOuvXN01y8Vb2Z2+
PP3pPtqtZ+wQpjrcMsjnvDiH6GmFZBmGluFAlwER1Ugff90175T/jVN02bQj
tLTIoSTK3isevNILjkuVrdv5/HEIV4M07ZusQWpuUY7uTn7im4uj4jyaeVgd
fbjqoSRJ1CM+c17qZfD3gfXqlBIz4vyHjPbg+crWs+pe5Y7uwda6DGc5gx1P
TSkxbJ97+eimMNqD54O6maw6Vrmje3BcXYYTn8GOp6aUCMD/yR/WkUIv
    "], {{0, 43.5}, {167.25, 0}}, {0, 255},
    ColorFunction->RGBColor,
    ImageResolution->{96., 96.},
    RasterInterpolation->"High"],
   BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSize->Automatic,
  ImageSizeRaw->{167.25, 43.5},
  PlotRange->{{0, 167.25}, {0, 43.5}}]], "Print",
 CellLabel->
  "During evaluation of \
In[94]:=",ExpressionUUID->"f482a42f-2a5d-b744-bba1-4c9ff774acad"],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1: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
    "], {{0, 33.75}, {258., 0}}, {0, 255},
    ColorFunction->RGBColor,
    ImageResolution->{96., 96.},
    RasterInterpolation->"High"],
   BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSize->Automatic,
  ImageSizeRaw->{258., 33.75},
  PlotRange->{{0, 258.}, {0, 33.75}}]], "Print",
 CellLabel->
  "During evaluation of \
In[94]:=",ExpressionUUID->"22205a0a-0d6c-6249-a371-6297bc8cc7d6"],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRIz
UBAkoQTEIPb/UTAUgLKy8t27dyk35/Dhw8BI7+zspKktQCvc3d3RbAGKMMAA
xBYgiSaCJgh0LS4rMjMzly9fDiSRbQGygSJofgEy4CbD2UDDgdrx+wJoO9DN
ELuQbUEOJQgb2c0QgKwdP4CbRowtcPdjOhK/R9CcBzcHbimQAY8FrIGDPzrQ
AJpf4OEDFAS6FjP24V5AdipB69BsIRsAQwMtfKiSC0YBEAAACZiVSA==
    "], {{0, 12.}, {25.5, 0}}, {0, 255},
    ColorFunction->RGBColor,
    ImageResolution->{96., 96.},
    RasterInterpolation->"High"],
   BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSize->Automatic,
  ImageSizeRaw->{25.5, 12.},
  PlotRange->{{0, 25.5}, {0, 12.}}]], "Print",
 CellLabel->
  "During evaluation of \
In[94]:=",ExpressionUUID->"ce98e952-31e2-3943-a466-6c2ece08f93f"],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1:eJztnVGO0zAQhit44ZEroF4C8cZTxesiDrCIBfVlkRYkxBH2JD1Iz7GvXMMM
HTEaZsbuOHWCdvN/Eqj1po7H+eM49h/n1cevV5+fbTabby/ov6vrH2/v7q5/
vn9JXz7cftt/ub359O72+82Xm7vXH59T4hv694v+/flcAHi0kID3+7183W63
mxPH4zGZw/39vcmEU/I5AJDkeEK+3p/g9GRTvD9Bv9KKZQ6Hw8CiAlCcYoWH
h4euzgMUC5ahplgS2263y+cDxYJlIFFRc2oSuYH16Q1CxXIHA4BRUOtK91km
keXae9MUKpZaaYgWjMX0CkK5cqIXpAa9ArAMRrGkuo1CWsjtiTAHHsgStEqh
WDCc2p2XgYewejOHYsFwzl7xeYOucYOCGQQAAAAAAAAAAOAxExoF82NZh8NB
j8fWNuMxhwnDDrpUGHwAfgahZh2s0eWZ6TXY+J9P/i14GoQzCJcrVs+d6fz9
xn5+TRptP8sGxYIhihXVeY1R5lqiRrG0FyNC6jzIBvQnUwwoFoRuw8vbWC3j
hmJ5M70v0ys2OcMJtnJCt2EZoVjpDLTbWEkU3fp2VQP7Isj0Ctreg5piuene
nWhvXNS5w8+X1czk6BUA/2RiaB1suA3bd16UIf+VpWjus+hP/gZNdwxMiwrF
glndhsOBYsFMbsPhYAYBAAAAAAAAAAAAAISY0S0Z1W8Pfuo5guSO9NTA5SOr
GO9aJ37OS9TbmC3VboGkbNrTr5PBnMLaMIrdbrfiYEm2n/KTNqRwry55MEFk
z04YXnVZOw307rDszJoximVt8OU74+DKLzMbCltbvPSuWYcicvrAm9HujL0B
il0bxh/LamFVZBRrWrz2lkaxxohIG1BJtK9G/N5iQZQlxAWYD1eF98fSVy+Y
GrRxXjC+V5BXLP+VMzE9YThm10btPQhm0WO+WJser5HKWRut7z/ILqRhrymW
P4du8L6AwSPHuw3Dd82YoaTasy0NG23513zLStOmWZFuqFje0usTil0bSX9s
kuVttFDs2sisv53PZ0kbLWYQAAAAAAAAAACAmQjHCnSiH0dNwgMI+hVLjVt7
PwN7lszQcR5fDz5/vcCCLq2kJ/frlzyVoWk9oK13d3mAPkZ/ZPUe9TC7nmo0
7o6kFSr0moaxtAMMx2NrE2HH9AvBGTPkNVax7VL1jtP6egjzF0+OpnemOFzy
VFQhY9p6QSdfORMGosPVVMw2ocVuiGJrPy+VWGoBdim2qHlVbRSUcPQ5W1Qb
y3uX0Mx6mzqrrpZKamAOxYb5e8Uad0SemtFI0rWj2KvicsWGSltAsb7G5lOs
zP6Xv9YUXX5/7og5gUvIodXW25zQK5BMLvcbNBSr8/eXaS62v3afpaZYoxnT
JuhS5ffF6BjlNJTeiO8VSPFGKVaeWzHhdCk2XI3TJPoj4ltFKbwuj1QLFZXD
pNBqnoRpiq29prw3q7Ae2vlzyfW1tWtNyNrb0qVC5B3B/MEcwQl1pWM0Fyax
cCzTKzBVGsYSJnq3YZgoWqJ0rmTfnGpEt/pE5icLWLG1q2HvUWi8pryrbxnW
Qzt/+YkudlcPwSuWUnQx9AZ+497Os49Rh7akYovrXIWx1AKccOfFhfdnvdkd
n9G6+eXQjpUHvnTzwrQ9Dw05FXdNOWuf8PXQzp+K6k9evp/K7K44ERq5ln8r
xFuMegP0MXIbIp/zii3RwyPJMpTovmPWOy99pMyV/aisg5yiy6YdtrX1Nv2d
V8O+WHtNeS3ethPS10OYv4x3hWNExqDe9bZ008uS1Xd9ztMCPBtje3RLEvVd
oTlY+ajPxlJLDKOoJf4XJtsXfbztrIaHPLfxsjfAsshhnRZ1l2LDlnyUBfES
JtsX/fhzJquBIc9tvJwWYJn5sA58Rzx8pOAJ8BsKFdNk
    "], {{0, 43.5}, {172.5, 0}}, {0, 255},
    ColorFunction->RGBColor,
    ImageResolution->{96., 96.},
    RasterInterpolation->"High"],
   BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSize->Automatic,
  ImageSizeRaw->{172.5, 43.5},
  PlotRange->{{0, 172.5}, {0, 43.5}}]], "Print",
 CellLabel->
  "During evaluation of \
In[94]:=",ExpressionUUID->"4f63f7e6-518d-e544-91f8-e2d0fe5f69f8"],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1: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
    "], {{0, 33.75}, {258., 0}}, {0, 255},
    ColorFunction->RGBColor,
    ImageResolution->{96., 96.},
    RasterInterpolation->"High"],
   BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSize->Automatic,
  ImageSizeRaw->{258., 33.75},
  PlotRange->{{0, 258.}, {0, 33.75}}]], "Print",
 CellLabel->
  "During evaluation of \
In[94]:=",ExpressionUUID->"bb08805a-8111-2e4e-a5d9-515e74d4f0cf"],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1:eJztVkFOwzAQjODCkS+gfoIrp4hrEQ+golS5FKlFQjwhr+DYh/QdfYuZdqTR
1uu4oQkIIY/UyHU2u+Od9do3s9fpy0VVVesrPKZP73er1dPHwzX+PC7XzWI5
f75fvs0X89Xt7BKT+xef+O3HoaCgoKCg4H+hruumaX7O/3a7xQG62+3O+LY6
Rtu2nDzP2xlAZjabze/EGojJZOLTMpa4SIKVQOgpLmjAss+rIm4SSXHHBbIR
idsT3xIXIVhImtcMjPPcaKZ6RkLUGbw3QOJ6syRU5Lrw+xCwAQHIgRk8aYaB
4iqovMnMh7BsZck9ZVcarYIhYFYfYAnnE6i/+soWlSUTUU2G8OJSQXzIAd5q
Ce0BXdzExA7onNngQJnUzkUgLSGThGSb8iG4ZHnmYHKAJQA/qlXWQ1eI0LFz
kQorLmwYi/WGJ70xYyc3ZtLAksHAFqFwRltm1QVXul2njOXGVMiDnbStWOOo
/LoaoC+tZAiVpQ2BV1ymUhSVvRablOCkuFHmmVVbyZl9Iap5cUnD52eguH3O
goHinvSfZDJQXF+of1xckbHzQ8RlhWdYeW5KhbzBiVJq3SrzfepHjdciEyJk
xU124GSIYFquhW/LmTNoRHGDOW447vJ8UtzQcQXKcJO4unhYkiw8UvIXquSx
IkQ3imSInuKG484s8j5EcFevqKXbo5aQyn3EjQ4+fsss2aB2pbZf2flM6goK
CgoKCgpGxxeX2iaP
    "], {{0, 12.}, {119.25, 0}}, {0, 255},
    ColorFunction->RGBColor,
    ImageResolution->{96., 96.},
    RasterInterpolation->"High"],
   BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSize->Automatic,
  ImageSizeRaw->{119.25, 12.},
  PlotRange->{{0, 119.25}, {0, 12.}}]], "Print",
 CellLabel->
  "During evaluation of \
In[94]:=",ExpressionUUID->"2add9ea8-e4a0-dc4e-80ca-63db6d46698f"],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1:eJztnU+OK7kNxgsJEARZ5QgJfIlss2pkO4McYAZ5GXgzAWYCBDmCT9IH8Tl8
FkYxYYIWJZVUVaqiqr8fMIN+fvWHIj+Sarrs9+cf//XdP38zTdOvvw//++6H
//z1l19++O/3fwx/+PvPv15/+vnbP/7287+//fTtl7/8+Nvw4p/Cf3/43TT9
/2cCAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACeuF6vHx8f
R1sB2kDUAAAAVIKWMSgIHADgxEzTFKoc/3y5XKTchRdvt1vurPv9HhXGcO70
4vPzs9WMcPrj8bB3CVfrWoHDGrUHZtHLDOZtYkO4+zKn9UOWWbnGL6gcahcP
qcWGH+SVpJNr9h7rlTNQ4JLHL+DwqNG6wG3lh9Yct6dDOTVY8VTCIqkJUKuc
vMWOdqnYC5ratr3eYaMPxrRG05t4HCqHnLUMGi1qB/Y4Vzu0TfywIMetGaOI
x5VyKunX6Gmo2G3CMrV/hV5PL+cXNBAdrF1xecIBXSAkvhQb0JqhOSFtNYFJ
cn0Sltk0HWI7ly2zgB8h3Z7Qa401p3w15dAi8SQ9k9t71LNyOjRK4Dbp+36i
RksDt4kfFuS4NQPKqTmrshfnqFda017IVeyof8Ve1tR69Ho/jV4TVlf5S403
8ThUjreWQaNF7age522HttWsg6nPcWvGKOJxpZwmejR6Gip229Kk9i/S63ku
t3g6JLtfEVJwlEzV2Gl6ziaTKK1t+VnP8fivwivhynKFcEF+Q1bQAbVCCkvT
N+X1yhXkYG3zrBSXTYdyLuLbRSWFz2L35qaas0IKV86FtYdb5PjZw2gE5XTy
UpN4kokpS+Zp8+MJ313Xai2e6CI1JSgnHv+Bk6iJMdY8GjBq1Ng7eviBKnIc
ytG0TodyvVhsk6slF0Vm0yhesjufpumQq9jRXr2eGptaj16/plxTN7fYXw1y
eBOPQ+Uc2DLGLdd0XI/TBhy1Q4vM6OGH2RwfVzw+lUNHN3oaKnZHdTQ6rtfv
2ejDujhSi6dD4Y8cSrmIRFbP4qznozEjvc9dw6X4eJaWFFuxs2bMGA4Wb4er
SbzkymKSDVOBxdMhOVFWJEvmw2QELS+yA8XJmhqDtQeSL27olujcMs6VQz7E
I4msDeblyzKFyPkiHtuwKq1Nisd54LR75fikecNFjVq6fCc/WINzd4dy7GVr
SIqn/JEEbuLyR71DCxeRE7nR6xObpkOuYkd79XpqbGo9ev2act3DLdfX5xoq
3zD1Jh6Hyjm2ZYxYrunoHid3OXCHxvTwQ32Ojyget8o5vNHTCLE7vKPRob1+
n0Yvwa2fDoXL2jL4+YQvogdTTHQvfa4cw9cUH5ISYS7daoSk58PiE7mdmGRt
K7NyOhTdjg/g1zl9JNMl1x6pZ97qlR85qpNbOPRNO0a3yiEf4hHbpvdPtU+p
z+HavYes6GLeZai8tRWP88DpY/jnpHkjRo0af53v4Yf6HIdymAXKoZR4rP26
QOU2jfptOyu/1umQn9jRXr2+tan16PVrynUnt1CLZ7yJx6FyxLDpoJYxXLkm
Bz1O27Zt4Fp/ne/hB6p2xXDi8aycYxs9uY+dh45GR/f6HRq9LLByOmQnXbLM
8IMIyc4xklbZRtZDSNEt6NDpELsoqSIe/fGVZfa7YDo0GTg0+pgebuHMspfN
4Vw55EM8kT0c8cvzucSkHgp7D73kXAmqEY/zwCX7vjVvxKjR6unQSj8UchzK
ybFYOfQuHqsEsa3wlqJ9GzG6SKUl3mJHu/T6BU2tR69fU647dbHCxS3exONQ
OZodWsYJyjXt3uNm2WGHlqRT52JsdpxAPJ6Vc2yjJ/ex89DRIlN79/r9G/39
ObSM7lhzVpRl99fjYVwSKfPk0t18W5cV0l1Nn65PqCik5F30NZPP6VmPkXok
rAa74efKkExPURFPdyMbJPdZOTyw/Xh9InXBdMgeY+d+m7slVxjLbvGsHNpL
PAUX2VtL0b4/Z/u2sCT3HvelH1VIisd54GTQfX195D9nXr+UT95lfdTIBK5g
w+Z+aNr8QDnCYuXoG8kCBVkpXy23abwXvzKxXk7eYkf9e31S8OXYder1a8p1
py5G7x+HmXWLK/Ecohzy0TKSjFiuaa8e52GHVrahU+ei9xzPMaJ4dtsdtab8
4Y2eRojdDh2NHPf6nRv99f3ZoYJbokjpZU6vb0N6qOfQtMEf71+aZIVEr38C
WI+qckL6TH0Hl+0gH+bLx5Ieu6tZWcF1t/fvzopSNTleu6hn7bSdkVWS3boI
rJwOhXNz2t7WLdfXxzZ1fGfd4lw5m3spJ56ci+hdPPp4vgtfkC23/k8KTzyQ
M1I7pPx7os/AiSXyMGfOvH1SfsOoUSpwORs290MhxyOgnMi8euVQRjz6dfGt
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
Ib+S6CqE/Poi+bXPdqjJMD0V0ddJGpabDhVsi+zcrdHbyUzBJ50EUzmhSrol
Nx1i2z6e0HuayBBSX7nSVLAVej88vb4wSj+KptX+8f6NW8n3C27v3/RF+dr4
mfpqMjtn+DBfsZVMt7uaihc0f1PfWmZdkZwbX1L/bKWs/fb65/bu72N5cVHu
dlQh+HDN8lbEbdTEmNvrsxs5C1cGLhc16hY4G7WCDZv7QZidDg0qnt2UQ40p
r18Xx2rZ8JEf708XRwufKr5Rsyxpz7Gjrcu1YNVeEzttZ2SV7FH1jnHldCiX
ceSji7lSDh0nHg8tw4JyHbEs5Xvv0JBf1sLJ35bMgvyKWJlftNd2qGCYVqC+
jnWsNSy3f76+vqOyMAw5pNFb5yd90nX/PKWmTLNumVLTIfHz7f3ruZKqIEyH
QKqjLeby/q8MTHMzYTsM38SGwnJOI/iTRY2KgbNR62dDkysG5XziaWI3OfXg
S8XukHLt3y2LOUo8HlrGuJws5Vt3aMgv5FdXTpZfrSRD6cGw3ngI1rG/ceSG
qPK3u1kCfMLzzKZPRK6HJ6s9bprraDw4PY3gTxY1ygTORq2rDV+E84mnkhPI
6YvEbohyDfHM4qFljM7JUr5+h4b8mgX5tZ6T5Vc9yVB6MMwbZ/VJbjokjxTu
bxIAAAAAAAAAAAAAAKfnfy7Ks38=
    "], {{0, 24.}, {1159.5, 0}}, {0, 255},
    ColorFunction->RGBColor,
    ImageResolution->{96., 96.},
    RasterInterpolation->"High"],
   BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSize->Automatic,
  ImageSizeRaw->{1159.5, 24.},
  PlotRange->{{0, 1159.5}, {0, 24.}}]], "Print",
 CellLabel->
  "During evaluation of \
In[94]:=",ExpressionUUID->"5b7b1a22-ac29-8143-853c-1925cfa44280"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Configure MakeUnet", "Subsection",ExpressionUUID->"94dd54c7-341f-7148-b9e2-eaf1a6a7570d"],

Cell[CellGroupData[{

Cell["Example configurations", "Subsubsection",ExpressionUUID->"06d43d8d-b912-a34c-b781-4fd0e03e1253"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"netSumIm", "@", 
  RowBox[{"MakeUnet", "[", 
   RowBox[{"chanIn", ",", "featOut", ",", "patch", ",", 
    RowBox[{"DownsampleSchedule", " ", "->", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"1", ",", "2", ",", "2"}], "}"}], ",", "2", ",", 
       RowBox[{"{", 
        RowBox[{"1", ",", "2", ",", "2"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"2", ",", "2", ",", "2"}], "}"}], ",", "1"}], "}"}]}], ",", 
    RowBox[{"RescaleMethod", "->", "\"\<Pool\>\""}]}], "]"}]}]], "Input",
 CellLabel->"In[97]:=",ExpressionUUID->"c7e77745-9573-ea44-9711-9abbe3498a02"],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1: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
CvzXm27zYYeivnpJ0eTc/L0ph3446vVNWr99tc9M0cdJf7mkfSk2lVO+zEW/
fdOZCCCcTNdsKJL2/bWXbx929/cbO7vVn6exZ3vcsQcAKiyVXm2OdqtfMqY3
Npp6+jKHhyXOuYjjpCn43XlmOhMBhJPpmg0VlVxJt/QPHp+cyBhpT+Ov0dW7
YQAAlE+uDoRHR8cU9Z+urVe4PGYh7TPTmQggnEzXbKi0gYmpybl5ecp3uj49
69VDj9GTBwAqI9c3iSPT8bGZ2QoXBgLCdCYCCCfTNRsqLXN42NTTl97Y4Kd8
4zuK+tKqzze+xnW7AFA+sYVEc7T7bl+/9oveqdW15t7+o6NjUwUDs0xnIoBw
Ml2zwQD6PKXAL5+nFOzVW2HwGNyHHwDKJJVe7RwcpoOM9kt/B5nMza7e9WfP
TRUMjDOdiQDCyXTNBjPGZmZHpuPydDwW55+2oQ9fSv59o/dpMFg8AAgfPrbI
94aJ5cfa733c6R8c+iRmomgQFKYz0Vfi8XhdXd2lS5cqudC6c9euXfNrnrQK
NMNoNJp30fX19X4tFILJdM0GM/g6uNTqGj/lG1+n0qv0ccwd+M0WDwBCho4t
3Jivdd1hB5nMnYHB91rbT5R7CEAN8iXYXLhwQVIuhWd6TAHe+8srn/YvXrxI
ZXafhlZHWxF6iXshOe3nPX3IlfZpJP3L/bXgiPc6x63HO6fLa/mNVvE7qI6n
HcZlDvS+yxtKD3jXMl2zwZj1Z89vdvXShyw/TSw/dvwUBgAoXefgMLfq22/8
tfF8KxLtefdOW/f9cRNFgwApPmDZAhUnoqpI+15a1x3Tvi9fBCDt+4v2HNr3
+P3S/lV/pqCtKm86vd3yNQ3N3+Wtl7RP08h5gemaDSZNzs0PTHzVb9b6cpc+
cNXe+/RYfngLAKBEdEiR23/x3/HYV50JHywtv9faTlGfhsXPUoZLCaYVkqpy
unCGm/cl7XNDNwcnSVx8UsBxl1tN6SWc9mWM2o5qb1zltlNpd3WP37wspuZ2
L2mfS0UL4jDJr+LF8apJ+WVie5G0dmNu9VVXljeLNE0LOffhDWtfhbxN1rXG
nvY5e/Nb43Emaiv9xTOW03mf46u0BZmu2WBSNpttHRhaSj1NrqTlZ3Y55DdH
u3FbHgAoHV+TK3f35b6CdITJHB6OTMd7xyZ6Rscb2jop7e8dHJgsKARAoZnK
ESVPDuHcBJo37fM0FKK4b4xEZUlWnHV5trwIGckL4vHuHXI46ksJeUo1PEv8
diRpX5ainc5Y57FfXsL/UtO+FJv/JSN5DurKWk5t+y7t0vb8X+PsaZ+3T0Fp
X9uk/P7m7fTFaZ8mU19rumaDYZvb242d3eMzcx3D//lb7XxnvCvvN0TaOrjx
DQCgaHQ8oaPK9abb/I0hxf6rjZEty+Kf+dva2YlEe0anZ9qHPjZdUjDPYwpy
x/GbA62E/Fxpn8ZL9FXTvoRebvq296bmhM+zynslrPViA75aGMvzdbKS9qWj
CD/VCiazdUn7agFk6dqK27O9tPm79xsHy5b2pe+N97TP3X7Up7zZtZ3HTr7r
QdoHsndwMBqbGZiY6h0b/6Aj+u6dNunDf3r+wzfozAMAJeILghpaWsdjccr8
lPble8NsNkshP5F8klxJTy88NFpMCIS88UmVa0ppbFcDsC9p395Rx3s3bF/S
/iUFz8HlCwV72ldPDWS897SvFr6u4rctqi5q2lc7Vgn3rccvkT1Ee0rvo8vL
uW1fO90wXbPBJPqopU9Y6TS7lHrK4+134KePaW0MAIAX3IeHEz7fhFP+FXv4
qHds4vTs0iHcZh9OfW3bt15s5JTbUaoddfKmfTUw1zl1ovCe9h178jCPaV8u
RpATH1kvx+sFtLQvfYG0ydzTvmMbslzaoJUt7yrUDserdC2ntn3Hr4e0hn1L
uUzDyneBtvT2pweym5mu2WDeyvoXH3Z0UdrvG5+0/5c+qa833aYP6IaWVvTk
B4Di0NGDb78p3xhubm9Hoj27+/tmCwaBUlSw0mkd7CWySid56d/ukvbtbeCO
4wu6xYq8VjtrKCjtS/cbWa56jS3P2X6ZLb9K6/bj3pNHLbBcpOCyCrlODWqN
tvG1DeUl7Tteh6t+t+W+t2h34OTFma7ZEAj0gdvc0/9ea3s2m1XH80/h0F/6
mKbYjx/YBYCC0HGDfzCXvzGUqH98ctLSP5hcSRstHQROaTkL3MjFyPyUr2I2
WySoGNM1G4KCcn5z78BIbEbG8C9t8WP7LbIBAPKikN8c7e4bvS/35GGTc/P3
pj41UyYIMNOZKMzUn9a1d8WBcDNdsyFAdvf3Gzu7N7e3ZUykrYNv0UOxP5Ve
vdvXTwP68wCAF3TcoGMI341HPW6kNzaaevoyh4cGywbBZDoThZzakwdRv6aY
rtkQLMmVdEv/4PH5j9dzNx5u5L/aGOGPbPTnAQDvtG8Gj46OKeo/XVs3VR4I
MtOZCCCcTNdsCJyBianJuXl1zPDkFCV8ivp8oS7fnBMAwG48FpcegEy7ke/I
dHxsZrayhYKqYToTAYST6ZoNgZM5PGzq6UtvbMgYacynB+q9sgEANHR8uN50
u6GllY4V9tv2plbXmnv7j46OjZQNgs90JgIIJ9M1G4KIPpEp8MsnMn1kR9o6
KOrzr+QAALjgq3so8Gt9eA4ymZtdvbivPrgwnYkAwsl0zYaAGpuZHZmOy1P+
vXt5jOZ9ANDEFhJ8s83xWJweUNSnv/RYJhiYmJp6sGCugFAFTGcigHAyXbMh
oPhKutTqmv1fd/v6tY64AFDj+Fr+xPJjHq42RrRbbi6lnrYODGm/6AGgMZ2J
AMLJdM2G4Fp/9vxmV+9BJiNj+Kcwr7zfYL97NgDUMr5JL/2929cfaevgRn6x
u78fifaod/cFcGQ6EwGEk+maDYE2OTc/MDGljWxoaY0tJOzX3wFAzaKoT0cG
uaJf67HfNTo2u7hkoFhQbUxnIoBwMl2zIdCy2WzrwNBS6qmM2bIsrdWOxqBj
DwBwBx7+hQ71iv755WTH8Aj68IAXpjMRQDiZrtkQdJvb242d3bv7+/Z/Ucin
z/RIW4fWjgcAtYlbAyjwy4X8Wzs7kWjPzu6e2YJBtTCdiQDCyXTNhiowu7jU
NTqmjYwtJDjtJ5Yf239PBwAgm822D32cSD4xXRCoGqYzEUA4ma7ZUAX4I3t+
OSljKOFrHXTRmQcANLGHj3rHJkyXAqqJ6UwEEE6mazZUh53dvUi0Z2tnh59u
WRb3y+W79FDUp/DPP6ljtJgAEBSb29t00HDsBAiQi+lMBBBOpms2VI355WT7
0MdyqR3/wC7fcO9qY4SeUtSXBn8AqGXHJyct/YPJlbTpgkCVKT3VxOPxurq6
S5culT4r7+rOXbt2rZLLzaW+vp7Lc+HChRJnQtvTv3KBMaZrNlST3rGJ2MNH
6pjhySlK+BT1G1paKe1T/jdVNgAIjsm5+XtTn5ouBVQfiiUUUClkRqNRekzh
udDAWfm0f/HixVJCdflcOJN3Mt7IvMFVnPbt44tGswrOCVFoyJkm7Ycykh5r
p3umazZUk939/cbO7i/Sq1ZsZv2ju+nGW4Nv/yv95Qezv/ufyfc+4Kcuw3pr
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
2kilKZXb9vm/nKwk/LtTIxnb2d2LRHu2dnb4KWU8inzSuotf2qpN9L6r92Xa
3N6mnUQ6fZ2e7ZOyB/IZKP1V91L1hNSdfZ8ECJMiUpDaYmxPQYyDJYUuecyB
M36GHvBT+WpAnjq2lgeQ40ZQv/KQaK2OJPRCHs/bgZXj1EktJG9wGa9ubS4n
F4a2Ob+E3xTHd4rZV4fZ0776DUg5vlngQtJaUDm5MLLz5FpN+w6mvUe8Cvy+
yEjrfH9WyVa1r6bpmg3gP2lHZfa0L+2oFLpoyPVyx//OLyfbhz623z6dkn9z
tNunNYBqdXxy0tI/mFxJa+Nlp6J9T2vbl/FF75MAoVFEvrJnPOvFzuoSMl3S
vjqB5K4qattXg5/WZp6rIV22AD+VrChJ2/dC8htBb426VbnkXAwukpSBpo+e
4fLkeqdobnJ6op1HaGm/At+ASNqXnYefOq6mugXUDS5rwf+SkTwH3iCymvaV
clxN0zUbwH/Sb58Gikb2tO/eR1penqu5tXdsIvbwkTqGcj7fdH08Ft9CtaoB
ub7HmZybvzeVsx8O73Jav30aaIcscZ8ECIci8pVj2qegJSMl5Lu37VvnbarV
mPaZtP2qG8Qx7WuR3qWV2Eec9rXiyUi1LVrSvr3M2julNYPXvfjFhJb2ZTXt
O4yPJO3z2Yo8ta+mWirHtK+ekcmqqdvBcsr2jqtpumYDGKb1qfDSTWJ3f7+x
s1v7ySTuve94zSaET6Stwz4yvbHR1NOXOTwsceZF7JMA4VBEuOJOC/aRNZj2
mdarxzHtq9vHevFbj3IXTGuadtzIWqC1j9TSfq5vIhz77UuPmnKc0VjnWV3w
buayL9nTvnpqIOO9p32mrabpmg1QlZIr6Zb+weOTExmDC3VrBP/CAt+FSX3T
j46OKeo/XVs3WDaAaldEuOJUoyU3l548HJ+0ZuRcad8xRwVc3rZ9rQ+PpfSc
KWvBZHuqtwlyvCON97Rvna1vriCd6ypdnlWZLk/g00/pg8Sb2uXGO1ral75A
2mTuad/xGgR1NU3XbIBqNTAxNTk3n+u/fCt+NPWHTyq9GltI0Jur3XB1ZDo+
NjNrqlQA4VBcvlI7oki6Uy9UlCml1dRL236uiygDSF1Z2QL2a40t2xWgsnG0
8eVo51fPntSlqBefahfkqi/P9U6pb1Od0plfHcmJ176gclBvLqpuYfvS7R2o
1PNTbWRdjrRvKRcp80jH1TRdswGqVebwsKmnL72x4fhfCoQNLa30t8KlgnJI
LD+OtHWoffXHY3H1aWp1rbm3/+jouNIlAwiXMgUwgGqh9arS+lwVzXTNBqhi
lPEo8NszHjfs43Ld0OC7LdG5W+fgsP363INM5mZX7/qz55UvGEDIlJ5qAKqa
2vPKxx5Hpms2QHUbm5kdmY7LU0r4fGcefjo8OUVBUZ5CleIfSqa3kr+y0frw
3OkfHPokZqpsAGFSeqoBqHZqTx6/Li4wXbMBqhtfm5laXdPGJ5YfX2+6zW3C
faP38cNbVY3O2ujd5LM2buHn8QeZzJ2Bwfda20+U67UBoGi+BBsA0Jiu2QBV
b/3Z85tdvRT81JHcwk85n5IhZUU071cpuesOvYNXGyP0btIZHLftbzzfikR7
3r3T1n1/3GgZAcLDdCYCCCfTNRsgDCbn5gcmvrr9jvXlLoXALcvi5l96EGnr
QAf+6kXZnk7c5KuZ2EKC380HS8vvtbZT1Kdh8bOUwRIChInpTAQQTqZrNkAY
ZLPZ1oGhpdTT5Eqaf2aXQj4FfjUoQjWiN5FP2aSRP3N4ODId7x2b6Bkdb2jr
pLS/d3BgtpAAoWE6EwGEk+maDRASm9vbjZ3d4zNzHcMjPEbagU/PuvGbKhiU
Qt5BSvt8FQb/pNrWzk4k2jM6PdM+9LHJ8gGEi+lMBBBOpms2QNXbOzgYjc0M
TEz1jo1/0BF9906b1oefEiMHRQiHbDZLIT+RfJJcSU8vPDRdHIDwMJ2JAMLJ
dM0GCAOKf5T6pCP3Uuqp/Ity/vWm23zRLjrwVxF6s7Q7bYrYw0e9YxOnZ5dp
4Db7AD4ynYkAwsl0zQYIj5X1Lz7s6KK03zc+qY7vG71Pw/DklKmCQRESy4/l
Tpuqze3tSLRnd3+/8kUCCD3TmQggnEzXbIBQoRDY3NP/Xmt7NpuVkXKBJ1SL
8Vicov7VxkikrSO2kJDxxycnLf2DyZW0wbIBhJjpTAQQTqZrNkDYUM5v7h0Y
ic3kmoBiJIVJXLcbZPTu0EBRXxs/OTd/b+pTI0UCqAWmMxFAOJmu2QAhtLu/
39jZvbm97fjfVHr1amMEDf5Bw/Fe7XCl9eRJb2w09fRlDg8rXjSAWmE6EwGE
k+maDRBOyZV0S/8g361RNR6L4yb8wXS3r//0/A3ix6qjo2OK+k/X1itfMIDa
YToTAYST6ZoNEFoDE1OTc/PydMuyKEPaYyQERHO0m87C+F6pw5NTWsP+yHR8
bGbWUNEAaoXpTAQQTqZrNkBoZQ4Pm3r60hsbMoab9FPp1dhCQgbcltM4fkfo
jWhoaZW++mqn/dTqWnNv/9HRsaECAtQK05kIIJxM12yAMKOUSIFfS4mdg8M0
ULzsG71/tTGCXj3GUbDnW+vz9y+c+eV9Ochkbnb14r76ABVgKgtdu3at7ow6
MhqN8sh4PO7jsi5evKjO03HRXvj7Ql7ZS5cuFTo3dzTPCxcu8GNa5bpzMpLV
19fzeHrgMjeZjNBayCJULnOgtZP/0gOtDKUI/mqartkAITc2MzsyHddGUp6k
wE+REg37xnGnHcr29KZcb7ptv8f+wMTU1IMFI2UDqDWlJK6iUTqiBM5xV0ZS
yqKYxMnN37SvJmrHRXucSTle6G/apwXlCtX0L1nWxTMFzTlX+Wk+Eo/tJAbT
NIUu0UVVrKbpmg0Qcnx1Z2p1TcZwsKTBYKlASAcePvNqjnarP6G7lHraOjCk
/noCAJRPQVnIX47Jqtxp32XRXvj+Qh/TPmdOWpBjDKaR9C/rbAsX0cbuGNdz
LUsrEr+nhS7RfZ7BX03TNRsg/NafPb/Z1XuQyfBTCpMULNVICaYMT07RQG8H
X5x7enZnHvnCZXd/PxLtyXUnVQDwXaFxyEdI+45lK45ETS2aSici6WrCgZZ7
N6kdV3KhueXqXuXe4m2dx2D+yqbwdXJQRatpumYD1ITJufmBiSnHf9l/wgkq
o3NwmKI+xXu+x/54LE6ZX73fftfo2OzikrkCAtScApKW3yqT9mlW9qgWnLTv
3p/cO2nTztUQXX/GOoumVBJpAPe4te1Tcs8r91fxsnx8Q6toNU3XbICakM1m
WweGllJP1ZF8ue71ptto5zdC7obq2KtqfjnZMTyCPjwAleQhYZVLZdK+RL68
i/bC9xd6CZMeZ67RznEkHmudVSQ/56U1cdML8zaYS68bX3ryVNdqmq7ZALVi
c3u7sbN7d39fHSm/5RRbSJgqWM3qG73PnXb4yly5Mw/Z2tmJRHt2dvdMlg+g
9njJP2USwJ483PHDZVaOL8z7Kpcl+n5PnryN3uoWtl8oXZfjNkHa++LxJEUu
X6UHPt6Qx6qG1TRdswFqyOziUtfomDqG0j4N8hS36DGCTrgo+Usfnmw22z70
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
AAAAAAAAAAAAAAAAmfU/kY1FOA==
    "], {{0, 285.75}, {763.5, 0}}, {0, 255},
    ColorFunction->RGBColor,
    ImageResolution->{96., 96.},
    RasterInterpolation->"High"],
   BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSize->Automatic,
  ImageSizeRaw->{763.5, 285.75},
  PlotRange->{{0, 763.5}, {0, 285.75}}]], "Output",
 CellLabel->"Out[97]=",ExpressionUUID->"1ec9b7c4-19dc-9f49-952b-1c2656f9887b"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"netSumIm", "@", 
  RowBox[{"MakeUnet", "[", 
   RowBox[{"chanIn", ",", "featOut", ",", "patch", ",", 
    RowBox[{"FeatureSchedule", " ", "->", 
     RowBox[{"{", 
      RowBox[{"24", ",", "50", ",", "26", ",", "12", ",", "400"}], "}"}]}], 
    ",", 
    RowBox[{"RescaleMethod", "->", "\"\<Pool\>\""}]}], "]"}]}]], "Input",
 CellLabel->"In[98]:=",ExpressionUUID->"07199056-03f0-3941-b05a-7c0bd3acc991"],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1: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
S2gyCYTWiw2ePFvJRTySF8TjvTvkcL7lx3w+YjliuXd/Hi42L9ecm7kImYNr
277rqyT5myubtwCyCjySN6zMn5dOT+OnzOQvBeNzB4/1dcrbti9bwHy7zcdS
fjkfsc7SPr+JvNtYud9N80QpSmzb1twzeUzxdZOZaZ8PF3QEoIHGyyk/HQoo
/9uOJyeladsn2YOD6df+4cmvf3e4uRnsUZdmSLOlmdMiqqGQAABl1hjvpIGb
9z8ZHpn43t+F/DhZQQdz+mjmT2HbmFyfzs7PcVvaPwm6bZ+SG2d4SXq50j6N
5yn5hZL2JfRyg6etAVlaQXlW0hrswWxMNgtjFdSTx5yD2VwvEzjTfq6+PbZ2
77xpnx9LGJZ4bJ31m5LvR2xhnkM1/4umCTDtO7eAuS5yOiat98I8dbIFeN7C
Pt+aSud8v5y7eiDV8+TFtG8eBMwePq6tByclS/tkf2V17s1/nf6bH1vJou57
Zg6bn6Wmv//3C2/9/GBtvXoKCQBQZnd6etOZZXpAmX/07kD4j5OVcjD32bZ/
YqR92+d4GdK+mViCSvvOnOm/L32J0r5r07oVjrTv/GahFGk/1xbg+fNL+L9S
PNtsPb6UkU5KEb5YwOzpxFz3tECq54ln2re1CUirAn/9d1LKtM++bIlPvfzq
5Eu1cz9568mvflPw8OiNn6a++crUd36w3n03tIV8+MZPJ77xndRffz9XIeua
mmMtbRvRvR0TAEQGpf3GeCfFfn5Kx8nJv/pe8luvzL35s8gfzEtaSNd++7k+
nV2/o+eX04PSpX1pnpW0L0HUZ9rnf3HSq3HraeM/7bv25GEFpH1bRxrL6JGe
K8JZZ90zbI3YRaZ9j548/tO+vE3eW8Aj7Tu3gHwdY+vA7zzF8O6CZevgFL1+
+85tYjtpKlval278fEygAwU/pfF8PKGjRyn67dvsLS1v3Btdjt3K1N8sYKAX
0stL3VQeSCGfzMw2dPUcHh7lWgpFffn0BAAIm9mFx67j9/b3b3R0L00/rJKD
eUkLSR+7tnvy5Pp0dn6Oc/7nKXlMUJ/jlqODvcRI6YostxzxSPtCsqXr+HPd
J0dea8uW50r7tjmYpTJvpWIZJzvmSLM/tlzQWkzat9z6eJ8r7csq5O0QZetP
xQXw2AKcWs3Zul7S65r2zd5Bzi4ukem3b+sEJVvPuZWKr5veirlXDxRseHJq
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
rn58J1N/s//t/5f+8oOp3/5/i+9/yE89htXmNnr50Vfb2msDAHZUMaV2FzBw
7V76PN3Q1bN/cKC9NlB5rLO0z9GlItI+LY6CcdkW51+RaT9wSPuBqz1lnW1b
3u056vMEUpW0azZUko3B4cnav534i5dmf/TPi5evPPnVbx7/8sr85V8vXP41
/aWnfgZ6Ib08+Zffnv7Bj2iG2usEAF+jyvjg1R9SxZTaXcDAtZsOEVOv/hC1
GwpgnWVUzp+S9inGSOznNmdJMhy2uSWTXsJpX8aYDZ7OVlCajJbFSSlvEJX2
UtsJiP+0LwsyXyJFtX2jwassU5oRzjK+UOD1da6s5Uj75ncQ9ICemq8152CW
0zwL4IIxDpZybuWn45Br2jeXJYsz10XeUNvKyga8eErKJgU2Z2tuE/NplMg2
4TeXR0pl0a7ZUBkON63H//bO/drXnieGjr766nh/v8iBZkKzohnSbGnm2usH
UL1QuyE8OKtwCJcI5532pWmaXkKTSSC0Xmzw5NlKLuKRvCCJ0x5h1QzbkqI5
Ogo/Wdf2pYPZN14WwWvEgU0mMKMyryM9NpOwc/550z4/ztW2z9tcxvNkXAD5
l7m1zQk8toDHBFJC8+02H9vOMnhWnPZtQTfXu8mljd7FCOa2Nd93ObvRrtlQ
AbJHR7Ovv7F4+crBs+fFJwFzoBl+3Rj4+hu0CO21BKhGqN0QKtZZLDfbtz3S
Po3nKfmFkvYl9HIYtjUgS0L23zXdbEw2C2P5btuXYptcU7cZv81lyYkJj7Qc
Qd2cmxV02jfLLxvZ3Np5w3yuCcwvTXgR5mxlrc1vFpjZccUW4G3fjEQbby7b
tyFMTiG1azZUgEz9zYf/+ObRzk6wYeAPzYA7OzRzWoT2WgJUI9RuCBXLSHeS
WIJK+86c6ZrAXYUh7dvW1IpE2nf9doPH01N+ibn6znJ6fCkjvaQifLGA+f2O
k2wc7ZoNYbf7JD35Uu3u0y9KEQZ42Hm8mPrmK7Qg7XUFqC6o3RA2lqMF20z7
tq4jedO+2bekxq2njf+079qTh/lM+1wY25QePXmcaV9WWcactydPjaOnkJW7
B47/njzFp33LaJE2J3Y2WduuTbDydcGybZbo9dt33SbMfMu0azaE3UpDU/q3
vy9dGOBh8fIVWpD2ugJUF9RuCBvL0cG+xujHIv038qZ9IdnSdbz/tG8Z3zXY
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
A/Vzla58F2Ah7UM+23PzUy+/updZLl0Y2H36xeRLtTsLi9rrClAt7vT00t94
fSz57e+idkN4+I9YHmwd0SV0SSd56d/ukfaFxCrX8f7TvmV812CL0OdN+zIr
DvzOGzaeK+27rpftggKz21KuVcgVbiNMujaZ28T1SyhzpO29dqZ9s3eWOaW5
A3uUynYHTp6Jds2GCvDFtbq5n7xVujzw6F8u0SK01xKgilDa54Gq3qN/+VfU
bgiJgFIYALxAu2ZDBcgeHEy/9g9Pfv27w83NYJMAzZBmSzOnRWivJUBVaO9P
xFraZhce0+O6pubn6+uf1f7tk3//LWo3hIF2JgKIJu2aDZVhf2V17s1/nf6b
H1vJou7FZw6bn6Wmv//3C2/9/GBtXXv9AKpCYmx8JJlKZ5Yp8NPT5Mwshf/R
uwOo3RAS2pkIIJq0azZUki9b4lMvvzr5Uu3cT9568qvfFDw8fOOnE9/4Tuqv
v7/efVd7nQCqCGV7ivr0gNP+hmXx05PT2j35V99LfuuVuTd/VkztfvTGT1Pf
fGXqOz9A7YYCaGcigGjSrtlQefaWljfujS7HbmXqbxYw0Avp5U9mZhu6eg4P
jzwWxJ0NACAolO25WlHsp6gvXXrI3v7+jY7upemHxddutOdDwbQzEUA0adds
qF7Dk1ODEynXfyXGxuuammkYSbpPAADF6Bm61xjvpL8ypm90fPzBjGKRAE6Q
9gFKQ7tmQ/U6PDxq6OpJL6+YI2cXHm9YFqV9vkMgBf4N7KUAAaF4z113pOs+
m08/be4byGazekUD+Jp2JgKIJu2aDVVt9dnzGx3de/v7MoYSCMf79v5EcmaW
HiPtAwRlJJmiwM/deGTk9u5uLN61vrmpWDAApp2JAKJJu2ZDtRu7P903Oi5P
KYdw8/61hlvpzDK381PsVywhQDTQqTQPtgrVMTQ8NTevVSoAk3YmAogm7ZoN
1aV19LN/uvohDT/7qJHHZLPZ5r6B+fRTfkrxnu8HToGEe++PJFM0Bh34AQJB
dcp8Or2w2JYYtPXhqb87SFX1vHN21m6A89LORADRpF2zobpQEuAHFCdo4Mfr
m5v17Z3bu7vmlBT1G+Od/DidWabAX85yAkQAd86neG825sstN8nG1lYs3rW1
vWN7YWFp37V2A5yLdiYCiCbtmg0VZvDBQ26+e+fjVn5KD3jM7+M9NGZuadmc
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
MBg=
    "], {{0, 285.75}, {763.5, 0}}, {0, 255},
    ColorFunction->RGBColor,
    ImageResolution->{96., 96.},
    RasterInterpolation->"High"],
   BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSize->Automatic,
  ImageSizeRaw->{763.5, 285.75},
  PlotRange->{{0, 763.5}, {0, 285.75}}]], "Output",
 CellLabel->"Out[98]=",ExpressionUUID->"cfb90937-3921-1548-8d2a-fa969155485c"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"netSumIm", "@", 
  RowBox[{"MakeUnet", "[", 
   RowBox[{"chanIn", ",", "featOut", ",", "patch", ",", 
    RowBox[{"BlockType", "->", "\"\<U2Net\>\""}], ",", 
    RowBox[{"SettingSchedule", " ", "->", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"5", ",", "True"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"4", ",", "True"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"3", ",", "True"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"4", ",", "False"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"3", ",", "False"}], "}"}]}], "}"}]}], ",", 
    RowBox[{"RescaleMethod", "->", "\"\<Pool\>\""}]}], "]"}]}]], "Input",
 CellLabel->"In[99]:=",ExpressionUUID->"f9958e78-5c28-1f44-941d-fcc5b1f51b37"],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1: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
NNqZ6GvxeLympubKlSvlXGnNuevXr5dzvbnU1tZyeS5duqRdFvCBds2GoEMe
AAgr1G4IGl+CDQVUiqnRaJQeU3imxxTgvc9e/rR/+fJlL6GaJqOC8WPexgtt
VwEunSnpKkLMcq0kF1D0Ouadl49b+9UWj3c/OOm/tC5ZKS9Bu2ZD0CEPAIQV
ajcETSGhyoaTMGeqikj7tDqJZy4k7VPZ5HKmpJD2C0YvliRtQi+WhHwamTeu
y2WdiY9MWqzHtE8Hv6xUu2ZD0CEPAIQVajcETQGxyo4zKudhSfucoDj2cytr
+ixmc4SWdleaRTKVvSVW+tvISE50NJeXfji8LmZegFw07VsuRnjTpPzp81jI
YU/ah+Uqxt5obN8uc09axjhuAo/PuwlVgvM2vRaO10q1Z1xmp7kcr0/5SPOY
9vnllpHaNRuCziUPUAb4ZliaQh4AqCyo3RA0XuOUKwpFHMIpu3pJ+zwNZzOa
jGMST8AxnsMVL5ZXISN5RTzevUOOpR8OT2mG57yd5OXCxJzM/PBC2oR5E2j6
6BlO/uZ28Vx8beK4XZZyMtlvdvb8X7UkZudK+zTS5arQclEmL4202HtM+5ZL
Bu2aDUE3/fKrX80/Lua93suwMztHK9LeVoDqgtoNQVNQvHJIU5R2pIeze9qn
8Txl+ryLhaUnDycuab0XEr1qvHWqsSQ3MxtfqG3f0gJvfl4gkVvSvjm7uV1y
CZBru2RP2q8s7EsGE7fAp3Okfe7h4zK7eYGZPr80MBflJe3bL760azYE3dJb
P9+Idpc6D6zfbaUVaW8rQLXYSqdjc/Oz/9dbqN0QKHlTkMklbnGgMgOwL2nf
3iTr0txt4Vfat6RBxw8UHG89cEn7uZqaHfvtS5gs89cWVQT7UWru3stn3Jdg
6YHD2V76lXk5/qUfUQ168oBnq5E7y9f+s9R54Omvf0cr0t5WgGrRGO0cHJ/o
uPI2ajcESnFR6w8k7ZuNnHJnq9mhJW/aN3u81Dj1tPGe9h178rALpf30ix8o
8HZZ4rr3tJ9ruxzLaVmU5VMAj/uhelja9s0eUyb7x0NmV58a2ydH3u/SpQdS
AO2aDUG3u7A4/fKrB6nV0oWB/eUvpl6q3VtKaG8rQLW419NLf6P1kdh3/wq1
G4Kj0GD1AktHdGlFl07y0r/dJe3bG2Ydx3tP+2njswZLhL5o2pdFcQ40G34t
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
o8fdI2OlWDIAhIB2Jvr/27vX3ziuMo7j/S94HfGn5A9AiDcURYqoVoqAIKAg
IBKtkCFSBKqVqqGiSA2RqqR2ZOOUpLG31KEmwb04JLbXwU1i4nWT+Ba7tsf1
tbbhaR/y9HRmdnay3u05Xn8/Oi92Z2fOZXdG+s3x2TXQnHxf2QCCs7yyer74
9uLycn2rnV9akmrdZUIA4PKdiYDm5PvKBhCi0Xvly1f/Wccv0m5tb7/x93+U
J6fqVSGA5uM7EwHNyfeVDSBQve8PDN25W6/art8a7fvXzXrVBqAp+c5EQHPy
fWUDCNTK2lpbz98eTU1HQ6XZC5em2jpqKLMXu+XwyY/ud759ZWNz0/eYAATN
dyYCmpPvKxtAoBb73y8Vfjj4rUO3f/LLcuupiRdfrqHIgXK4VDJy5EdSoe8x
AQia70wENCffVzaA4Hy6FI3/7uStwtGFa+9uffLJ9sbGLotUIlVJhVKtVO57
fAAC5TsTAc3J95UNICw7W1u3nz1Wbj21+fHC7nO+W6TCz6b6nz0mTfgeJYAQ
+c5EQHPyfWUDCMtUW8ednz+3tbpa36j//0n+1VWpXJrwPUoAIfKdiYDm5PvK
BhCQtYn7pUOFtQcPGxH1tayOl4effkYa8j1WAMFpXNo5ePDgU5+TB41rpS60
q757gabi+8oGEJCZzjfu//HVxkV9LeXWU9KQ77ECCI7EkqcShoeHK2UYeUl2
aGlpyZl58qT9AwcOyG7FYlEenz59ur4dyCN/2teuavf0vapjN1AzPW2qfhxy
2mSc6vqqVJVdiZyodricD27rbp2+r2wAARk/0froUk+j0/7MhUvSkO+xAgiO
ZRhJvBpdsjUu7etueyLtSyct8tWxG6iNnAzyCeonkv8o2d894fWp1JOd9vX8
1DtTd6Od5NKZQqEQkfYBOG4Vji6PftjotB8NlaQh32MFEBxLLMm0L6HFpis1
3mjWdeme7naNOiZn2rfpfTftuzOxGR2QjW741xqix/cFyvog3ZP9LatrtLO0
X3WKWAcoNNRldFUb1f3d7e7MsL1XBz9nrcs+WqGlSrctpHrStB8L9vr2Vk37
sZNNuWlfz42ItA/AMfjN7zR00b4WaUIa8j1WAMFxw4+b9t146U59Z0+tJ2c+
c6Z9DeGWeKWVZOyv1AE5yr3F0Jle3U23aw7UQ7Qh3W5D1gFqi9m91d00nGu1
lbqqVdkboinR7Ym+ZLcbNgp9H6LHdxbWbuw2CjFPlPZjE/sW0aumffug9cYz
uZLHzh/fVzaAgGSk/Z3bg1a2ZyrfEXw0uXO9ZIW0DyA/izGxtG+ZM/pyhk9N
+7F1y7Ep05xpXyvRtKyzrLFpfE1ZyQ7IsRbvpRKde4/dd9hw9C4mthIj/xeK
LboLbbFSV7WT9ocGTfs2OqvN7juSU/fa1SjH6iZET5j25eOws9Sdmc+f9iPn
liG2kkc3+r6yAQQkI+3/92yrlZ2bVyum/d53d1r+YIW0DyA/izE1p/1K89WW
jnKm/cj5vrBG6NTvESQ7oPlKp/Q1+VvMrpT2Y3Vq2I4tnqnUtOygNxT2NLWr
T5r2kzW49TOxX1X+tC8fivtuJ2/WMr7A4t4mpKZ9/dQi0j4AB2kfgEdu5sm/
kscNn5qy3AXwNad9W/0urVT6gZTUDmiY15d0ejZjJU+ltB89Xp5RqZ82me8+
tTX2sa6mpv2MlTypCdOCaMY9CFRq2k/9o4mb2JP7Z8/tu/drleb29bHvKxtA
QEj7ADxyc04scLpfiU0GHne7hVI398bmSzN+RcfSvh2lacr9mrDbt1gHLORb
T9wf84y1np327Yu9qctmbKG+bbHBJruamvZjnbdgWSnta4vh/8MCv2ILyZLz
9rGf2cyYuq+a9qMvf4LJdftWue8rG0BASPsAPNpNykKjadpnYn8v8n1lAwhI
1m/yLMxJ6X+r+1rPm9vLUaW0vz433/36+dvvDWzPzn9WSPsAcvOdiZBFf6vH
dy9QC99XNoCAVP0FzsX5+fb29sEbN7bW15duDA1+49tW5OlKFF3p7b108aK8
mlEJaR9AKt+ZCOly/nNYBMv3lQ0gIHl+b398bKyzs1Mi/eDZtr6vfd3KwJnX
Ojo6ZPvczEx2DaR9AAAA4KuX879rLS8u9nR3dx0/4ab9nhdOloaGsmf1SfsA
AACAL3nS/v1y+UJXl5TrZ15z0/7Hfdeq5nzSPgAAAOBL1bQfLSy0t7df/+CD
jZWV5Lp90j4AAAAQrKppv++dd94qFnOmetI+AAAAEI7stL+8uHju3Lmph9UX
9pP2AQAAgNBk/XetFw5b2bnaQdoHAAAA9hbSPgAAANCsSPsAAABAsyLtAwAA
AM0qI+1Lwv+i3CuR9gEAAIC9ZeTwkeXRD3eT5PMUaUIa8j1WAAAAYH8ZP9E6
V+xtdNqf/etlacj3WAEAAID9Zfp814M//bnRaX/ipVekId9jBQAAAPaXlbH/
jBw+sj413biov/bgYelQYfVe2fdYAQAAgH3n4ZmzY88fb1zav/urFmnC9ygB
AACA/Whnc3P06M8mXnrl06Wl+uZ8qVCqlcqlCd+jBAAAAPapjZnZsed+M/qD
n0ZDu/qlTbcs3Rwe/d6P7x3//ebcvO/xAQAAAPvdozeLI4ePlA4Vxp4/PvHi
yzWXu8d+Pfz0MyPf/f58b5/vMQEAAAD4wvrk9OJ7A9Pnu6baOmoocqAcznw+
AAAAAAAAAAAAAAAAAAAAAAAAAAAAkFP/v+/84vQ5LfLYd3cAAAAA1E1bX78U
370AAAAAkMIm509euKxP5YFuebV4RbaMTU67O8TIPvrqb1//y1fddQAAAACZ
JKjrg7a+/ssDNyXtW27XlyTk6xIdCfayQ+xw2dleZZIfAAAACIfN29tkvs7t
66sa+3NO2suB+rcAAAAAAIGwuX2VTPs2t5+6RN8OT535BwAAAOCR+6M6EuaT
aT973X5s2T8AAACAPUpuB2Irf3z3CAAAAAAAAAAAAAAAAAAAAAAAAAAAAACA
pvU/Lmlj4g==
    "], {{0, 285.75}, {763.5, 0}}, {0, 255},
    ColorFunction->RGBColor,
    ImageResolution->{96., 96.},
    RasterInterpolation->"High"],
   BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSize->Automatic,
  ImageSizeRaw->{763.5, 285.75},
  PlotRange->{{0, 763.5}, {0, 285.75}}]], "Output",
 CellLabel->"Out[99]=",ExpressionUUID->"9cced53d-d7a6-f146-a538-6bf38a0c53c4"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"netSumIm", "@", 
  RowBox[{"MakeUnet", "[", 
   RowBox[{"chanIn", ",", "featOut", ",", "patch", ",", 
    RowBox[{"NetworkArchitecture", "->", 
     RowBox[{"{", 
      RowBox[{"\"\<UNet+\>\"", ",", "1"}], "}"}]}]}], "]"}]}]], "Input",
 CellLabel->
  "In[100]:=",ExpressionUUID->"cda8ee00-ccf9-1b43-b49e-ad4a77a47252"],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1:eJzsvdtzHMeZ9ondvdnLvZtrxvwTe7vBq72a8PeNHbZDtsIaWPZKGnosfZZG
IdsxH8byeqQZWfJB65BDMHUAAUECaBCnbuJEgiBInER0A8SBBEBSAImDCAJd
IAji1L2v8Aqvk1Xd1dXd2Z2V3c8vKjqqs7Oysp7qrHwy+63qE8/85L89+79W
VVW99L/Ty3/7wSv/14sv/uDV//5/0Jtvnnrp//nRqR9W/9+n/scPf/TDF//P
Z/43SvzF/1JVtUUrX62nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQ+wnnMTI56tNLcsNn+WxfNkefTg1
c7izg0paAZTUBZTUBZTUhRVKWlFJAACwjuTBwdpf2yZ/8FzsW0/feOm1O++8
m99y6813Zk79bPwb35198dWtiakKrKQVQEldQEldQEldWKGkFZUEAABLebx0
98Yrv5x+/qXEtfjBo0eHu7sFLvuJxNq5jvh3nln682ldcylWVNIKoKQuoKQu
oKQurFDSikoCAICl7Cecyad/tPT+hwcPHxZ+gVWXnaW7N39es/D6mxVSSSuA
krqAkrqAkrqwQkkrKgkAAPZy6423F37zlt4LrCz7icTUs6fWey5WQiWtAErq
AkrqAkrqwgolragkAABYyubVkevVL+w92CjSZZaWxLX4xFPV+xsb5V1JK4CS
uoCSuoCSurBCSSsqCQAA9nLn7XdXm1qKd43l5ear/7Y5OFTelbQCKKkLKKkL
KKkLK5S0opIAAGAvMz952YlNFPsyu/TeX+591FDelbQCKKkLKKkLKKkLK5S0
opIAAGAphzs749/47n4iUezL7Hp3X943NFlRSSuAkrqAkrqAkrqwQkkrKgkA
AMWgOdqV6aPF5ZXf1n7wXkMjv61raaW3A6NjwQuM9A9QIbQSuzIUe+a5Yl9j
D4+CHud+XkP1pIV37XN0VD212rura1PPnipZJf1lZLVjM7NfqTczq56IAjO7
To3rrNGGUlTe20JJKAkloaQWJW25mItQVBOqsE/HmqnOATenLpgy0LdCPS/+
+wIAVA7q9cELf0RXcrrU0MWEuwO64PhcY9UCKadckM99djbjZXb7YXJ2XJbD
9bWMV9H5O8nRia+X+Eymy+zoT15W658W7h/lukrXRlqoL5j84T+XppL+XT+p
zQMoPgS+yJOSaa/2OWX2nhoevnFm6dN9pAuyrV+vCiWhJJSEkuV1MeedphS7
LicueJ0Dbs5nhPtl6Y599AEAVA5s1FUfTgtdK1yXCEpUZ3h88rsKpLdy2fHr
Czbup+rekuWrK22my+zZrmTNH79e3vkga6+qzmnQRZLeyoWU6sYXxtTRtZSW
LB1W0Srpf4LU7lsqzJ0Cd7syyMoj89c/pszMen2CehJdmwfZFkpCSSgJJSvk
Yj71r7/knapCUX2k3wxY57Sbe7dl2Pmr3XH67xkAoPJQryc8A6B+SpcONvCS
WTX53vyuAlVjn3H+pDh9gevXSaqVawJErquSIWxdP1VJfnOn2qrCcl+cd+bU
k7+8uLpvKkf9Uca7edZtoSSUhJJQsqIu5q6e1OXDg9Q50+bebblfTj05z5YC
AIAj5MrAkwY8Ce/6iFfoqq66em9+11YppY+43N0b/6fnS3OZnfrXX7o6AroM
UiVd9Q9DX5AJma7hFXVmRmpLidzX55TZe2pST3bf3nBW7+ZZt4WSUBJKQsmK
upirHts7ux6kzmk3926rzqepc24pAAA4Qi4IcjGRyQG+i4dvmJV1ubx787sK
TCl9xP/3hz9lvHlW92V25NT/4HpKb5W2qmn7ghL/rJAJnkaTGxZEeYmulDvp
+Gfc4Jm9pyaldN8cYcuLqOTdPOu24TFRUBJKQkl7lbToYi63pIlQak8apM5p
N3dtK9+H3x6F6Ev+rA+1AACAgCSTyf39g6zZ/PqCxzt0pT148GXvubPxy/2H
2w8zXWYTS/faPq5fHJ84XFs/vP8geK9qRSWLx+7eXsn29fUeoaSuPUJJXXuE
krr2iIu5pkraggMAKIxiN1K65ozPzNZ3nKdl9Po0vS2wwNnbd3qHR+cXl3wu
ZUEePrZy9259ff2N6Wlavx/tGf+Hb8uys3R3c3090tnZ093tX0imXtWKShYJ
OuSLY9eGJ6dW1x+UZo9QUhdQUhdQUhfGlbTiYh6kkrmive8OSOGuJh6PV1VV
1dTUFF5UcKqOqa2tzZSnurqaMhRj11Sy9mKBvRS7kdKV4eP2zg/OtdNS1x6h
HqHwMqfmF6i0j9s6M13KAj5VePr69U8++eR8NHrtrd9d/Lu/l2W4tY3Su86f
dzY28u5VrahkkaCD7RwYpMP/9HxPCTwAlNQFlNQFlNRFGJS04mKetZK5Uoy+
OwhkS06cOEFmNRqN0jr5ZFonrx7c1ZTe2J88eZLqnDVbTsY++FFYZOzpnPqP
fUBWuEW4GgU3GfkmFLuR0mCfrwylXOrPfBLLdPPsk8v62lpbW9u5F19WL7PR
jz5euHkzyOZ0mR0+9bMyrqQVC5SEkmFboGRFKWlFJQtc6tqjxXYLjLgUcsuO
JcY+oLWGsYexLxwSkBuINAppLEKxG6nL2Gu5ONy+t/xhaweV1jkwODW/sL2z
48oQcP6ErqVNTU1tra1jb/5Wvcxuzy8EucYe+s6fWFHJIpFMJi+MjH11ujsi
lz4f/2J55eDwsHi7g5K6gJK6gJK6CIOSVlzMs1YyV4rRdwfBOTL2Mmkvxp4s
rpgZcchsadjZ8owlbcKWWFJUzyMBM5JI2WhfbDizek7el3e+NCdjr1bVOfa6
AifKBKzgUwe1TP+BA2U7eYTrYNXNuQKsIWXgzPx7hGxLb3kl19FTWmOfVgH1
HMkJlXV1dloqJlPZXIKjnG5VFtY2p2qHB/66qqNdtV0IxW6ko9en5ee8j9s6
B8djBRZIl6/o5av+F64gl9nVe/fOnDkzGY8fPH7sjXgs8DJrRSWLBPX7A9di
JejxBSipCyipCyipC+NKWnExD1LJXNHedwfEObJebGDErfkbe85Ddo42oWzi
/Zxj08j+k4tl5yOJvCNO94+oYSvL6zz0cDwO3D8gh6vN+1VLU3chJaSdsU+7
lZh89WCzVkAOgRNZWCmf905vo0eoJl8qxsMEn+P1knXGXhRQT7e6LvWXoYdz
bOz5JPLXxsl8NtUxkV2weupo1zk+ZTI0Y3GK3UipIxieuE6DfVroylD4DTiP
Hj/OmifrZZYurZHOzssDAwEvp7leZq2oZJHY3dsrTY//tz1CSV17hJK69ggl
de3RtJJWXMyDVDJXtPfdAXGOHTi7FzF1mYw9pXNO3lCMvfhbtj2uaWGZ7+Wi
ZI7XB3WK2DVNWpV7KI5agjoJLxm8xj5TcI5rNjursed18b3ihJ3jwCf51cPl
29k/80eUR6Ox9yqgHouMvGROXlBHSS6vzgoHPDVW4NJB/fKwpPKlKk1TLTFZ
L7Mrd++eOXNm23EM9qpWVNIKoKQuoKQuoKQurFDSikragmpgxL/pMvZeSxk8
7r1Ixj7thLkTDmPv/b2gGMY+kwJcPm/Cn0r1XMX6/NQiU9m2B/Z7R6Z8UPyT
E+cRfUw34qLgd5m9fy/1X0/LkhzvC2NfEJpKWgGU1AWU1AWU1IUVSlpRSVtw
FGMvk65i7MVzBjT2/BGbuqp0oTLBjX3aUBwmD2PvioRxlOhxzqAGlguuuyZd
e8/P2PuE4gQ39nKa/BXwMfZeBcTKuoLtvaMJ/xgqV4SS1TH2jDpjrw525FSa
bsRFwYrLrBWVtAIoqQsoqQsoqQsrlLSikrbgeILhxcNIQDubfMfX2KuzmlxU
2vScnlQj27psZE7G3lWCWis5LkbGNWqiGtUv95kWYuxdZaq1Cmjs5RCyRjS5
pp25Aj4K8EBDLTbtnbZpjb0a3uO9gdrGGHvB9ago9XvCiaYbcVGw4jJrRSWt
AErqAkrqAkrqwgolraikLRj0SyBs8FDCdC3sw3QjLgpWXGatqKQVQEldQEld
QEldWKGkFZW0BdOeCIQFeQiM6YrYh+lGXBT8LrPORvLSZ7Ic3p0LY18Qmkpa
ASkZr34BShYOlNQFlNSFFUriYq4R054IhAKODirlv4yVE6YbcVE4eLgd+8fv
HTx8WMglNMiy0X95vuY/yriSVnB5YBBKagFK6gJK6sIKJXEx14hpTwSA9Zhu
xMVi+rmfbk3PFPsyu/T+h3dP15V3JcNP75Wr8Wf/GUoWDpTUBZTUhS1K4mKu
C9OeCADr0dUYO0auvR/tzW/bvDf04dYbb6+d6yj2ZXbul69vDg6VdyVDzsDo
2KbjXH7pVShZIFBSF1BSFxYpad3FfHDqxiu1Z3jx6YKD9866+nHTnggA69HS
ElMFGPu5eyu/qm/WVQ1h49Lg1LOn9hOJ4l1jtyanJp6q3t/YKO9KhplI/8Bw
7KtHtt493zNR/QKUzBsoqQsoqQu7lLTrYs6uXt5S3522+w7eO1OBb/+1o/CK
pWDsASgYLS0xpRh7ug5QA+d5AEnnt7ROKfQpXQT4o4aLg5xZ1zVBZeH1Nxf/
9H6RrrEHjx5NP//Sl+2F/sOXFZUMJ4vLK3UtrZuO09jeSSuD//IKlMwPKKkL
KKkLG5W06GJOnTL3wgIb+Ey9M61LP84ZKD/ZflqhjygzvfWf+Q+OaU8EgPUU
3gwZ1dhzw6e3lMhNnvOw1XddOoo0Y0/s3V+feKp6tamFLol6r7F7DzZuvfnO
3C/+vUIqGVqao1208LTe5b4Lse8+AyXzA0rqAkrqwjolLbqYUy/MttyVkql3
ZpOfUubwXcYeM/YAhActLTH1pLFX27saouN/6SgG23Pzsy++euPlX2zPLWi5
wNIV+0Ff//XqF774/Z8OHm5XTiVDS1tv3+LyV983MgAjnVEomTdQUhdQUhfW
KWnLxTzgjL1q7GlRc8LYAxBatLTElK+xd83YyyWFVopt7InkwcFyw2fx7zwz
+fSP5n/1xp133s17ufHSa7FvPT393E8TI5+HtpKzL702/s3vX//xTzJVsrG9
k5bNMnogEnX9zdEu8gCpYyVj3/5B/Hs/DO3pDi1QUhdQUhfWKWlFj5Mpxj5T
7+ydsZc5f1qBsQcgVGhpiSlfYy8h9xxjLzfjc+Re6sjwFyPG3sXOncXNwSG6
5Oa3rDa10NV1P1FcP6ylklMT1zsuXU4mk2rJqpOnvjLSP1DUAykBswu30qZv
bm01RrvXZ+fCf7pDApTUBZTURRkoGfIeh7pp71NxMvXOEm8vMfbUm0tOWufS
EGMPQBgovBn6U8hjMEHe9AyNxG7cVFPqWlrpNTYzyzP2HLlqNXQU3kQaztCg
Zvb2ndLXx16gpC6gpC6gZKhQQ3GKjWlPBID1FLuRwtgbYXtnpyHStZ5ISAp3
lJuO09bbN7twixx+pH/A0oAcqjZVnoYqdFDN0S71IxrO0KDGVMWsA0rqAkrq
AkqGEBh7ACyiNE0VlJ7b95Zb+voPDg/5LTl56itp4d+4F5dXKMXVb9oCdf1U
+YHRMVrUdBrINEa7aVBjqmLWASV1ASV1ASUrHNOeCADrMd2IQRG5MDI2en1a
TaEekxaZqG/r7bNo0j7SP8D30DE0NlG7fhrC0ECGhjMGamYbUFIXUFIXUBIw
pj0RANZjuhGbJ2uk0Ny9lZL9Cuki+POC+DmirsTdvb2m7t7l+/clQ11LK/We
/Bs3rVs0Y0+9PA9Jeq9cpcWbgYYwF8euZdq8QCXVctQ7wW0kJErKvXiu52lb
REiUlNJcDzC0iJAoKd/JEjzMAWTCtCf6ing8XlVVVVNTU8qdVh1TW1urq0w6
BCowGo1m3XV1dbWunQLjmG7EhgnysM1Shhe6CNhh8QMK0nZGiyur5O3bhz7n
DIvLK2nvSgs/1N1T10+jkuFYnNbVyT2CBi90mDSQybR54UqmnvwmqA+Ls4sw
KCm33mh8Sl7pCYOSDP8rqL3GPiRK2tuoywktxubEiRNiaMkn0zp59eCbl97Y
nzx5kursn4cOx3UgtIl/JdnYZx0pZDL2lEgf+W8L+AvmEopOqIzU/AdWmXLy
dzjr95A+lXNHK/wtMt2IDSDP+GJTIZd6mYyVv8zmRe8Mrfr8T3aJ8tgx6Z6k
VupfAPCStkx+4HCmDmtoYvLjSLdkoK7TFbwacjYdh8Yj9Mr303EirYuSr/6l
/sO2zqXVtWIrqVLUP18oEiFUktqajTfXh0pJHiV5/3LICsKjpPr4R42/x/E3
XHoW9cqvPjEydXwebf9BsHDyN1gKbIrIMjmWGPsgc+Zpjb2W6X0Y+7yhLwl9
zfjUSCKdFP7uOUdnLeuQTbaSnLS5fP38hwZi7NWdmm7EpYb/UI/X6Uru/Wc9
mUKUIAG9M/bcYaWe/KcPeTIwXdjVyUzuoSSDjwvy6bD29w+aunuHp2a9GWYX
boXf5Lf19sVmZlNHHoCf1RnpH6BFlIwMDv2x+Vyq+EoK/OhmnQdZEsKmJBsz
G+1oeJSUy4ilxj48SqpXZo1T91I9WZE6yF645t4/c6xMcvdWaThxBDsiMfY8
fc3GWCwr+392tjJrysZeUsQvOUrAjCTyNClbu6zT4+r0rGrRgxh7rhXtiM0k
b8W740NTZ305s7dKUk+GnaR6sCyLzEIL4jNlJtk7yqjYUYDL2PNbPhF0pgKG
OYlF53OnFuVTAm+lbuJUnrFPPRkmrYbiSLrrqqvd2Eunw7uWHfEFn//YS80g
FVNnq1z4m6i1Bxv1ned/p2RYXF4ZjsWlVw0t/AM9d/p1La1UZ6o5P9iHlVxc
WW3u6ft1/dlUSZTkTt9GBxU2JQX5SztbCJWSVKBsbt0NC6FSUkX+VrVwZKZI
di2djszY8yVF7Ro0VsA68nNWLshkst8mWxXE2HMenlylbOKKxVmxreVieReS
yDvidP+IGnb1UkPOqfpkcdppEWMve3GNXJxjhy+b8EeqsZdq80eSyCWoB+uk
m7H3mcP3Wv3KwWXsmSADPTWnaub5/MrpU4eWLtjYU35VedON2Bh8mfXOd6kz
9pyz2MY+00yUTBxJhqyH45Ohe3jszy3t8pY6U+pGTzed5dtpCzqkYkK9PNeQ
f68nAyCP8SGhaiM9n57voWFLaZTUO5VXYkKlpNV3K4RKScHGGftQKSnfySA3
XgUnk7FXa4IZe5U8bJUXdtrsi8TPZzL2lC4uVzX2aiwE5XfNdcs8KheV9QZV
58lpebUyTuDbV8XYS/gHv3VVTIr1MfZqBWTvrgP32niZyfexmhWIy9jLEMzJ
5cZkKYTPKW0lsWT+xt47pDLdiEuNOsHFvcArx3+KLdP1rol0/khjjL3L2Kux
nZzOkZYc4c8pksHHc/p3/XN3l2tb2ucXl9RE9ak4oX3uJfX+7zU08nqkf4A8
AK+TkqfbImNTM6lSKSkRsD5xvGEmPEqmlCeQ2BjUFColpVjrjH0qZErKd1Kj
kj4z9upvxHS86u1XNjYKXWR1PiqZcsoUuup1tRh77wRs8EB0Lca+RoFL8PmZ
wGvs1VGApAc39mrlq0r+4KDQ4jL21Uek/cgfjumSSDBOVG+P9cKfuvZiuhGD
nFG9pffHd59P1xOJhkiX+g8v/Ks3MxyL8w/iRT+AvKDq0TBE/XGBBimtFy4l
k8m8y8xbSauBkrqAkrqAkin8S/sxOZuqDAaJvZA6nynPflQjbbIae9UbV6UL
lQlu7NOG4jABjb3cOCBjHDmutCEfLmOvziSr+Bv7tNE1LvPpIMZeOXYSUE6u
ekus4/v7jlqI3Bad6ZSp+5KvuuzIdCMGJWVybv78laG0H1HfKv9LGx4y/Y5A
w5PGaDcNVUpcH3uBkrqAkrqAkiow9kyhHuvYF6nB8OJO1UcIZjX23pnttOk5
PTpGtnUNEHIy9hI/I/tVb31Vw7NVeCtX3I5/KI5aYbmhwOcQMo0CyhiXzupj
bVwiM15j769nVbYofdfjLvkrYboRg5KSTCY7Ll2eXritJlL32hztivQPmKqV
D5meuk/DExqklLgyVgMldQEldQElgRdNhgukQe4R5rd8c7HZKoFiYLoRg1Kz
tf2oMdq9ubUlKeoT58jeU2/Lj6owV8evoVrxD/Suf8ilgUnnwGAhP9NXGlBS
F1BSF1ASpMW0Jypn1D+i9cbSgLLBdCMGBqCus+PSZVfXyXexcTQOuXrjj8pZ
XF6hUQZVw/WkfRqS0MCEhiemKmYdUFIXUFIXUBJkwrQnKnPUEBG4+nLFdCMG
ZugZGonduKmmNEe75C8gaaX3ylUjFaOOXn20Po0y1Bihvb39TyJd1+cXTFTN
MqCkLqCkLqAkyIppTwSA9ZhuxMAM2zs7DZEu9fY0/kGcjb2pWlEvz39SQ72/
PPhOcB5uN0a76zvPG6mbXUBJXUBJXUBJEATTnggA6zHdiIExbt9bbunrPzg8
5Lf8VByzD8bhwQX/rbyrJreW7n7c3vnBufaRySlT1bMIKKkLKKkLKAmCYNoT
AWA9phsxMMmFkbHR69O0cm/ty8e7u+pHrtjX0sCPs+Zf5/mfKFNHT/K5Epug
Tp+XtQcbpa+YdUBJXUBJXUBJEATTnggA6zHdiIFJdvf2mrp7l+/fn5yblz+l
5V/JMz2JrkjI9B0NKN5raCQPQAt5gK3tR73Do7R0Dgx+3B5piHT5lQKgpD6g
pC6gJAiOaU8EgPWYbsTAMIsrq+Tt+8euDVyLcQp1vuTq//BRXXO0q2RhOW29
fbRTHlPwrbv8kwFHCtHQgyrZOzRy6fPx0tTHXqCkLqCkLqAkCI5pTwSA9Zhu
xMAYm1tb1JOSn48MDJ7piDRGu+Wj2Mwsdb6bjlOyp9lH+geox69raR2OxV0f
7e8fUL+/tLo2OTc/98ViaepjL1BSF1BSF1ASBMe0JwLAekw3YmAS6lUvjl2T
ANf7G5ucPrtwS31sBdn7gdEx74MsNCI/DfA/ZKkDisHx+NDEZOroRoBHjx8X
rw7lAZTUBZTUBZQEwTHtiQCwHtONGJhn9vadj1o7yNiPTc94PyVLX9fS2nvl
asmi7tURxOLKanNPHw1ASrPrMgNK6gJK6gJKAn9MeyIArMd0IwahYD2RqO+M
fvLkzWvUBfNzp9t6+2YXbpHDL9Kjcrhwb/rj3d1Pz/fgQRnBgZK6gJK6gJIg
J0x7IgCsx3QjBmGB+tn6jujN219ISqR/gP8mkl7VP4jUzqbjNEe7eq9cdd2r
e2FkbGwqzY8IIBNQUhdQUhdQEuSEaU8EgPWYbsQgRKwnEg2dXds7O/x2cXmF
emRy9aebztIrLdxB690ph93yLtTg2/nFpdYLl5LJpN7dlTFQUhdQUhdQEuSK
aU8EgPWYbsQgXEzOzZ+/MiRvydtT1zy7cIt657qWVnpL69q9PUGFq29pcNEY
7aaBhvYdlT1QUhdQUhdQEgTHtCcCwHpMN2IQLpLJZMely9MLt9XE5mjXwOjY
cCzOD6Nu6+0rcC80WHA9+M71yB0aXNAQo8C9VAJQUhdQUhdQEhRC4a4mHo9X
VVXV1NQUXlRwqo6pra0t5X4zUV1dzfU5ceJEgYWQnvrqBUqB6UYMQsfW9qPG
aPfm1pakiJPnmbfCH25P/T4VxQ++4zB+FRpWdA4M4mf6IEBJXUBJXUBJUAhk
S8iLkp+MRqO0Tj45V29ZemN/8uTJQvxz8ThxRNZsLDILrsLG3pueN1RUeMY+
liJDSPUbTt9AVVjTjRiEEep8Oy5dls430j/A/x2p8ak4/KSd9xoaXbfl0oCC
hhU0uNC1o7IHSuoCSuoCSoK8cY6NPXkVxxJjT7sjD1yy3QWnQGOvHRj7QuAv
tveb5v21yHQjBiGlZ2gkduOmvFX/sopW8p60p6EBT+JR1z8ci9MrLVIyBwLN
3r5TWN0rAiipCyipCygJCsc5tqNsNcXYk1EXh88zyWxpeK5SIk9oE/E/nMID
BJcFkkTKRvtiw5nVc/K+GHWsEdzYy47UTaSqrt8p+JAlJ+9drQybdj5e78E6
HmOv/rJAK/RW3VYtQa2navi5YuqMsQyjgkT+pDX26r5kd+qxqIZWrbAIePII
qZtUWC1W1UR9axHytXclEnzsMPbAn+2dnYZIV9ob3NTOOic4+Ja2pd6fVk43
nXUNEGgoQQOKPGtcSUBJXUBJXUBJoAXnyHqx3xa35m/sZcKZNqFs4v2cY9PI
FpSLZecjibwjcc4+vlT11WKY2SUKQWyt66cENY5ddsFHxM5WMqiumI+R1lXT
6y0/q7Hn9Uwz9qy5pKvuUT5S1XbZy0wK+GSQGqqnW113DSi4KDb2LIIcV6az
ybW18cYBPpsyulRlhLEHAbl9b7mlr//g8FBSBkbHmqNdf/iozvtU6iDQtvTa
2N5JHqCupdVVAg0iGqPd8rBN4AOU1AWU1AWUBFpwjh24OmvtY+wpnXPyhmLs
xd+y73VNC4sZDh5Grk4Rq5VxAs/Yp51xTWuwVaet7kvGIJzoeDy5Wpqj29ir
9ReRVbWz+vZMGdSfQngXarFy1OrvBQxn4M1dXt31e0cZoN574vouwdiD4FwY
GRu9Pu1KpF6bH2ufa2nDsTj1/hx2u+k45AHkIxo+0CCChhIFVrhCgJK6gJK6
gJJAC45i5MS/6TL2XkuZ1mynJQzG3nWkTlkY+7S/WXA6veVN1MP31tPnpxYJ
cyqDwH7+YYLXXd9AGHsQnN29vabu3uX79yWFumzXLbQ5hdzTtu81NJIHoEW9
sY6GDxfHrmmpc4UAJXUBJXUBJUHhOJ55adXYu2I/shp71fBUpQuVCW7s04bi
MAGNPVfGldMnFMdr7OWQJSXXUJwqT6iPkzmEJngoTuHG3lHi59XMVZ5ge9d9
BE62GCqXLPbG2Kvn3XXDBYw9yInFlVXy9vv7B96PYjOzje2dtOT0ZHsaCPRe
uaqODmjgQLugQUThta0ooKQuoKQuoCQoEMcTDF+lBKJIAEZWYy+I20mbHtzY
O8ovCC4bGdDYO08Gk4hBVQP11WxpjT2/VXfnvaHV8QT/u+48ZYVVhyzBMJwo
QypXxbz3+eZh7F0yqudFzqxaK3WKPu2dtmmNvRre472B2sYYe+dJ/TnFe6bo
0Ew3YmABQxOTg+NPfFU2HWd24RYZ++ZoF62Tsc8jMoehIQP1+0urazpqWtFA
SV1ASV1ASZArZo0TCBVq8AkIjulGDCyAe+fFlVVJ6b1ylf9ckvw8/+ae33Ny
CBoy0MBBSz0rHCipCyipCygJcsW0JwJhgSfnS/B0/fLDdCMGdrD2YOPT8z2P
d3f5Lfl58vapo0dh8MOraYVTcoIGC809fWnjfEBOQEldQEldQEmQB6Y9EQgF
HEpUyn8ZKydMN2JgDaPXpy+M/C10lvx8XUsrmfnG9k5aWVxemV24lZO3p2EC
DRZoyFCEylYWUFIXUFIXUBLkh2lPBID1mG7EwBqSyWTrhUvzi0tqIs/YD8fi
ZO/J2+d0Fy0NE8amZjTXsiKBkrqAkrqAkiA/THsiAKzHdCMGNrGeSDREupy1
LxMjn682tSw3fNb/m/+kV1rO/89f0+vtD8/wW5/ly/bow6mZ+bl5GibQYMH0
MZlkP+GIknksUFKAkrqAksAspj0RANZjuhEDa0geHKz9tS329I/Hv/n9Gy+9
duedd2lZeOv3tMy/9ftbv/0Dp2Rdbr35zvSpn41/47tT//LK1sSU6cMyACs5
+YPnYt96WpTMY4GSUFIXUBKEBNOeCADrMd2IgR08Xrp745VfTj//UuJa/ODR
o8Pd3QKX/URi7VxH/DvPLP359GEl/dE8lNQFlNQFlAThwbQnAsB6TDdiYAH7
CWfy6R8tvf/hwcOHhXf66rKzdPfmz2sWXn/T9CGWCCipCyipCygJQoVpTwSA
9ZhuxMACbr3x9sJv3tLb6cuyn0hMPXtqveei6aMsBVBSF1BSF1AShArTnggA
6zHdiEHY2bw6cr36hb0HG0Xq+mlJXItPPFW9v1HmT8aDkrqAkrqAkiBsmPZE
AFiP6UYMws6dt99dbWopXr/Py81X/21zcMj0sRYXKKkLKKkLKAnChmlPBID1
mG7EIOzM/ORlJzZR7K5/6b2/3PuowfSxFhcoqQsoqQsoCcKGaU8EgPWYbsQg
1Bzu7Ix/47v7iUSxu/717r7yvskOSuoCSuoCSoIQYtoTAWA9phsxCDW7q2tT
z54qdr9/eBSIO/fzmpzq9tvaD95raJS3kf6B2MysT/7maJes0LY+mQdGxygD
LVSmrvxQUld+KKkrf5iVBBWLaU8EgPWYbsQg1Ph1/dsPk7Pjshyur2Xs2efv
JEcnvl7iM1q6/rqWVnpdXF5ha0QrZKgy+Rz6lFwN5yTDQ4uUkBbKSZvwuq78
UBJKQkkAsmLaE31FPB6vqqqqqakp5U6rjqmtrS3lfjNRXV3N9Tlx4oTpuoDc
MN2IQajx6/o37qfq3pLlq94/U9d/titZ88evl3c+0NL1k28h1ySzo+RYyLqI
iaK3kf4BysPGidLFbtErfaTOXroyp46nN2nRkh9KQkkoCWMPAqLF2JAXJUca
jUZpnXwyrZNXD7556Y39yZMng/hnykYV43U+xpyOKw9OHFHUXZQl/K2Tk+UD
f9nk68rwiWZo3WdzOjuSgcZifLJMN2IQasLZ9fNsJ72yNSLTQiuqiUodmxl1
E/Y8bIFST85eejPLJlryQ0koCSUDKgkqnML81N/cjjgiK4w97Y5cWdZsYuyp
bi4rWCRg7POAzg6dKTo7WY295PEa+4Anl409f73l62G6EYNQE9quXywKT5Py
5CQ7q9TRdCj7GY5ASCkmSkIUZG7Tm1kKp5XC80NJKAklYexBQPJ2Uy63I5P2
YuzZDLMF4jgTNlRshyTyhDZhYy8p6pSpdx6Vp0nZoWUNpFFnYtWxRq7G3jXu
4ENTJ375EKgyvAmbcxmweGNsMs0Pe409C+s9BE7PegiVQxBjLxRi7GuPoU0w
Yw+yEtqun0ML1OgCdXZUpi69JopnViW8OW1mCWPgeIkC80NJKAklYexBQPJw
UGndDvttMkhBjD3nYV9E2SQ6wjm2Z+yiuVhxYpzIO+J0/4gaVyAN51R9ctaA
dhmDqNnUnyT4GJ1jD8/+kA+BsqnHxVvxMCTtcbnqyYhuXrxWv8Ip0Ni7Rmo+
G3J+PoN0sugUmG7EINT4df2Pd6j3P3jwZe+5s/HL/YfbDzN1/Ymle20f1y+O
TxyurR/efxCGrn93b69k+/p6j1BS1x6hpK49lqmSwGoKcFJ/g50qe1fx85mM
PaVzTt5QjL34W/bSMicvsJXiooLMr6rT8mplnBxn7F3z6qoJFHctxl7dXD0u
cfuZjkuU9A4ivCUDL4UYeyFrIBmfneojHBh7EIAgD8RbuXu3vr7+xvQ0rd+P
9oz/w7dl2Vm6u7m+Huns7Onu9i+kxF3//v7BxbFrw5NTq+sPSrNHKKkLKKmL
clUSWE1Wp6Ti43bY56heV4ux90ba+Exiu9Bl7NUfEZwMPxOkvU3Ax9hniiBK
G2MvwTwlfnCQXWgx9v4f0Qn1BkpRZtONGISagE+6nr5+/ZNPPjkfjV5763cX
/+7vZRlubaP0rvPnnY2NsHX95KM6BwY/ONf+6fmeErgpKKkLKKmLMlYS2EtO
3ikTYuzFgoqxlxD6gMZeDVmpShcqE9zYpw3FYXIy9s6TPxPwcbmceXBjn+m4
0tbTVZRrbj+4j60E0hp7PoPeGfhM7p1Olk90Fow9yIPgf2GzvrbW1tZ27sWX
1a4/+tHHCzdvBtmcuv7hUz8jS1OuS/2ZT2L/9DyUhJLhWUqpJIw9CEieLupJ
XEHjYqUkoF1i0X2MvSCeOW16cGPvKL8guPxYrsZeimI3KPf5Vnnuk1U3z2Ts
0x6XK/hfjTvKdAhpLWsFIgFLXqFcxt6lvPeL6n/Phdwtq5YPYw/8CWjsqX9v
ampqa20de/O3ate/Pb8QpN830vUnk8kLI2Nkb+o6Ipc+H/9ieeXg8LB4u4OS
uoCSuihjJYG9aHdZAFQaphsxCDVBuv7Ve/fOnDkzGY8fPH7sjcINZ9dPDmrg
WqwE3kmAkrqAkrooVyWB1Zj2RABYj+lGDEJN1q6fuvtIZ+flgYGAXXxIuv7d
vb3SeKe/7RFK6tojlNS1xzJVEliNaU8EgPWYbsQg1GTt+lfu3j1z5sy246Dr
9wdK6gJK6gJKghBi2hMBYD2mGzEINX5d//17qf96WpbkeB+6fh+gpC6gpC6g
JAghpj0RANZjuhGDUIOuXxdQUhdQUhdQEoQQ054IAOsx3YhBqEHXrwsoqQso
qQsoCUKIaU8EgPWYbsQg1KDr1wWU1AWU1AWUBCHEtCcCwHpMN2IQavy6fmcj
eekzWQ7vzqHr94GUnKh+AUoWDpTUBZQEIcS0JwLAekw3YhBqDh5ux/7xewcP
HxbSrQdZNvovz9f8h+nDLSKXBwahpBagpC6gJAghpj0RANZjuhGDsDP93E+3
pmeK3fUvvf/h3dN1po+1iET6ByaePQUlCwdK6gJKghBi2hMBYD2mGzEIO7fe
eHvtXEexu/65X76+OThk+liLxezCrcXlleF//SWULBAoqQsoCcKJaU8EgPWY
bsQg7GxcGpx69tR+IlG8fn9rcmriqer9jQ3Tx1oUIv0Dbb19p5vO3j3fM/nD
f4aSeQMldQElQWgx7YkAsB7TjRhYwMLrby7+6f0i9fsHjx5NP//Sl+1R00dZ
LMhB0etwLN575Sop+QWUzBcoqQsoCUKLaU8EgPWYbsTAAvbur088Vb3a1ELd
tN5+f+/Bxq0335n7xb+bPsQi0tjeSa+bjhPpHyAlx7/zAyiZH1BSF1AShBbT
nggA6zHdiIEdbM/Nz7746o2Xf7E9t6BrKu9BX//16he++P2fDh5umz6+UkBu
inzUSGcUShYIlNQFlARhw7QnAsB6TDdiYA3Jg4Plhs/i33lm8ukfzf/qjTvv
vJv3MvvSa+Pf/P71H/8kMfK56cMqHXUtrRwCwUrGvv2D+Pd+WKCSN156Lfat
p6ef+ymUhJJ5ACVB2DDtib4iHo9XVVXV1NSUcqdVx9TW1uoqkw6BCoxGo1l3
XV1dHaTAkydPnjhxQkfVQBEx3YiBfezcWdwcHCIbkN+y2tRCPf7UxPWOS5eT
yWSmvWw6zqb938/ZhVvquhzR5tZWY7R7fXaucCX3E9arFAQoqQsoCcKMFmND
5lMMLflkWievHnzz0hv7IIaZDsd1ILSJfyXZ2GcdKWQy9pRIH+Vaz0qDv2Au
oRj+HgYvQbRl5V2JaaFP6aTIVpzZdCMGlUvP0Ejsxk1vOjmN5mgXLW29fQOj
Y6WvmEY4mNkFDWdoUDN7+07p62MvUFIXUBKEmZx9VQa3Q46IDY8Vxj7InHla
Y69leh/GPm/oS0Ka8KlxfVR9RFZjz4Mv77YBzywbe/5W0AoXZboRg8ple2en
IdK1nkioiYvLK+81NLKrTx0/vsNG+M7EupZW8lF0OOpHNJyhQY2pilkHlNQF
lAThJ6Chyup2ZNJejD07KLZA4rjY/7Oz5QlS2oSNvaTIjKijBMy4pknZ2mWd
Hud9MapFD2LsuVa0IzaTvBXvjg9N6i+ZvVWSeqqzwerBsiwyhyzwMIeNvRyF
BPmox6VG/gScsrYdr7EnAdlvZz18ksg76szJ2NceQ9XAjD0wzu17yy19/QeH
h5JCTp68Pa/MLtzqvXLVXO0KgkxUbGZ2YHTM9aMDDWQao900qDFVMeuAkrqA
kiD85GCnfN0O+20yV0GMPedhX0TZxBU7x56NbS0Xy7uQRN4Rp/tPaMuEqnM8
9HCOrW+QuAsx9rIX18jF8Uz/8keqRZRq80eSyCWoB+tkmLGXAmV0owrrwjuE
KUu8xp6POquxl9+GWCj5dqnjLH+Hz+XTieBteZhguhGDSufCyNjo9Wl5S06e
437rWlptjLGn+kf6B6TmNEhRTRQNYWggQ8MZQ7WzCSipCygJLKJQj3UEO232
rmI7Mxl7SheXqxp78bfsuFxz3WLDuKisN6g6T07Lu8xwVbDbV8XYS/gHv3VV
TIr1MfZqBWTvrgP3D8WR6G5RpmKjdFzGnoeKzrGeWTcUwb2xVXKWM5XAmnPY
jwNjDzTxq/rmgNleqT1DS8fINTV9d2+vqbt3+f59Wp+7t/J2c2tztKuxvXM4
Fo/NzMpihcknv0TVpqWtt4/q7M1AQ5iLY9e86UyBSgbPEH5CouTbf+3gDPTN
DFjzsBESJSXb4NSNIAWCiiWrC1LxcTvsc1Svq8XYe6dPg8RRq+Xwet7GvkaB
S/D5mcBr7NVRgKQXaOzVfQU8kDJDNfZqEJSQ6X4Nl/Mn6bw5fe6koM1dp56j
wkw3YmA9Qbr+houDtPA69f6uTxdXVsnbtw99Th+RleLESP8ALWRFeq9cfa+h
UX2UR2ihClM92USRoXLdpUiDFzpMGshk2rxwJYNksIIwKEke9f1oL62QF5Wv
pXWEQUmGxKRPYeyBP/m7qyftDdtLCXIQYy8h9AGNveqN005KBzf2aUNxmIB+
WG4ckDGOHFda7+cy9hLM48rmb+zVQBofYy9FqYkVG2PPeGfsvb/vqL7de3bU
iKm05cPYg4CQpZG5Su6y5+6t8Fvp6DkDvUoKZ8hqJtNahaGJyY8j3V/N2CsO
qq6llWwJWRErputTys2J/JZWRMlX/1L/YVvn0upasZXMKUNoCZWS5EXZ4dtI
SJTkURItMPbAnzxslRdXMLy4Uwlol1h0H2PvndlOmx7c2DvKLwguP5aTsZf4
Gdmv9+mI3rtf1QenuBIzGXu1wurNs1IZNcZe8B5vGcfYu3R2ndYgxj7tbc7q
afLZu9wtK3CMlulGDMIId/2pIz/PPTW95R6ZO2h1MpP7esng74IoW9of6/f3
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
kNNramqCFxUEKvPEiRO8Tocsu5ZEzhNQZ7UEqrC3BDplPpvT0VVXV/M6rah1
0It8c9REUZ5PfSbUE6QeVKZj90LHJWdWDtN0IwagIoAd1QWUBKCMKdBl5QS5
IPZR7K84kQxhTubZn0zmWXadKxo31GvsSbRM/pk+8u6r+gifAsXTssuVrdRT
5mObxdhTfo0n1LsXKlz9/vAeSQeutr+xdyH5uUzneNTgswkbe9mKM5tuxABU
BLCjuoCSAJQxeZirvBEfRQ5QnKc6x144mcxz3rvQuKFGY88umrxoWmNPid5p
Z9LZZ4TiKiptZv/ZbK6SOigoHi5jz+Rq7NWfGIIXwuM1RkQz3YgBqAj87Kiz
kbz0mSyHd+dgR32AkgCUMcHdVN6Qg+IgB9XMs28kX0SJaY1o3vvy33XedS58
Q13GXsyzy41LjIrqVyX4xH8WXTW0vInL2Kf10irsk3nmPJ+jygUtxj5tZp78
99/KOf65xDn6AlMhphsxABXBwcPt2D9+7+Dhw0KsZpBlo//yfM1/mD7cIgIl
AShjArogLUiICBt7mQHWZezJYmWalE4bnRIEjRv6R8IER+TKNGOfNuoma8iT
jAtOHqEqyZ7Z/xzJiMYKY59WoqzhRs6R+OrmMPYAlJLp5366NT1TbDu69P6H
d0/XmT7W4gIlAShXApspDUj0NZki1UHpcoM+5jPvwG+NG2adDQ6C9/bPtLPr
3h3lFCSjTrzzhllvNJDooPCH4qTNyWX6D15oE5ewPMgy3YgBqBRuvfH22rmO
YtvRuV++vjk4ZPpYi8Km42weRQ9CSQDKlYBWSgsyia1aXHKDJbh51jV/Lrc9
ZkXXhj51y5tCZux5fj5tlSTOxAlmd6V83opjq4IfRR4EN/Y8hHTV36sPq5F1
UABjD4BZNi4NTj17aj+RKJ4X3Zqcmniqen9jw/SxFoXG9s5I/0AKSgJQvuRo
qXJGIjRcs76SrtcEqk41066dDH6vqBs6RTb26uNDZUfq9H5aK+sds7gSqXz1
pwGfIZjrcZdFmrdXD1O+PN5fMSS/93yljbdxbZ4paMo7kuLH6ZhuxABUEAuv
v7n4p/eL5EUPHj2afv6lL9vLs1EPx+Lk6utaWvktlASgLNFousJAQPOc9amG
2jd0imDsQUgw3YgBqCD27q9PPFW92tRC1lGvF917sHHrzXfmfvHvpg+xWDS2
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

    "], {{0, 285.75}, {758.25, 0}}, {0, 255},
    ColorFunction->RGBColor,
    ImageResolution->{96., 96.},
    RasterInterpolation->"High"],
   BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSize->Automatic,
  ImageSizeRaw->{758.25, 285.75},
  PlotRange->{{0, 758.25}, {0, 285.75}}]], "Output",
 CellLabel->
  "Out[100]=",ExpressionUUID->"7fa2c5f5-0861-ff44-a391-5b6c8a9173e2"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"netSumIm", "@", 
  RowBox[{"MakeUnet", "[", 
   RowBox[{"chanIn", ",", "featOut", ",", "patch", ",", 
    RowBox[{"NetworkArchitecture", "->", "\"\<UNet++\>\""}]}], 
   "]"}]}]], "Input",
 CellLabel->
  "In[101]:=",ExpressionUUID->"c08844c6-dc4a-b54b-b225-bd8a2cb82961"],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1: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
7Z9uvov9xg9Pmpcqh3x+FfvbMfPbanpsrlAY8I+bruIGEvUDbyKmqwAAAB1r
PpnSPGh/bfPd2Nx8S09x42on2z2vNj/729ZFfXWs/+XfyIkeXPlBseibmnaO
B7sGBnteOyTty3fkX/kyODv36Aujm3sqZJ+O6z6vX/Mys41QjV977ggAAAA6
gGtiWvOg/cnIQiqz3tJT3LiS+dqf/lnB5W112t/5elhO9ODKU+m1Z72vqofr
S86XtC83pBWg+vnbyH6xaJ/puradq6tnNVoAAPAEXVxe6h+03+8bOzo+aekp
btylNP79Hx0lF1ud9uUUcqLHFH9QLPa8dqiefBXv5d8+14j6qdxur1E9U9GY
TTY4OymV5N1uw7m68l4NxeKmqwAAAB0oVyhoHlktiavX42vpKW7btCjy9/7x
6ea7Vqd9OYWc6PHPwpqlq76U/C+tADWeR263USd/qVzucXla3b5r0OjMnA3n
6hY/HL90e01XAQAAOlBkcWkusajzjBoG7d+2WVidtF9JRazjMn97i2BjqzIb
s46Wpn1Fgr1ailNCvhrJL19K1HeOB5t1Cg0Sq+lWv+gN2szvDNny0g34x+ts
+gwAAPAwnumw5B+dZ5yKxlo9aD/wJrK0vnH9+3XS/lXXn1lHZT5wa9r3TlV+
/FfWoSHtX33q5E+l1yTtq4Tf5xqRLw+KxSaeotUqlUq/byy/u2e6kI9stS6o
Rf9keQAA0PEkg+nf2WdwNHBwdNS6x1fbFZUkwF/TpmlfkaivRu8M+fztuOVW
ZivX5/XbYeWZ2PKKNDlNV1FrZ2//+vYQAAAAjyEBQ/Og/fLZWY/L09JTbOS2
3VOhG3/U1mn/oFjsc41I1LdG8quFetqIpNmVjazpKj7OHLHn9rUv3d7rk00A
AAAeLLa8onnQvkRxX3i2pacYnZm7cRjPVZun/esk9qtBPhrO1RS5QkHaepoX
gLqRNzRjh3ZHjcnIgg1nEAMAgPblngplt/M6zxiOJ64vjNlE5+cXdbpt663J
s1+QI+R1B52vL4+Kt663877geNGzEp673Nn9eBhK+2re7k+/7HKOB+V2S8/V
XJ7pcHxl1XQVH4cVad4/uhGb+Z3bPpYCAAC4r0ql8nzIoXnt8aHxYEsXHlnN
btb57ODOFTiL+/tfffXVbDhcPj4+fBON/K//0DrkS/mp1+N5PTR0USrVeRBt
ffsS9asX3pfbvqnpZ72v7Lwav7z63c4R4yveX1xeShk2WRTUoqqy4RAjAADQ
jnb29vt9YzrPKDFGwkxLTyFRXwL/bT9tZL39bCbT/+qVHLPPvhz7O3/XOkI/
eyYNAbfLtV8o1H8EbWnfWpknODvX5xqRqC+H/QfzB+ejmseP3SgUi9twDRxv
aCazlTNdBQAA6ASJ1fRkROsgkM38joSZ1j1+/WE8Vw3vrnV0cOByOl/95E+r
077nP/90KZms36tfnfY///r1vY4el6fX4xvwj7smpgNvIvLqbO28b7APPLqY
6hoYDEcX5N/mXc5WOTo+kZfppFQyW0Zh/6DVu7w9QCqzrvmvEgAAdKo6s1lb
ZC6xGFtead3jy9Opv4VTI2l/bWWlr7d3aHAw0tVdnfb3xoJ35vzH9O0fn55K
DN49PMwVChL5wvGEeyrU7Rx56fZK/Mtu5+tPbs3mtv/8558HZ+euPq3eY+fB
PFefpm/IYbqKjxtaydU2XcV3yHuATXUBAEBT9Lg8LV33/jpHcLKl4Uri8Ubd
lHtn2j/Y3f3qq68ib95clErXx+23NO3fRuJfYjUtl65r2CkNtNu2QvNNTUcX
Uyrky78232lXrYFpvHs/vrIanI+areG6ft+YDTf/AgAA7UWNptB5xlZPCi6V
y/KM6neA35n2fV7viNvdYKrXPG5fnuDS+sZwYGLAPy43qp9p9cJKqfSaRP2f
ftmlxvY0vYxmsUP3/vHp6Z3vGf1m3yajS8umqwAAAO1tbfNdS4fQX7d7eCgx
tXWPLwE48CZS/z71035xf/8Xv/hFfmvLnmnfsrO37wvPvnR7I4tLapLCZGRB
vql+Gl1MyWHtwKWoyby2WpnfJt37nulwnWndRmztvHcEJ01XAQAA2lsoFm/p
EPrrkulMS6cfuiam79w7oN7uWv/p+9ZRCfzSzmlfKX44Hpub7/X45FlHl5b7
fWPV05Nr0r5zPPis95XdhveE44n5ZMpsDdLstdsS9xeXl13DzpK8JwEAAB5q
cDSgeX5icD6ayqy36MGPT0+7nSOVSqX+3Top7StbO+8l58ur+fnXr6UFd9vd
Uum1mvxvByelUo/LY3btfYnWLxxuef8YrOG60Zk5u33iAAAA2sj5+cXzIYfm
TXwG/OOt21erwdVEOyntS0yVQDgcmOgadlrLeN7YgjsoFrsGBtVgHkXCv01G
9YTjCeOL3gfeROw2Tv7O1aUAAADq2Np5P6R3UEf57ExCaese3xGclCd15906
Ke0r0mRT2wd/OeSQtP+LjyNAarvKe147VLaPLqaGfH45fvpll03Svh269zdy
24OjAYMFXKemD9/5WRUAAMCNokvLmpdDkSjeutHRxQ/HkhgbiUZ10r4k/G+P
dKxd0r5FYv9SZuOl29vtGDk6PrG+f1AsqpV55N9nva/kS7Xlruby6pC3otmu
dXnndDtH5F1ksIbrBvzj+d0901UAAIC25JkOr22+03lGiXOtm4/ZeONl/jd/
5yi5+Jgk38ghp4j/4Hdb9GTvlFxdk8x/Y1BUm+3abQC/xGwp2OwymJORBeMD
imrMJRblMF0FAABoS/qnJfrCs/X3vXqMwdFAg72gb//NTwoub6vT/s7Xw2t/
+mcterKNkKvR4/JcvyZqAP+Qz6++tHbjMk7eHq2bwd2IrZ33fV6/wQKuyxUK
LV2xFgAAdKr9YvGl26v5pN3OkRatKHivp5PvHdj4m5+3Ou2v/+XfyIla8WQb
pwJ/ZitX/U3J9tXD9cPRBZtsv7Wzty9h2+AwdTWYp3WzyB9ASuoadtptsSAA
AGB/qcy65uU+jo5PWtdxOp9M3TngQTKtGql+up5d+M3fLuW2Wxf1TzffxX7j
h3KiFj3fxh0cHUk7qCbwW4Z8/me9rz7r7ukaGLRDD78jONm6T38aYYfF/2uM
zsytbJh/IwEAgPYSnI8mVtM6zyiB885dbh9M2hF3dsmqvWV7XjsOisVc9y9X
/uQnrUv7y//qx3KKFj3Z+1KB/8YULZdCDmtUz9U383nlkMulr8RvGF8YJ7+7
1+vxGSzgOv0NcwAA0AH6fWOF/QOdZ5x9m0ymM614ZHkijXxqkEqvSYKVf7sG
BsPzkdQf/PH6X/7N+eFhc3O+PKA8rDx45ULrRgb1qSE9O3v7N/60enEeSfty
lT7r7jHS1V+pVOSl1LzjW43bZjebcnR8Iq+d6SoAAEA7Ueveax4g7Z4KtShE
PWD0hXM8GJ2bX/sPf5H4nd8/DM9efPjw+JwvDyIPJQ8oD3t+WLy7CL02ctuS
Yw+Oju68Z59rxEjHviJNQs902NTZrz41SzWvTHunRj66AgAAsGS3847gpOaT
vnC4W7Rvr4TYBy+TfjAZiv3w/4j8g99M/V//MvNnP13/z/+lwSP9Zz/N/MVf
qdvyi/LrkX/wG/Ef/XN5wOY+uyaSIN3vGzsplercJzg756zacy2VXhvy+XX2
819cXspbpZFWSYtIrtY/gb2+qWgstrxiugoAANA2okvLs2+TOs8oabxFU3Tz
u3uNjPS+bdPY49PTbufI+9x2MRrb9Y41fiz+sj/4Xz+3vpRf39rI9np8ZjeE
vZO87u6p0G0f68hV6nntuPom5Kuja2BQb40fP6wx27su71VbDebZyG2b/bwD
AAC0F29o5rZFWlpE4srozFwrHnkystDIHqy+qekbR6fIpXjYFq7n5xfXP62Q
LG3/CZWSG2/bQ0pN2r36dLn6XCNqZX71HZ0Ojo7k2hrcaWs+mbLVYB55m3UN
O81uPQYAANpIt3NE8wreEp8eFqrrUwukHx2f1L+byq4SXGuyazKdGQ5MPHj+
wvWlESWPDfjH67SkpMXhHA/qz8/VTkqlRiaiSql//vPPTS3FL00SgzttFfYP
7DaYxxGc3Np5b7oKAADQBoofjiUhaz6pNzST3c43/WEl/zQyAUEtxSOBv/qb
aqmTx4wP38htu6dqR+nvHh7Kw97WmMrmttVCoA8+aVPIdev1+OrvdCZNJGmY
mEr7xpfilLRvq4mxkcWlO3eUAAAAuPq07r0vPKv5pHUC8GME3kRu2zVAwmpN
F3r15NNKpTIcmHjkiqBqPun1zBxdWpbWzXe+s5iSw6pnyOc3270vJDrWFFnD
bIXyAknevm3JUA3sts2WXIqhqjcwAADAbSTGtGJQTR2Sh1vxaYKE7a5h522N
CDV0pzpjV4uvrF7vlrf8Rf/wylZDq9BIc+OvB4aHZ74zVl81JayBKP/+RZ9U
Igm/57VDVWW8b/+qSe2dlootrxicBJHf3ev3jZk6+3Xyet3YtAQAAKihfwBw
djvfihVFbhxIYwlHF4Kzc5Kxn/W+qpmfu3t4WH/mQuNp/xeesb/u/bom7V99
mmfa4/KMRRP/4ue/kLSfzW2rtW4sUpva1beRs7RI8cOxFPngxUtb7aRUknxr
cI2jx6zs2gqjM3Nrm+9MVwEAAGytUqk8H3JoTlAtWvAz8CaytL5R5w4S9SXz
q+70ycSSZHjJ3v/yb3/x+aBjNbspd5Av1aHu/zOXT4VzK+3LbXWHG8O/POZ/
7h+WRxsK3TAyKpnOfPnaJRdcHuTqm9aH+pHq6pc2SE0TQL9HzlNutbG5+fjK
qqmzT0Vjmj8Fqy+VWZ+MmJlGAQAA2sXu4aH+8Qmt6JNUC2DeMGb+04Rcdbt6
rXhJ5ip1S7vjL1/2X33K9qpPXjUE1L/ypQR7Fe+tO8ht9aMaqpnw3OnpvWU+
qXsqJGFVnVdxjgfVTlXSBpEbkv91blx1owevQapBrlAwOJxma+e9rYbKHx2f
9Hp8pqsAAAC2lsqsB95ENJ+0z+vfb/aQldXs5o3DeCTtP+t9pSbkWqvHX30T
6Xf29l+6vf9398f4LSHc6rGX2xLsu8d+tbyP6ttXnwXU9P9b5P7q+z/+suev
ewfk8a8Xc3x62uPy/D89r6zvWJ35qm//MVegWdT+YrZaf6aapH3J/EZOrdZ3
1bxWbX2S9m01uAgAANjNZGRB88TM8tnZ86Hmj1fxhWdr1rpX1Oo3alR8dbe5
GnUjYSm7nVed7bf17V996rSv7tuvT9oIXw45blvzX1ol//XVkDVURi2/qT50
kPLkthxO0x3Ima3cgH/cnps3ydvV4Fxd+Xu5bdEnI4LzUYPbEAAAAPuTUFfY
P9B5xvzuXtOHQ9y4j61F9eeribFW/7mE+c++fq2GPVtDa6x+e9XJL7ldfXl9
3H71aJwa8ls93rE6g2H+uu/r6pXSpbxUek3aIz/9skvtVxuOLpha1t4iiboV
cyseT1qLBtei2dp575qYNnLqG0kL1/6bNQMAAFMkHj8fcmjuwk2mM8H5aHMf
czW7ed8tA7Lb+V6P77YGQiOs5K+O6qE70qL5r6+GbvupJNXrS8erBXnUnl+S
/K25BqZIqJYiTY2ZqU/eP6bm6qp1Lw2uC1RDbQlnugoAAGBTkuX0zzoMxeJN
HwvhmQ6rRXVq3LagpaQ1ifotjbL1V2uUtkaf12+1NaTOIZ9fblzf4dcgtcHu
YxpELSINJYOzU8fm5m217qVcisdsAA0AADpYfGU1HE9oPulwYKK5y/uXyuXb
hvHctqDl6Mxcq4epyONHFm+YqGuZjCxIw8f60jke7BoYNL7kfg2psOkfxDTF
gH98M79j5NQrG1n9E9vrYOg+AAC4jS88e2OXeEt1DTubO+h6aX3jxvRlTYCt
6S3XMwV19/Cwz+uvcwdpnvR6fDdGVqncN2WLweFSZL9vbMP0oqDXJdMZabIZ
ObXaCdo+WxIwdB8AANzmpdvb9JUw62vFMGP3VOh6HM3mtp3jQYn61g5Wis7l
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
1PylqL8j6+1h+i8bHSK7ndf/UX5mKzc6c8dA7urjw+Gh2+V69ZM/rY5/o3/1
/6aXG9qYVcU/adQ0eLx0eyW1fjE4LLf7vH7XxPTY3Hx8ZVWuVYMNAbUgpxzP
el/dOMz+vkrlcrdzRH0EU6lU5JHV7Fc5UXB2Tr60w5WU3CjXzTpeOFw1d9BZ
5MOus7zKNa2qFpGrsXt4qOFEd2KiLprCSikSoYttkvYbzNukfdJ+i8hVVX81
1l+K9RdkMf2XjQ6RWE3rX5BnLrGoNvFsJP6traz09vYODQ5Gurqr49/eWLCR
7Pfg+CehWrL9wdFRrlBIZdbD8YTkIoncckxGFiT51xlI3+caUWlf0vjVpz25
Ht+97wvPrmY3pSr5Vx5NQn71EkDGr6S04KR9JIdcpaX1DWmeXL+P8SLvpKZI
3Fh8cwXno/Kn1+qzNIKJumiK4qe0b3XvW2lfcq8VZqzYrCKNiruqG1N+ReVk
6zvVmccab2N9U+4m51Ip9M4gqs51vRP1Xmm/utTiNwHYor5p9cpa6tRQ/Zj1
WxNyt1//pObJVv+6KkBdQ7mDurP65ML6XflS3bhvk+rGtH/jFah+jawX1Lpd
3WVtFWb1b6tHKFa93NWXRV3be5Vtc+o9XN0urv5jsZj+y0aHmIrGJMpqPqkE
V9WdeGf8O9jd/eqrryJv3lyUSkeJZPL3/sg65EsN8e86aQIk0xnJtBILR2fm
5IlUL4avSBpXK3OqKbry5Y17yzao+OFYhXy5bisb2Zq9mdTYIbNXUi6CZzp8
W8i3tMXLrT7HefCvN0heR3k1W32WRjBRF01R/JTHVICxIlz9tK/uIxlPfkXu
ZgXC4jdJUoVS9bAq+VjfVCdS368/IEflW3VbtUeK12J5/fE8qmx13upHqz6F
9Qg39u3f+FtW8q9+sncWYD0F9U11Ya3HV2eXL12fVCd/qzDVdqjzfK+7s2/f
ugLVL3f1bat+qz1S/CbtqxdRvW2Kt7+a1Q2lDqAuaXW7uPjN62g14tQVM/2X
jQ4xHJjQvxhgr8enhsTcGf98Xq/X42kw5ulJ+5bz8wtJ4HIB+7x+yf/VXf3Z
7bx1WwK/RP2fftnVNTD4sFE9J6WSa2J6KbMu7Yuv/eNW2o8uptSQHrlh9ko2
uHClziIf3LzK7+6pSSUtdXB01OPytPosjWCiLpqi+E0sV+nFSnq3pX35vrqn
+kUr7VuhV8Wemg5kq2dYPZTVG1xHdWdyTd/p9+4/kqf6Eaq76607XE/7t43t
qen3vjPtq9tWGLbicfGbcVPW5yM1YV6FavUjuU8T0/71K1D9XKzmmNV7b6lu
OtUEeHWFG3xp2lfNxal+R6nrbL3TTP9lo0NoW2PcIiG5a9ipbteLf4WtD9nV
gS9/treavCzu2zDtW6S55AvPSniTHK6G1k9GFqw2lERxOWr22+157ZCj8cU5
JYJ+MTj8fMjx+devq9O+PIha+actrqTOIqVhJc2rgwd1jAz4x3OFwoOfZoPk
DSOZv9VnaQQTdfF41QHGCnXNSvvXc2bjY+lblPZv7Fov2iPtX/9koRVp/7Yr
oB5f/Yr6qVVezcPW+VDG6t/uyMkC19uw6pmqT6zUfayLZvovG53gpFTS38Eo
MXg4MKFu19tu6T993zoqgV/aOe0rxQ/HY3PzL93ezFYuurTc7xurXte0Ju2r
FCpxtPHHT6ym1exXaUpY33SOB31T05L52+JK6ixSLVj0sM0OkumMvJQPfpoN
klPoH0R3Iybq4vGKVWnf6p610r4VRBtM++pHKul976aRNo2n/RtH8igPSPs1
A2mKVSPS1R2qB6tbamZi1pz9YWm/zkiextO+9TLVvwJ10v71K2BF2ZoB/Neb
GPWHYNUMcOq8cftKdd9+dbPIen1N/2WjE+QKBf3rfkvCCcXi6nZbZNR72dp5
LzlfDonl1tO8kWTRZ72v7vXg3tCMPGx1ELXGq7TFldRZpGpeqaVQ7zuqp3x2
1jXsbHDLsAeT5lv1FskGMVEXj1e8NsDeyjDWIHmV/It10351V6d6qBu/f691
cqzfrcmW90r7NY9QXZX1vBSrsVP9zeqZAtaE1sek/ZrHrK6qwbRvPYU7B0TV
9EWrAupcAdX6qH7YG6f03pj2q0cHXZ+p3THj9i01q1dVv3nUN03/ZaMTJNOZ
cDyh+aSSga0dS9siozYus5VzBCfVeBt11AwIUVvuDvn8am8syaKqZ16t4XPn
45+fX/xi2DkcnLz+o7a4kjqLlKsqV1td2OhiSq7zvUqVHN7q7W53Dw/1b3Vx
Iybq4vEM5iXYjWpfmK6iQ5j+y0YnkOCtfyyBa2I6v7unbrdFRr2Xi8vLjdx2
4E3k+euPmV/Cean87bQItdmWNbwkm9tWg3kkjjbY/5xIr710e69/vy2upM4i
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
bj5Vp1K9BTDfa31t0bV9vK18ENTNS3TPQLZP2IrIyfbB3+ZXssbHNHZGPDmP
Hwo/hpezUQls6ngBA3VNrq51pCgdodCzn/yMt/3uTz9fnDO1Di/aPtxE89vD
1rfx9vChPhBqCncF+4f6XoxBq3BqYXFp9SW0Ro3nz/Re0BcST02NTevPzIND
vIv9EJpFODZEPIPJCW8sk0HYQYUW9S6qQHSmUixInsW3G9g+g4m07n7ztq9w
7xpUPlau7bNTofCzAcU1mgG5/M+L2b7udakGFPBhS8UuoYbi9ovDgqC0paey
fdWR7C6r7kix1zFsWC5/frJ9wiQiJ9tv7+sHeZtZXGpo8+N0NCxaAwEl9nDo
L14d2D7/8uKdy7+ao8YOzNj+0vx8Y2Ojr7U1+dVj3vZ3eqJmVL/cSB521TZd
sqvBMHjd9aqgxL6ob+BnKOWZmJsH67Y5d/qkFzOykiacj12yRRDXG9k1m3AH
Iifbr/OHzi8u0FLA832RLn4RpcJl00PWGEMxgPA/8vmh1aP7V5yjxmBl2Goo
aft729uPHz+eSqXOT04OptLpD77DNvhqn+0TxYiOJrV1Ex6S2pZWg9CvzZ3d
5kiPzVnTJ7e15RMy5JxwI7KdiCC8ieyaTbgDYZPtHxwe4QABEFo0FuzH5leS
7RyKlwz1cTvLudyjtgCLToFCgIYPP1DXpqV1S9p+JByGzaTVk+0LQHl9+CQU
Zo8KPCTGno/k83loUeq+FLCbk9NTYUP+Cdch24kIwpvIrtmEOwADF7MU0Upu
vScxWriMQ0hOz+D8ioHeKBuiC1YDluKNSRSN6RiK8wsK3298BoaPY3XjyfFi
ERpVYmT7W2uvswstD+/uLKQvlBLjcMn2RQKNcf5ReedPg0Mg/7pvgiSuI9wQ
7JQ1RphwOLKdiCC8ieyaTbiD2vaAmG7A5OVEKzjBPnZfZ3Pr4PzsgNWNTdVc
9F6Fzb2PX3Fu+cLl6gMg/DbFsRutrvWL99iW73tKtu8c4FFhqzAXrt4E8YM7
dN8EjU3PVjaBZ/V0DsWz6xtSkiYcjmwnIghvIrtmEy7g5PS0zh8Sk1b3cAI0
AKP0wVgwIIF3lZHJdGJqWkxmpBOJj7A1T0HvsT8fPR9aQ8X6bKuBbN+lhGPD
LLyNvQnC8R3F3gTltrZkNZyhlQGNeilJEw5HthMRhDeRXbMJF7C1uyfMClq6
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
sXgrHParhmcf1j2t7xnQPeBuMPLde1/BNjA1az7z7sI4Gsp8SWJBQUlu7+83
BDt1nyU4rH24wnWy2vv6aSm960D1VkMQboeP5LFqcIHsmk1IpuRk+8fL2Ylv
3jpefWmH6uN2tJQZ/5NvHS4tj0ymQfWz6xvCLp9gQKNvJVfa68SAY3J9ka54
chw+qzr5oUkIPmkwwNaMo4J2gsyvbb7yRwd+XNekPR4MH84DH+BPcECFV+Js
dhXFeNiO+ZLEz1iS0BDTdu9DQwCaAxXb/mByospXOYQrsERsCIJQIbtmE5Ip
Odn+RmNL9vO79qk+bplffNz18496EqOnZ2fCrp3gmV1e6XsxJjsXb5lZXNpT
lNqW1oY2P+6Bz+jeoIvf+13dl61+bJhgfzJseBh2xYNwMkeFz3hAMWXN5/P1
gY5ftxg5LfwJtd8bcCX5FZQkKnT1JYng8drufUwUhL9i24fmg4uWgSMqRrYT
EYQ3kV2zCcmUnGx/6Wd3XvkCdtv+RrMv/aP/LeyqCS3Qzqrzh6QHUMWT4xif
D8IPtg8bfIUNdBE72GMTqV81PCtcGimqI5ok3xWPUsoOMNb13/kCtaFIsb+i
91bsqA6EleRoeubjJ80F60oSDmMxUarufWxHVGP7ua2tzqF4Zb8lXIRsJyII
byK7ZhOSKTnZ/uStDw7S03bbvpKcgISEXTWhCxiaTeusmQS79OGDL9IFH0Dy
s7l1XFcLFRSUr7Ez8tP6t7LKh9/AZ9BIpprYw8yCyfleaxWwv6U/1trdZ5wx
dGBrLlI2WJIYDfW/LS1J3uS39/ebwl04pSfs539eWUmenJ5Chiv4IeEuZDsR
QXgT2TWbkEzJyfbH/ugbtgbt4wZJQELCrprQBVRf7qzmaPuRwaHoSKJw6fxs
RS1QxF81tz8JhUH4sWu6WI904dI8+R7pYrC4FDitolnuTRuObuWlygNLsjnS
k13fsLwkeeBZUkXaV9O3//bngQ6K9PM8sp2IILyJ7JpNyMTMZPsGtp+fGWPb
xUbxFsHKWn5kgm1k+47lzZvzOn9IrlCB8N9vfIb9+aD6qP2FSxH9oqU9npoq
XLo37mTdxaiaOA4UNm20uXaYLTsYtjuPn3UldCyUzclTbNIeN/K2JJ+3RUeT
BRtKktd+vnufHVmN7XcOxcta9ZtwI7KdiCC8ieyaTcjEzGT7BrZfqL3Dtvxo
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
pA5D1b3PML/GFpyhJzFqdb4Ip1CWO1lLMbOyO5LHoB3BhljqUuyHxr8yTtGO
uH3jvn3+q+oWaOfeYfB9+/grM7FMLBAIPgiekEcpdb90XzewaBwe49YK2T6h
wmRAL9n+daYp3GX56qszi0u6wRsg+SCoIPzWJlcBs8srfS/GZOeict68OYdG
U3Z9Q3ZG9AHb5/MGnt8U7Ljf+Mxk977y+rClq9e23BGSqcSiqoZNv4moZMlW
29f2V/NH4l91Pdbghwa/KpmiVbbPYmb4Lnd+Wk4+ab78eek1afs4RSrDYLId
1QycInv4DYpdZfv8eyVe9Ys9nyr4eCd2frL9awv4wCNz6xaR7V9nRtMzsFl7
TpA6sDvtskrR0aRDlrI9OT2t84fcG8wTm0g5eR7Rldy6avw1BnTBU2Gyex/u
jpfmTSJ4rBQsp2LeqFF3yz1/Zb9C7OjbJ5yA7JpNyGFXUUwGaRjYPhj+77fF
CbJ977G9v29mUQbzBHqj4HX3G5+B1/F9uZm1HDyQzhHszqG44Kn+rSK7vtHY
GYHmvOyMGNHa3ce/xImOJMpaUdfXG5UypoMQgGwnEoFB5AaPtuPdDJX9Srnq
eLdjlC7hBGTXbEIOoATgM2aOTL33/uuZuWpM3sx2kJ6GhOy+aqICqg/m0UZo
4EJajJPT04Zg59buXjWpWMtCdjUSH5Gdi7KBkgTVd/5ywNrufQZoPy6ybPDz
6GjSpW0xoiSynYggvInsmk3IIb2YMfmuf/EnP98Khu22/c3n7ZCQ3VdNVMDY
9GyVATbx5Djoffbdidb5A8KxYUilmiQs582b8zp/yOE95Fq6hxMjk2nZuTCF
qnufgYFe8MAYhPFPLSwmpqbtzB0hDdlORBDeRHbNJuQASmByFrv1hmerX/zO
bttf/vXnkJDdV01UgPL68EkoXOVJGtr8sEUGh2BT/Wl+JevrjTowDDsSH3HU
ZPUlWVp9CQrtwJLUJbOW00bvg+erZmTVZXVj041vXggzyHYigvAmsms2IYfu
4YTJV+GH8wup994/ya3bp/rHqy+T3/hW0raVW4kqAYesMjjEF+naUxQQOVWf
7cHhUX2gY+/goOo8Wg9UEJPRbk4AlwmwfAIl+/j/2XvT5kaS695b38KvFf4I
fu838wkcj0MR1yHfCTs67oTunXh8bSs8lhfZmkeSZckeWdbi0Yy71dPdHHLY
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
rjO9ytu3RGJs9XuMMkWWNUAdQYGT3C24ARQXNrDwcOYPbVCIHTtaq/ZxIL2o
vnOLOLqoiRkZLJDrT+/N7CtksLU3tCZOU3XPZpzGTLJ9Iebzb+U3XoXHHu8h
7MkVDwn0i3Y/KXzh/Bf+fw1YTxYBmEhnCmYUMaP2ifXtHZgMFqYSZQTnG1vZ
D76b+cu/fZWZu764sGRBUSgQxZ4bPvpxLWixWOQ1NIwU+rO5M+CAnz+zvNIW
66317PrGXF1fy0MkYkPDpPaLWVWxxNja1raDFWRsx6QKsgMD5QwhZ16hlUSv
qCsQ7TbtaKHaJ82JA8kymPQn+ag125clg2Udi6PIDvCSVSp49IqpldNU3bMZ
pzGTbF+v9gv69o9PThv8wb/9zeeyb78YmggfiJbGQFgvXcyrfYAKUHLOmkvz
4mauz85m3vuLF/cbrk5PrZL6tKBAFIvCr2vQH7t3dKTJNEs6v6G9ozXUZXda
ntXNLcjgw+NjW4/iBmYWFkVmHhhQuLZYgn1xysmJqy3L/vGZWZ6Mw2OYVEF2
UEwAW+sHztWH2hdSUyODKQSlGhlM4TFyKAvWoNq00jg4h2QwtjEIgymLGjpN
1T2bcRozyfb1aj8vxe2TaG/qHfyXz5/8/EkbttTE7esVOzaWPf+0Pf7Tk7NZ
zZZlqf38bVRPYnqmJRLjKXetYv3T+wvf/7G1Ol9eUDgOofosK6Et1itS12YW
l0h8OnBctO36mVRa497P32p+sqpolC4uu3iMgp+y6md8Y1yFWZllA8UEcFnO
2JJAgOk9tO5R+yLeu0rE0xBZBsNoonOv3ulNJZCaxRvZAW5wCkItW6X2a+g0
VfdsxmksTLbfOz5RLDeIUP60wHzQf/tPD7642+b72980ar6tgNXNraZgVyo7
x7l6quQkMzf97nsXL3ftU/vnm1tT37yDA6k+17JBA9OkFXJglG5dSX1iam5e
TrwPkU+PTiiMH8p/7e2kD3tHRwbpfJlaxKQKsoOCApii3C08SkGx5x61D5la
/dhVKlzDv/7rv+pXyo8SyrWqhKiW46yMH8SIqBtLInlq6zRV92zGaSxMtt8Y
CMsuuAoID41YlUvw5OwsEB8MDQzXQ7SDfWw2PVm/+8A+qU/Lys9/jQOpPtey
QWt/HI7q10N8rlUx6ZgByxub6LB1JfXzt1Mz4Kz10fvQ+Xgj5zu9ur62MJ8w
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
wqH5p+cXmoJdY8/TZfXu67Ozl52hlf/4VeavvpP64z9N/tGfVLBgR+y++stP
d4ORG/5tcRmWSy8XYl5Rk24st/zK9iIsV/uMS1DdsxknWN3cio6MVrz75u5u
NcZClYxMTYshkIwD3FxdZT/47uKPPrp4uWut1EeBKBaF4xCqz9J6WqPdYiAq
Re+sbW7RQF2auKqGmFlYlE/HJk7PzweTk3KYkDHHUzMz7/3F/Hd/sN3my6Wm
Lo+OKmuHr/cPjsYntlva5/7hw/T73z7JzJU8NOMYqjWRE5jM56nxYJuksr1y
bx3vVo3SZdyG6p7NOEGVyfbHZ2bHnqctrE9Z5F6dQA8onL6zDrl6dbL684+n
331vL9INaWSJzt8NRVHg+qf3rz064elEOoOF3h/mcsG+uC/WXYsR+/i5aIv1
OvYsDzZFaGC4vbvPeJ7ureanU9+8g1ZkrQVKzRLK35mTZUqiWhMxjDdR3bMZ
J6gy2b6vL179qLpqiCXGlIwaqHOORp9lv/0PqT/+0/S3/u/cP3xofsn83T9n
//574uPzO++nvvFu9oPvHk/NqD4nG4FqbY12q65FtTgs9QXLG5u4etGR0YKj
8k8yc9DkxWaCqHJBsSicPfwuQbUmYhhvorpnM05QzeC184uLR76AWte6JsMh
4yQ3r1+fLi7v9/TvRXtNLpkn7X2f/IbeY0fs7snQHT3QyTv7B+Ijhe7Hx8ZT
sxl1lSoDSP2WSEzJCJ387figqbn5pmDX+MysHMyPFph+/9v73X12SH3h4cch
OIbfDajWRAzjTVT3bMYJqkm2v7T+Ijw0Ym19KsDXFzd+0M+4B8i2KjO+1iip
7Fxi+qvnF7Gh4ebOAIXuu5/51bXmUKTKPDnVA1sjPpFCTcTjvL2u2Pz3fmSf
1Kdl7jv/DONU7bkzeVb7DGMPqns24wQN/mDFaW3wz+uGQbLLG5vVDDRmHKb/
WdKmdC5uhpLAy2viY+MQ/CJFj2uh6fOUS33Bzv6Bv38AC96sfXx3u6XdbrW/
8bARB1J93gyrfYaxBdU9m7Gd84uLxkC44t1bIrFqJuG1ipubG9SEp86pFVY3
t9zwSMh5Onr6t/f2xUfKvelyqX95edUW611af6G6IlrocUPq//zV4VDCbrV/
EB/K/NV3VJ8xw2qfYWxBdc9mbAdaveKg98Pj46agWyYGmllYHEzWWCbDuoWC
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
9qK9L+4+mPu778289xfP/9f/O/Fn38Ir3mNJ/vn/Fu81C2058/Zb7I5CDvoH
OVbfbajWRAzjTVT3bMYuiiXbz98O1KVgHln2+/sGl2rfx3V1fd0civBMWy4H
LQ3tU3UtFNAW67UpzOb45BQt3+5IIbcxkc6MTE3T+8vLqwZ/0GBj2JjZlVVH
6sVUjmpNxDDeRHXPZuyiYLJ9Ajr/k6bm2NCwWHN+8fpBh//i9Wunamcj3nhI
4W1o+mNvZIMvi1R2LjE9Y0fJoYHh6fkFO0p2LRrTfntv33ge8FqcKLwOUa2J
GMabqO7ZjF0UTLYPEqlJX6y7NdSVmv0qhLhndPxhR8DB2tkIbJb6VJK1Rf+z
ZB06WnOvTh6Ho5YXC50PHevtGB49C2vr8hOi9OKysSWF38OmYNfxyan9VWMq
R7UmYhhvorpnM7ZQLNm+QKTlyd/mBvzsy04sjlTNCUamppOzWdW1YIxY3dwK
DQyX3s5zdPT0Wztd9d7RUX2KWF9fXJ6XeTA5WdJ+5F8G96NaEzGMN1Hdsxlb
KJhsX542V3B1fd0W6yW17xnfYO7VCfSPNwKTvAoF88AsVV0Rp7E20gx9FuZD
TU+TURk7+wctkRj9ZP1Hm39+YwvXoeSwhd2Dw3vtvmLf3g3FPrj3OZbvN7Za
XF3GNKo1EcN4E9U9m7EFfbL9YF/cF+uG4KeptYTyH3ueJqmPxUvuwfhEip14
LmcwOTmzsKi6Fk4DAwemqFWWNfpvfSah6n+WFOMUoPazLzYf+QLGV3VwJgsl
/99tvmLPViDyYTVYX1emHOxTO++8887XbsEba0v+8MMPUWwoFDLeDNvcuXPH
2kMzjElU92zGFvTJ9ltDXfR6mMthaWjvyL+d33N0eqazb8Bjap/d++5nY+dl
fY6axFlbMisE+m9zKHJ6fl59UW4Dyhwanjztd0O/nQeEPmLBKTcGwneDUfLD
Y8vk3GJHTz/e0wYFRXtT75vG9p9P2mFmFjyoKJ+2ZJSQu1XFGiYnJ4tpGHyF
DaC3TWqekmofol1zxK9//evG5ZPav3fvXslDF1T7WImvjPelaoiK0WUpuQvj
DHRr5DaAN6L1GuxIjU2GSqAmoSmz2KFFe8Ze+Kg5umgzqns2YwtDqan04rK8
JjY0TO59yrpJ4n95Y/Pq+rr/WXJmYTEynLA2nFg57N53OTc3N/UZcI7uVkxw
mufy8qolEkMXtqRKbgNqX4TTQH7nb8Ns/KMT9NXH7Z1tPXGIfHyEsMcGA5PT
9ztDtAHW0FcF+dEXT2Ep6DMYaI7ITn5VCBkDDUPSxRhn1H5JJW/y0NWrfdRE
SMTqq8RUj7750Q2i9/jK/LMkvWErF1UQUvu0Fz29yt2qfXFQVIBaneqezdgC
pPva1rZmZWo209wZuN/ytKG9QwzRBZTFLvfqxGNqn9377gdmaSo7p1+Ptgrj
tOBIEw9AwTwFU2aZZ2RqGvasVVVyG+Tbp/ckwkWYDYzEe+2+L4dGhQceW4aH
EzABhHOeDISCoBz8PC6srRscHZYFKmDZyTDlIGSMXu3LDk8KmxE+VY0fVV6v
Edgl1T6ZDyhf6DThXyUfvlwB2ljvg9X4bOlEqDJyVTU+WGOzhXYHpN+EMtTX
is5RPhytl2slLss7t4ia0Il/TQpMko/FaMB101twdI/oPd0IM1dPyHJN+cbN
lUxRArdM+PZlhz9VRnXPZmyhLdZ7YO7m7h0d2ZES0CVATGoimhhXAQOzo6df
XgM7FAbpJ03NEPy+WLecJ9ZLhIdG5Hwy5QJbviUS87Alq1f7wrcfHhm/+2Wn
vAG0fUu0+14gQhsYg9Ig9SH4NeuxrxwyZNWJMOUiZIxG7cuaU/gwc6V8+yRi
5Yh682pfVIA+UlGywNYcRVb7okr0lVhJJZDqFnU26dunQ5A4Fw8gCtaKzlGc
O0UiyQeVK0wFks4UYSGyOaC3mBgBaWlhQ4n2SdeWrjxeS47pyOkc+8JiNbYU
6I7Ld1C0CkK0dtU9m7GFR77A5eVXM8LTdFrQTonU5OHv3vSpuXkPewghh3hq
XZcDYzP36oTer21uNXe+mfchs7gUGxpGWw32xZXWzi6yK6v9z5KV7YtWjYu2
ubtrbZVchV7t59/G1f9XS3ti5o0N2NQ7SGuw5cMOP37xRNy+QVIdfFUsH5TI
yWPGamBsQsgYjdqX45NlDV9Q7Wt85hodXjKyQqh9oavpo8YPL2SYgdonKSiC
7UmSaepsXu2TdCdFR8UWrBUVLgwN0pxyTeTKFHQ+iyrJ1gSjRzY8ca2oxcqm
Vu72+pdU+/TURr9e3OhiO9IRxe5C7cuRPLSN6p7NWM/p+XlTsEuzsjXUBSkF
BUU5ecT68NDI0voLZyvoKJBV9TkUtFZITM+I4RUQ+bBJxRtYqV4N5jm/uCgY
PW6GntHxsedpy6tUE+wdHbVGuzUrD3I5/Uqh/GnRROb8quXLnzS1FPuWUYis
oypT+8Wc2IRJtf+hhNDVxcYR6I8ii3Cxvhq1L544kK7TP4DQ19+82teXIJfP
jn0D5KAdumg5XexTSXPJWNKLJwUFd9TcO7IsZLUvaqW6ZzPWs7N/4NN5RAtG
REBsPPIFPD/trL9/wDhMl1EImqss1SDyscAgPfTWr9PN1dXp4vJeV2z90/ur
P/8Yy9j3fpj+8U/pvZnlxd0H2H0hMd4W6a4y5r92KZi1Fb0bFlBZ5Wzv7bfF
eq2rF2MZssgxH8kjK1JS+yJMpQK1T0EUoVuEw9wg8Y5G7QuprNnMWO2XJQjl
wQX6WhVU+waRPAWtGGGwmIlCqVuEPz8nDciVV+Lmyu2N7rXmkhZz7OdKGQJm
1L6oleqezVjP0voLk/99Gzsv9XaB99g9OGwORTwc5FzrQO1r5kUizZ9IVZu4
xg1A5++0+VJ//KfP77y/+MN/23jYuNHwRSXLw0bsPvln30p9410UiGJVn5nT
nF9cFBx3n5iemZqbL7e0lkgMvwwWVY2xDKFb9CpUHnsrr5cDp8W+9FEWw5qI
F4PxsMVyXcpjbAumOtTYI5qVxdS+XLditdJnCvpaoWyNYqCBXu1rLpQwEIqp
fTqi5XMTeA9x/eXLKC51wZHmstrX39lc8aauQQzLFVDsmdwsxQaqezZjPfjj
0z/ojw0N67ccn5n19iBWCl46zOWgBzTTjTHuYSKdwSKvgdTHvYPap8Cz2vXz
n29sZT/4bvZv/vF0afn64sKSBUWhQBR7XmdZIvHLho6sXx8aGNanICtJcjY7
MjVtRb0YK6lUc7kIzdBgOQaphhADFlRXhLEG1T2bsR59sv3823z7De0dsnDq
6Om3ZJYfd5KazbSGuvCKs765ufH3D8wsLHo1Drym2Ts6aonE5DWk83Hj6A6q
qliVXJ+dzbz3F5uNT65OT62S+rSgQBSLwq91Q029Crrw43C04Ij7xkC4gnDE
45PT6vOgMpajWhNZgJzBUh9oVCvQIGXVtWAsQ3XPZqxHn2yfUp180tS8JiX9
Oz0/f+QLePjPDqccHxuHbiSFf3J2hvO939quuFpMIdpivWK6B9wviHya7rmm
Wf/0/tJPfmatzpeXxR99hEOoPkuHWN7Y1KfNzL+dVqOyMgPxwWryoDJ2oFoT
WYMcyVNzUl/EgaiuCGMlqns2Yz36ZPuQT9D5NGORWFkw6bSXgHUDqU8PNfK3
WYnaoz2PfH7Pj0quRVLZOU2QRu1G7xAnmbnnd95/vX9gn9q/eLk7/e57OJDq
c3UCKPOC4TqQ69GR0crKzK6sxhJj1dWLsRjVmohhvInqns1YjybZvoysoOIT
qen5BacqpQByDuOUmzsDvlg3TJ742HhHdy9kA66PPj4Ea+63PBUfOebHSXKv
TgrO8gYrda02va+bTU/W7z6wT+rTsvbxXRxI9bnazu7BoT7HJjGRzlQ8+Ai/
Aw3+IJv/rkK1JmIYb6K6ZzMWIyfbh9BtDXVB6xYUrs2hiMn5dmsUnHgiNYkr
gFeofbz5pKk52BdPTM9A8E/MzOJ9bGiYxi+TLUAGAgU+4Vvsovok6oiOnn55
xijcFxp5UaNqf/EHP9nv7rNb7e8GwjiQ6nO1nf5nSX3iTSI6Mrq8sWlHyYwS
VGsihvEmqns2YzFysn3SS9D8JGJJ0NJXh8fHUPvKaukUImifEIbPYHKyLdb7
y4ef01xOBFQlfYTCxGa4buJyMQ4wNTeP+yI+4vrjdsBAq9FRulPfvPMqM2e3
2schcCDV52ov5MEolkFXnou5AuokC3ENoVoTMYw3Ud2zGYuRk+0H++IkbqFa
sZD4p69mFhbjEylFdVSGyN9+cHTU4AtA8MvTCuNbkvdQmDTBk9heH0NOTw1w
SWvU8+xCTs7OIOpubm7EGjK70IxrMYY/+Ud/crb+wm61j0PgQKrP1V4MUmWe
X1w0+IPVFE6pfrz9lLO2UK2JGMabqO7ZjMXIyfahkcSw3Ib2DjnJSWQ4Mb+6
pqB+rgH/8v3Pkk+6oiIHKcX2598G/MtvKJ4ECl+YS5TLFB/pKQCF/bDyr5JA
fFBOCVvTs2sZqP2bif6vlvWlYkr+Zn75Ojr01VKXav/q+ro5FCmYeBOsb++g
zVR5iPGZWf0EJYwqVGsihvEmqns2YzEFk+3n32Y1pPf4A23wB0/Pz52tmhuZ
WViEloBmyEsTkJGSFyH9+dur94uHDcJ0ovG85HnOS5E/8pMCpgJwO2CCFfwK
F7+2jCkDtZ9v+EgsEPxFXffRoZsPfymW+lT7xqnDpucXCs63VRYwJR6Ho/JD
JUYhqjURw3gT1T2bsZjoyChlkE6kJsmfD8mqGai7ubvb3t2nqoZuA1cDgj85
mxV/9xTAL6Q+tD0N2pXD+KHtsVAOn0+amimqx+AoKLMWw1Ec5uTsrDEQLjgH
BC7+T+99VkMjKVjtW4IPVl7xeXJ7RsezK6uWHIVMfkY5qjURw3gT1T2bsRjI
+L2jo/xtXEr+1iNKseVyGA8/udZwen4OKwmXToSRYI1ecwo9L8dHkS1A35IW
hWFFAT+yvKdpYbElOag5vWcxwkMj8oRHND6CjFb27deb2t/e2y+WeJNoi/XS
z12VpBeXe8cnqi+HqR7VmohhvInqns1YTIM/SMkroPahlIRAkpPP+PsH2JGl
B9cE0iKWGMu9OoHUh/4vdpWg6km6442Ys4yGQtMGUKdyAk9KASruBT0pwCt7
+/VkV1blYB5c0toS+QJW+9UDBW6QHvPy8uqRL2BJBM75xUVjIFws7Q/jJKo1
EcN4E9U9m7ES+s8SH4WYhPgUQhT/aPiLLBgswUA5TM3N4xpGhhPJTPazLzsh
/o9PTo33IvVO0f75t5E/cgw/GQJkHdBCUxvXqI61Fcqyopkejq4eLbXyWKRk
Tp6BeDzg91+dnxfb4PjwsLm5eW521qAQD6v90/NzYwW+vbff0dNv1eHQ0y0J
CmKqRLUmYhhvorpnM1aye3BY8u9vaf1FeGjEmfrUKDCF5lfX/P0DMIsg+B92
+J+lZ43to9+ZpHhsnHLFC10qVL2I58G38tMWRgam1sLauviICwVjSoybqJXr
VlLtn+RyT548GRocPDs+PhhKjPzBH4oFH/dfvgwGAuFQyKAEb6v9iXSmWOJN
Ir24LE/QUCWrm1vVp/dhqke1JmIYb6K6ZzNWsryxGUuMGW+D/8epuXln6lO7
QNsnZ7MPOvxQ+7Q89Pm7hhKZ5RUYAvICkbC5uysv23v7xyenGzsv8XpydpZ/
m+QHYpUeAdAh5JEUjAykvtyMxYWiaCjnJzi+eP0at7LcxUy+/c0XLzp9vpaW
luG793t/7/fF0v/xp42NjbFoNHdwYEbtl1s39z/ao8Sbxmnw8VNWMP9YZdzc
3DQFu6qZqIuxBPvUzjvvvPO1W/DGvqNYAlVVdS0YT6G6ZzNWYiYfXUsktntw
6Ex9ahTIof5nyejI6FBqKpWdg6R/sb2zvLExPbcAgRGfSMkLdGloYFheAvFB
XGRaoFhgKTR0Bh/5Al8Ewrg7zYHQ87n5zOISp+ssxuXlVWMgTME8b1Tf7TRn
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
n3Vjm3qViC8t6y5F5TY/a3n9rMm5qK+W1K8/kgfS/VwBoFaUyAOFSL+xXL1O
1mbar51Cot5dXl193uNyaLpeLTSeOJLzJe1reM6Nzj8xmc5kdJeickt/9ZP9
/iGn037G5ZUH0v1cAaBWvHr7+7lY3On/vdmZqDxQYxcSDcA7NrGe3tJdCtto
PHHCiXlZtDzrxtbi7qvrCmn0O28fJ5edPibfzC/KA+l+rgCertH4wvudvZVt
+5EnYG9hxMrP3ndobATzst3ZIw/U2IVEA2ikESMlE778ix/pOnHafQG68dju
+PS03r8xKWd+Z+uL8X2TeyiYuqm/B6em3/v4k6au7gdL2OHpM26Xv/nM3Lys
8GFLq7ETuSu/tPhyAahTVtL+f/n4C3sLI3Y6e9Z/9Y9O/+9dffcDeaDGLiQa
wM7+QWdgUHcpbLC6mW71+F7+5mMtJ8723n69h9LalNraDoSmdJfCklK9y0Zc
/7yszN13vBViC1fP+/55uT/tq8it4rrK8BK/JcDfVzZZU9Y30v6jNlcryMpy
Q6oGssjdcioXABqSkfblpywS4GVJbm7J7z/yBNTdlsHR65uW/N7JsNpEbqu/
/m1zh73lyW9uxd767snKqnNhQH2pera909iFRGNodnmPT091l6Jy+bOzgclp
qbNIzUXXiROKxSNzC7pegQY2s7Aoi+5SWFLqyvGmd42lEB6+96jzjxV+9A/G
UiLtSziX7J0y9c0zcvj1TRSX6C4rGPFe1ldx3bh73+a3tzU2kd/Lolr1ja8G
ADw15rSvwrxke1nk90bTvUR6yf9Faf/ambZ9sfvCM/+DP7s8OXEiDMhuZefy
EE+hkGgAEpWT6yndpaiQatKfepUwZl/ScuK0ef1ZpjdyQCA0ldra1l0KS6qZ
9q9vmtyNvC1BvSicy92itnpz2i+9+e1tJeGrxnzSPgBz2pfbckMivUr7Rg8f
yfYq4Vcn7V/fjJOQ/Ouf2jiJuVpkh7Jbu8ZGqItCot7Nr64FwzO6S/FoJ/m8
1FO6B4YzB4dFf6ryiZPOZOp9+qea1eHvr+svnq71pX3VFG8uiWq6l3xutPZf
35/2iza/va3cMPrtyG2V9ou+GgDwdJRI+0Vt+/JLo/Hf6bRfOD9//awpdjOb
+claynoSkJ3IrmSHstuCTSNI1EUhUe+yb45bPT7dpXgc1aQfmVsoFAq3/1rl
E2c0MlvvvU1q09n5eYu77+H1aluptP/8HwsdH75p+sXFV78uxEL3HX6Fken8
f/+n47/7TeEXn8hSTtpXHfLVYjTIGzceTPu3N7+9rbGC2tx8G8ATVLpt39xv
XwK/uiu/V2lfagG299s3O55fXPzzv579gz+KfuftxXd+uPgXP6pkeeeHsrns
ZOmvfiI7rJ1Czr3zV/N//kNzISP/2/8Zf+eHThQSda3dFzjM5XSXoiyql373
wPCDA+DcPnHif/aXC//1rys4u0ucOFLdkERKNx4npDMZ33hIdymsenBMnqlQ
qKe7+zKfv2+F7MHBl19+ub6yUmIn902esrN/YHRys4sc85G5+eZeryxTrxJ3
1rgBQLEyVo/tTpZX9yU/+AcrWGTD07VqdHt+bCGTz3sGfv2RuZCS6CSZ5I5P
qlBa1JFgeCaxvKq7FA8r3aR/H3XiJJ93D33428rO7hInzubOLt14HBJfWpYw
qbsUVj2Y9k9zuY729sGBgcO9vf3B4OC/+JfGInfTr1+/6OkJ+P2lv366L+3L
odvh7x9+GVlPb9kV+yXqf/7C9cnXL2RpeuEOxeK27BZAQ6qptN+QVKtjUa/X
WHLJMzKuq0ioTSsbr2t8nMPym/Tv4xsPWZlH7L4TR3KUhNKKd4sS5LWV+p3u
UlhVznj7B5mM3+f78ssvB3/1G3Pa9/3igy+++GJ8bExqBOWk/XQmc3tJplIt
Lq8kc4no3rGJ2YXF17u7d65Z5iIJX0X9bwM/oz0AgE6jkdnbUURCC/kEZif5
fLPLW7PfyCfXUxU06Zsd5nLtvoDFJ3j7xLm8umrqddf7ZaQ1Syp39dLBrIQy
Z9c63Ntzu1ztf/MTc9of/+jZ1uuyZuZSaV8O0TuXr/oCRjj/rMfV3hdw37Nm
Ocun3b2kfQCoHZs7uz235kbJHZ+0uPsa4GMUNpJktbN/oLsUxeRY9U9M9g6P
WDxcJ6KxWHLJemGKTpz19JYrOGpxt7iT1KSkBqq7FDYoJ+3HY7FvGvYHBpKd
3UU9ecqJ+iV68lzfdIiSTN7m9Ydi8e29fevPaOpVwujJ83mPazRSfyN6AUAj
KRQKrR7f7UsIk+spqQXUbFsuqk8+waOLSd2l+D2J5VVJ15LSLR6oamiXMzsG
oSo6cQanw3xN5pDMwWFj1KQeTPvbm5vNzc3qItzjpeWVn75rLHLXYtpf3Uzb
FfINcvyHoq+aXnhkkajP5wiAuqbGBbK+jhPe7+xNbpbVCVn+1f+P9q7bv/dP
TBqzfzo68BHqwsb2jndsQncpfid3fOIZGbfepK9IIB+biarb5Z841/ecF+rE
kRP/nd82P+vqGZrlEkVHLKytT0Rjukthg9Jp/zKfd/X2jgTLbcOvoG0fAFDC
g6P9906Gazztj8YX/vqz1n963nP7Tyf5fKvH1/8yKk+TtI+Li8umXrftg/VV
wK4mfUOHv/8gm1W3yz9x7jsv5MRpeuH5oLN3KbXRNTDMueMQifoS+HWXwgYl
0n5hOZqLTfh++0E2On6V2STtA0AVyAe3GvBfxXjj496YF0BN/iV3jd8YkwVY
Z56AwKhEGI+i7hqlMkKLUeY7M4wq20edPUbaMVvdTH/a803AI7Hg+uYq1HQm
o7EAx6envvHQY5v0S5846+kt79hEZSfOfeeFnDidgUF/aGpkNsbAYg6Rw6Di
8ZdqSqnZtX7+lrEUhr8i7QOA0yQzGFFBBQCVsY0GfPmlEf5V7Le3bV8KYKQL
9dCyc/VAKs8YY5aqacjkp7GC3C6ROj5o/zqcmL/zT8MvI1OvEqR9XH8zjPbC
dHxO16NLhG5x980sLD62Sf9Lj+/nzz5vfeG6vuvE+aeve/smw5WdOCXOi4Gp
l598/eK/PmtW+4Html3eWvimyTrSPgDUlKK5fY0WdeP3Rto3JgW2N+0bwUM9
kPw0Gh7ltpqD2CiSCipGG2aJfkd/1/q8w99/55/Ozs/bvP6/b31u17NA/drZ
P+gdHqn+48pBODA53RkYzBwcVrD5xx1dciIExsaDU9NymszMzRsnzkE2+1FX
T8UnTom0H19e+azHlc5kjP8GsJG8cQ0zZxlpHwBqk/qUVzFAcoLRDFjltH9f
274qm7mJ8sGnI2n/vq/FN3d2P+7qubi4tOdpoG4VCoVml9eWsWvKt57ekvrm
RDRW8RH4UVvH+x3dcqPD0yeHelNXt3FedA4Ef931wsqJc+fvZdtnPe6pV/F2
X+Anzc/Lv+wXZVrZeB0MN8i4jqR9AKgd8glutPWpJCCf9bKo6/VUw35R2ld/
srffvrpt7tJj7l0sj6Xu3u5+XKIdUv4UTsyXmN/8Hzq+bpjPVlgRCE1ZmXD2
USTej0ZmWz2+1Na2lf185es30v7PPv0iODV9fXPi/Plvmz/q7JlLbVxbOHHu
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
WkvZ24ctrcY+Jfx/8FmTMUVvcj2lZazRp3zibO/tu4Kj1vdzmMtNx+fk8JBj
uwY7zFQ8yjEAADaSDyP5SLK4EzVzECON1KbVzXSzyzu/ulbBtlUbUaT1hUu1
wKvYr7rWK5KHrQ9Xrq7PlZ8q5But/YVCQZ6grgbhJ3viSC3S+F5DddmS96XE
NdRF5F1bT2/5xkMt7j5J+06PpFSZimcwBADAdj1DQevdGA6yWYmUDCtdUyQU
Tb1KSG3OyvCDEkerMEq5RD4j7Rst/Nc3T8GWBlLVsK8ipezf+L26YNbizq14
gieOvP59YxMLa+vXN2+3qtnJL9UQTPf15lLkUIzMLcghIUF6KbVRy1c6j0Zm
pVKjuxQAAHxDPpLkg8n6fqTKIMnQoXE28Fgn+bx3bEIWiy2fg9NhFcwcIiFf
kp4xtL7E8g8+azL+KoeTlVHZZW9FnfavbzXs6x2h8fqJnThSj5P3V57v3tGR
xHt5383f48hbY75ruLi4VB2uWtx9E9GYrsHzyyeHlhT1+PRUd0EAAPiGfCTJ
B5Mtw4Ns7+3Lrp5IbqllEo0kUIUT89bf1vnVNUcHou8J9EsmV704JOlJAkyZ
BlRxBUetzPClhu43vikoIk/NNx6qeOc2qvcTx6isyfvoHgoa/bIMxnin8l7L
8unXL4xmeXNjvjoAjLty9EpdbPhlpNnllUqfvD613JhvJsXWcjEIAAD3sZip
zA5zOcmZfIWtS+74RBJsz1DQrosWZYcSRG3Z1Z1UR32JiBLzJBCas58aeNPK
ziVYBsbGVf40x0hxdn7e5vXXzqWd9XXiyAtrJHypTL338Sfql6piJa+5cU20
VOLklZd32Xj948vLTT3//C4bQ6Gqep/U9WTNdCYzGpmVA0/+Nclrkj87q95z
s4PUUBz9RgwAgMeSDyb5eLJrb5JbJKSNzUSf8nDi1SevtuQiCUix5JK9r7yj
MwSpgGfcNQbGvP524E2L+1dNyvJT9mwE1OubqeWszNXlhHo5cSSNf9jS6v52
5jW5oSK9sYJxNfT1zStfNLaq/Lf59Ose464xD8Kz9uefd/V86fI29bi7B4aj
i8k67QlzeXXV7PLWXQ0FANDY5INJPp5s/Jb84uJSqg+9wyO6Pq8ljbz38Scq
cqi2xzv7A1ewsmIOpWqqJvOuzANI2rvtfVJb2139Q96xCSeuqJXULTUI23db
RA25b4RG88CbtpPDUg74GhzLRdeJIy+7euXLGRtHfQtjPkeKGvPNXafUDuU3
xnE+EY195fEaK8iuDrJZqXx1+Ptlicwt1PuolaubaTkTdZcCAIBi8vFk+wSU
86tr7b5A9Yc3NPoGqECi0rX8xsgbFa+syJqq64JaU26rldUkrde/P4Ckjdve
aWf/wDMy3j0wbFdfrNtWNl472r/dPEiOwZaBN+9UKBSkZiTx0omd26LKJ44c
e6q/k/y8PTZOaGZW1QWKzghzc71xvsjKckMCvBH+5ahO/f4/FldwVI1BJDXT
mYVFOXTbvP7p+Fzt9KqyKBCaWkpt6C4FAADF5ONJPqRs323m4FA+ygenw9Vv
5Dc3J6q7qslRXbmpknZlK8tdI5Orqw6LgpDx19ubl7/tgyTny1vW6vEl11OO
9v04yeebet3OXSCp+tiYv/KwZeBNc99yw8XFpaTNz3p6z87PrezcafaeOHKM
qf42d/5VHeqS540VzE33qhPUs/bnRRfeFo2lo94+1WlHbpeqLPe6owuL8i60
uPukQtdgo4/KAdbs8jr0nRQAAFY49yElsUo+02Xn0cVk1Tokp9JbEjkkaau7
kmfMYVJNrlrZyoo56hQldlnZ3Jh5e/Pyt72Tmlqod3ikMzC4sLZenVFKugeG
rU/KcCd5+vKCFI3iYnHgTUW9rebhPaXa0jMU/OTrF31jNTEUT2lWThxVe1LV
KCPGG/1t5KVWDfjGsSevlbwLxmFfNDaOSu9FI+HL3szH6u2RTotI5TQyt/D1
wNCn3b2jkdnNnd0avzyhMlL1dqLZBAAAWzj6BfRBNusKjkpAtb2/0G0STlQO
UTckqJjT+/VNqJZIb3TdKX9lw32J3ej/X2Lz8rctcnx6KsGvw9/vGRmvwsto
JrFTopoTe1apsujltT5IlGRRSafP2p8bXUoOc7k2r1+ivix1NNZlZSeOivdy
OMkNI4cbA+MYV84WffeherWZx8ZRK6vG/wfz/G254xNJv8MvIy3uPtV7amYh
OTB594CojcGJLpEAANjFoc48Zisbr7sHhiWvJpZXnWuUVj1nZFEBXt02eshL
dDEuyH3syoY7E7vswdhc/enOzcvc1nBxcSlvjaQIiUyjkVktUwtJ9u4dHnFu
/+ZqjvWBNw3yqqqMurmz29Trbuvzf/p1r6T9uhvspYITR15SqWkanXPkCDT3
5JEkL8ehqguoxn/VG0e2kiqS+tN98xSU9s20WatrwfBMuy/Q6vENToflrvGC
T71KzCwsVrDbumD7cAcAANiraj1OJTr6xkOSXafjc7Xfa1eCipbB9A5zuVhy
SUK+vClSC9M7tZAcFZ/3uOw6NiRetr5wSaS887uM4ZcRyYcV7FZdE2HOtLJ/
CbFn5+dSXVIzEXhHJ9q8/opLrlcFJ44aG1ONeG/+vaoHGXMNq6tri6YkMBQK
BXlH/BOToVhcbuzsHxhXPcifDrJZOTjDiXk5VqVK1dU/pN5BOYBv70rKr33y
YufEl5ZrbVhXAACKDE6HqzYpjISEyNxC98Bwq8c3GpmVwFCDIyJe3+QZeVkk
ycgr42jslwS1ubMrCX9gcrrdF+gMDEq4koBXI02FNnYfUsnTiKBqREf1JzkG
5Hio7CkbE3Xdvjj3+tvm8c3d3XrvVl3OiSMvqXoRVNpXdSv1s+LHlfqFPKLq
CiWL1P6kHio/Jd7LCSLHrRy9D177LFWV2jzNbeEKjlZ/CDIAAB5F4lz1R4o+
Pj1NLK+qRmwJA5IqVRNicj1lXqRs6UzGvEj8yB2fVGHJvjn2jYck4Xza3esK
jkUXl/YOjyrblUQ1VXiJ8VJ9UHM8yVNu8/rlufsnJuU38kxrsKuJJMyJaMyW
XZmvlbi+GcjFSPszC4tTrxIV7NOYh9eYwsB8+bMavX9n/0DqEdZn7KoRpU+c
dk+fLK6hoBxOswuLpU+czMGh8del1IZsHl9alnd8bCYqlaPe4RGpfsrx/6X7
d2n/8xfu4enw7sHBo+plUmBH52XWS8063ZCXHgMAGon2WSBP8vnU1nYsuTQa
mZUYbF4kdUieMS+u4KiEkOosX/X5jVbNm4ZNd2ufr4L9dPUPqcJLSJMnJYFK
ktXmzm4NxvsiEpXt6k5vzOUUnJoOjI0bnUzUwJsVTxBmXJArsb9osCOprBkD
7Dfk6IgWT5yeoaDx1+GXEdlKXZcttYnVzbSqHcjrJkev/H+Q31c2fqnUOxyd
uEEvqag6NEMEAAD2ks/6qnXmqRcSpSToSsiXmBRfWq79ZO4EieJNvW6L3TDU
paBGY778/OCzJqO7+MrG68q62ahhPI0OPPIQ5i4r8pbJG0ejq0Uq/1uZp6Di
L27qQvfAcO1fhQQAwLWmzjy1TPLtaGT2yYZ8M//EZHI9ZWUPapB2ieWSxtUA
7+YLdXuHRyro9mzMovVhS6vsUPVUN5L/3tFRi7uv4u8LoFxeXVmfj0xdbG5L
eWqNHGbtvoDuUgAAUBb5WG/1+Ei2BtqEDdaHHFETPEkaV71uJJkbaT9zcNjV
P1TBPmVvqtOO7Pz62+tS1Z8uLi47/P2NmjDrjuThg8cP2l8Xwol5o6sYAAC1
TzVl6y4Fas5hLic1QUt7yGbNjfnmYSErHniziLkGIXWTsZmo9X3CurPz86Ze
t+5SOEUqMntHR7pLAQBAuTZ3dl3BUd2lQC2StH/nOOqPpYaFNBrhrQy8ad6n
VB+MOaEW1ta7+oca8prceiT/VRydoE2j7b397oFh3aUAAOARCoVCi7uPzjy4
LRieceJ7HyvXbx5ms+bhdxQ1ODzd9WtHLLlk1wiutSYUizfwBMEAgEZFZx7c
Kbmesn12KosDb17fDLmpBvNUd6WiKjtMZzI2FRA2aNTBvlTbCPVKAEDdkaTU
c6u9FJAg3dTrtvfK5YoH3ry+GZBHov6z9ueS9tWonhcXl90Dw7ZcAgAbdfUP
ZQ4OdZfCfvR7BADUrzavP/vmWHcpUHM6A4M7+wc27rCygTfNJOobQ24OTodH
I7N2lAu2uby6+rS71+J1GbWJr0EBAPWLzqi400Q0FplbsGtvlQ28qebPMi7y
NYb6kYPWMzLOoKm1Rt7lhryOVeovLe4+i1POAQCgCwNN4E7r6S1J1HbtrYKB
NwNj45LzJeGbJ8wVU68ScsQyCE8NSiyvyhutuxT2Yy5CAEC9a/P6G3U2HFRM
DZxuS6iubOBNY/4sNVz/zNy8LPGl5c7AIK2stWkiGmvI7i6NeukxAODpYIJI
3Kl3eGRje8f6fiobePMwm1VpX83M2/rC9TIxLzVTon7N6hkKNt4QSVLhbXH3
5c/OdBcEAIDK7R0ddfj7dZcCNUfqgBUPj2+oYOBNNSeXLMbdZ+3P3cER2Y8t
c37BIZ/3uM7Oz3WXwmZLqQ3bR6MFAKD6JO0zIzyKpDMZ69d0VDDwZk+gX366
h4Iq80va7/T3E/Vr3EE225CNBnL0SuDXXQoAAKyKzC2EYnHdpUBtuby6+rzH
ZbEPQwUDb3Z4+g6zWTW0vixfdPcS9WtfQ7aBn52fN7u8XBIOAGgA2TfHEqh0
lwI1xzceWtl4XfHmlQ28aTYZe/VZdy9zmNa+qVeJxhvLd2FtvSFHGQIAPE3d
A8Pbe/u6S4HaEl1MWpnEqoKBN83aPD6J+lsNd+FnQ/KOTaS2tnWXwmbypNZv
pngAAKABzCwsTkRjukuB2rJ3dNTuC1S2bWUDbyqFQmFsJuoKjjbeVZ+Nqtnl
PT491V0KO+XPzuRJNeTUwACAp0k+qVvcfcxPiiISeCrrSFPZwJvXN2Me+icm
ZaG/dL1Q/z10l8Jm8aVlK19sAQBQg1zB0cdeUImGNzgdrqA3TgUDbyon+Xz3
wPDYTJSKZx1ZT2/5xkO6S2Ez/h8CABoPbVm4TaK+BP7HblXZCC2HuZzUERrv
Ys+GF5lbsD41Q03hu04AQEM6yeflA45+qjDLHZ80u7yP3apnKPjYi743d3bl
gRjbvB5JzW51M627FHaKLia5jgkA0JAYgwK3tfsCj5p8bWf/4LHTciXXUxL1
0wy/U5/avP6DbFZ3KezEGGUAgEbF+NK4bTQyG11Mlr/+4HRYDqTy14/MLUiF
gvmz6tTZ+XlTr1t3KezE/CMAgAbGoHO4bWXjdfnXYD5q4M1CoRAMz/QOj8hW
FgoInTZ3duUd1F0KO4UT8w12GQIAAGaB0BR9p2EmUbyp111mgJekNB2fK2fN
i4tL79jEwOQ0I23WtVhyqcG6uHf4+x/VdQ0AgPpS2WgqaGzdA8PldKqXGkGb
11/OLEtqpM1QLG5H6aCTxRmTa43kfEn7uksBAICDLi4um11emlthNvUqEU7M
P7iaVBUHJqcfXO0wl2v3BeJLy3YUDZp19Q9lDg51l8I2UgONzC3oLgUAAM6S
wJZcT+kuBbS5fHOcnYnudPakW75Sy8JHnw7/7D3j7n3L0M/eS/72851ul2wu
O7lz59t7+60eX4MN2PhkXV5dfd7jaqQrfdq8/uw9hy4AAA1jPb3lHZvQXQpo
cDg6Ef/u/zPzr//t/A/+bPXdD9Z+8asKFtlQNpedJL73A9mhef8rG68l6jO2
YcPIHBx29Q/pLoVt5Mh87OCxAADUo8urq2aXN392prsgqJ6Lo+zKz96P//Gf
HIWmLt+8uTo7s7jITmRXskPZrez8+mbGog5/PyNtNpL51bVGGrN3NDJLBzMA
wBMhn+CPGjIdda1weTn/n95Z++VvLo6OrOd88yI7lN3KzscYabMRTURjDROP
C4VCi7uvnGvMAQBoAKmtbVdwVHcpUCXplq+Sf/lje3O+eZl/54fj733Apd+N
p2couLmzq7sU9uCfHgDgSaGZ6+k4XUvF3vpuPr3lXNo/3Xgd/c7b8kC6nyts
1tTrPjs/110Ke/CFJgDgqaEL6xOx3d618eFvnYv6aln75W/kgXQ/V9jpIJtt
9wV0l8IeXKwEAHiCNnd2+V77KVj56bsZj9/ptL/zda88kO7nCjutbLxumJn4
5Ln4xkO6SwEAQFUVCgWGnn4KYn/4vVxizum0Lw8hD6T7ucJOU68SMwuLukth
D6m2LKU2dJcCAIBqC8XiDfNpjvtE/tX/cbrx2um0Lw8hD6T7ucJO3rGJ9fSW
7lLYgAnEAQBPFnPNPAUl0n5hPmIsV9v31wjWNwtTUWMh7T8RDXMh/8La+uB0
WHcpAADQo83rZzqkxlYi7V83vWsshfDwvWnfP1b40T8YC2n/KZCcL2lfdyns
0TBfUgAAUIHp+Fw4Ma+7FHAQaR8VkHgsIVl3KWxwks83u7yXV1e6CwIAgB57
R0cd/n7dpYCDSPuowMzC4tSrhO5S2CC+tDwamdVdCgAAdJK0L5lfdyngFNI+
KhAITa1svNZdChu4gqMNMx0wAACVCSfmp+NzuksBp5Qak+cgI8uo1xV0v7jK
Ze9L+/nMnqu5dX588mpn75uFtP8EtPsCB9ms7lJYlTs+aXH3FQoF3QUBAECn
w1yuzevXXQo45cEROLMHB19++WXk5cvLfP7o5Uzkf/nfjUXuHmezAb//RU+P
/LXETkj7jeTs/Lyp1627FDaYWVgMxeK6SwEAgH7dA8Pbe/u6SwFHlDPefmp1
tfP5857u7khTy+C/+JfGMvnss6+++srr8RxkMqX3QNpvJJs7uz1DQd2lsAH/
2QAAUGgBa2Blzq51fHTkcbuf//in5rTf94sPFhKJ0q36pP3GE19anojGdJfC
qoNstt0X0F0KAABqQvbNcZvXT+/WhlR+235XZ+fUs8/MaX9/MPhgziftN57B
6fDC2rruUlgVTswzvDAAAAZGrmhUZfbbD09Pn5+c3O63T9p/gqTu3wCX6DLa
GAAAZoxK3ageTPuDAwN9Xm+ZqZ603/ByxyfNLq/uUli1s3/Q1T+kuxQAANQQ
ZpxsVKXTfu7w8Isvvtje3CTtQ1nZeO2fmNRdCqtCsfjMwqLuUgAAUFsCoank
ekp3KWCzUrNr/fwtYykMf0Xah5iIxqKLSd2lsKRQKLR5/dk3x7oLAgBAbVlP
b3lGxnWXAjYj7eNRGmDUys2d3d7hEd2lAACg5hQKhVaPjwaxBkPaR/kuLi4/
73HVe4++0chsfGlZdykAAKhFU68S0/E53aWAnUj7KN9SaiMQmtJdCkukqtLi
7js+PdVdEAAAatFBNtvq8dV7yx7MSqR9Sfj/vCxHSfuQqC+BX3cpLFlPb3nH
JnSXAgCA2iUf93wJ3jAkuUX+zf+VS8xZSfLlLPIQ8kD1HhSfuIuLy2aXV37q
Loglwy8jDTA1GAAAztk7OqJ5vwFkDg57h0d6hoLzf/N3GY/f6bS/83WvPJA8
nCs4Kg+t+9mjEg3QKi5VlRZ3X/7sTHdBAACoaTTv17WTfH40MitVNtXCudX6
fOPD3zqd9td++Rt5oEKhIA8qDy0FkGLofiXwOA3QKt4A1x0AAFAFNO/XKQnb
0cVki7tv6lXi7Pxc/fJkeTX21nfz6S3nov7pxuvod94+XfvdZA3y0FIAKYYU
Roqk7/XAI8i71uzy1nureANcdwAAQHXQvF93UlvbHf5+33jo9hiq6Zavkn/5
Y+fS/uJf/EgeouhBpRhSGCmSFKxarwEqJ1Wz4ZcR3aWwRKoqDXDdAQAA1ZE5
OGQUu3pxkM16xyY6A4Mb2zt3rlC4vJz/T++s/fI3F0dH9uZ82aHsVnYuD3Hn
Q0uRpGBSPCmkk68BLLm8umr1+PaOjnQXxJL40nK9V1gAAKimqVeJgclp3aVA
Kfmzs7GZqNTLEsurpfvMXBxll3/894n/8J+zM5ZG2jQvR+HZxL//f1d+9r7s
vMRDS8GkeFJIKWq9dxRpVPOra77xkO5SWNUzFNzc2dVdCgAA6sbl1VW7L7Ce
3tJdENxBInR8aVki9EQ0ZnTRf1DG7Yu99d3od95O/uWP137xq8cuq+//w9K7
v5Qbi+/8cPYP/ij2h9/b8w+W+dBSSCmqFFiKTWf+miJvR4e/P53J6C6IJYe5
XJvXz6EFAMCjSACQD9DywySqw+geIwmngs3zm1uH45Nbrc/TLV89dhl795fx
f/xENj/P7FXw0FLg0p2OUH3J9VTPUFB3KawKJ+aZBxwAgAoEwzOjkVndpcDv
ZN8c+ycmNV76und0JI9usQVVXVAsT+T2BcWoMqnLS41+Z/9Ad0GskmfBtSEA
AFTg4uKyZyjI+DzaSSoLxeJqWEu9g6N6xyaS6ymLO5GnoAYLlSfFl0caSXVe
3gLdpbAqncl0DwzrLgUAAPXqJJ9v8/rpeqGLEYzHZqK1MGWVJCvrzfuKPB11
lbH2KszTJG9luy/QAENWjkZmaZEAAMCKzMFhq8dXWS9xVEwSdXI9JVWtQGiq
pjq9eEbGVzZe27U3eWryBOVpypPlKsuqkaqWRP0GqMWfnZ839bproSIMAEBd
k3RnJfC/9/Ensqjb7qGg3O7w9NmysmJeYWZuPjg1bd5VquTIQla2dcjl1dX8
6lqHv19isNN9qt/v7E1ulvsc/7a54/qejhOyn//y8ReytAyOVlCM7b19qUTI
U5Yn7lA7/4ctrcYbKu+y3G7q6rZlZcV8IMmG7m8vfVW7kkPLoW0rcHFx2Ts8
0hiXtSaWVwenw7pLAQBAI0iupyTwSyp77IaSZCTAyKJuqCQjCcrI1RWvrEgi
kkXdVsFMrWwkqNKhruJtnXB2fh5fWlbt+dWZ7ajMtD8aX5Akr9L+9U3zvnl0
1t7J8EeegLot65RffSgiT1meuBxm8iLY28NEDiSVmdUbqt5f+Y37ruFoHrWy
ImsaVVRZU26rleWnqjKUOJCsbFuBQqHgn5gMhmds3KdGXf1DFfxTAgAAd0pt
bUsSW91MV7CtRBdzYjcCldyQMCN/MlL3o1ZWVQMjDqnG+aKqgfHXos0fta3T
MgeHEsCaXd6xmajFfjuSzI2WdiOEq7uyqLvye5XejbQvt9UKd2Z11WJvpP3N
nd37rot81JcFdzrM5UYjs+pSBXlZrOyqiLy55sRuvN3qkFBJu7KV5a75QLpd
NTD+envz8re1hby2UqVqjE5T6UxG0r7uUgAA0FB29g/avP7I3MKj0oIEmA5P
nzl1F+Uoc5551MqK+TdFid0cye7cvPxtnZA/O5tfXesZCnYGBuNLy7YMUCNp
34jlKt5Ltu+dDF9/WxFQP+WuxHIV740V5Lb6052M3QpJ+7cnX5P9VNaT5zZ5
ZWLJpQ5/v7w4C2vr1pv61RdG5q9yijpxmeubj1pZKTqGzQetrGzuEnZ78/K3
tUJeUt94yDMy3gBX5iqD02E5fXSXAgCARpM7PpHMIGGvzC7lRpIx+kUUNV1K
npHfqDT1qJVvP8S1KbFLRrod129vXv62NpLcJQnWOzbR1OsemJy292JJI8xf
f5vPzb1r5LYEeyOTq6Z447sAc/v/bea0L1G/qHlfNlRVBnvJixMITTW7vPJz
KbVRWVJVHcOMG7cPITkwjJrgo1Y23JfYb1/9cXvz8ret2PbevtTTp+NzjdGq
f31zoXGLu4/RnAAAcMjKxmsJD1OvEhJcS6+p+sOr3siqA4NaVK42go3RTaL8
lQ13JnbVHVoWox31zs3L3NYWh7lcLLkkIf/zHpfUmCrOrqXdTvv3te1f30R0
c9t+aea0f33TvL+5s2vej43Pooi8UPJyyYsm9SP5KS/jo64ZN44lFeCN48q4
MMS4IPexKxvuTOyyB2Nz9ac7Ny9z28qcnZ+HE/MSjG9/F1PXoovJBpgsAACA
WiYpYmwm2uzyjkZm7e1fXYJkvAfrFzUl++ZYYqq8RFI5avX4guEZqSg5OqXU
7bR/beq3rzJ5y+Counu7335RpDcr+pOkR8/IuHlvJXr+20XefXk9h19G5MVs
9wXkhZW7VR6hNHd8cnx6Ws1HrIwcZpG5Bcn5ctRJmXUXx06FQkHefYYFBgCg
CiR9RReTEmV7h0fiS8tOjyRzcXEpCdM7NrGwtl6DsV+KJxUfyfPhxHwgNCVB
Sw2wIy/RQTaru3TlMpK/WqT6cN9ff9PxtW86oquccrDJC6uG65eXWm7Iyy4v
vrwFjnZNl6g5MDntCo7KAV+DsV+eu1TE1MxlkvNrarIGu8i7LG+37lIAAPCE
SP6Rz1+JFu2+QLPL6xsPSe6KzC3IklheTa6nzIusmc5kKl42tne6BoY++frF
p929PUPByVfx9XTayg4rLoY8l5mFxVAsPvwyInUQyZyf97i6B4YlCsoTl8TV
8JP+GM372knqlsLIyy4vflf/kLwR8nZI2eSYnHqVkEqBvFmbO7t2vfubu7vu
kTE5CGWRo3FiNrq6uVn9g1At8sTl2clzn47PyVNu6nVLdVieckPmfEXOMnni
uksBAMATJblL8ryK+rJMRGOSuMzL4HRYMomVpWcwqILWN5n/6xdfuvt6h0Yt
7vOxiwQqeS6Sr2LJJclakj0aOFyVULO56zCXk3gvb43kXgn88mbJW2bjAeAa
Hv3024NQlma3V+qeVT4I1aLGz5f6tTxTeS8a/sJVeVt7h0d0lwIAADhFUlyr
x/dpd6+EHIcudEX5pGZXI8371XSSz3cGBiXky3OvzU5lDUxqbQ12xTEAADBk
3xwPv4yQr2pHoVDo8PfXZvO+QyTqj0Zma7PTfsPbOzqS4013KQAAgFMaZrTw
RpJcTz2p5n0OQo0Gp8NS2dddCgAAgCfkCTbvQ4vsm+M2r7/hL0wAAACoNcn1
lHdsQncp0OCC4ZnoYlJ3KQAAAJ4c1bzv9GwLeMqyb45b3H2OzkwHAACA+yTX
U0x4BOcMTE7Hkku6SwEAAPBE0bwP58hx1erx0WMfAABAo4W1dZr34QQ5ruJL
y7pLAQAA8KRdXl21enw078NeckS1+wI07AMAAGgXX1qmeR/28k9MJtdTuksB
AAAAmvdhs3Qm0+HvZ0YzAACAGhFfWg6GZ3SXAo1AQn73wPDKxmvdBQEAAMDv
XF5dtXn92TfHuguCupdcT7mCo7pLAQAAgN9D8z6su7i4bPX4dvYPdBcEAAAA
v0f13qd5H1aEE/PDLyO6SwEAAIA7ROYWaN5HxY5PT5tdXvmpuyAAAAC4w9n5
eYu7j+Z9VGb4ZSScmNddCgAAANyL5n1UZnNnt90XuLi41F0QAAAA3Es175/k
87oLgnpyeXXV4e9PbW3rLggAAAAeEJlbCMXiukuBejIdnxuYnNZdCgAAADzs
7Py81eOjeR9lOshmW9x9XJwLAABQL2jeR5kKhULv8EhieVV3QQAAAFCus/Pz
ZpeX5n08SHK+pH3J/LoLAgAAgEcIxeI076O03PFJi7tv7+hId0EAAADwOCf5
PM37KKFQKLiCo/GlZd0FAQAAQCVo3kcJseSSd2xCdykAAABQoZN8vtXjOzs/
110Q1Jy9oyPG4QEAAKh3oVg8MreguxSoLZdXV139Q6ubad0FAQAAgCU07+M2
qQMOTod1lwIAAAA2oHkfZtt7+21ePxVAAACAxnB8etri7iPdQeTPztp9gc2d
Xd0FAQAAgG2C4Rma91EoFLxjExwJAAAADSb75pjmfUjOl7TPtLkAAACNh+b9
J25je6fV42O2NQAAgIaUfXMsYe/y6kp3QaBB7vhE3v3tvX3dBQEAAIBTguGZ
+NKy7lKg2i4uLjsDg9HFpO6CAAAAwEHZN8dtXj/N+09KoVDwjYdGI7O6CwIA
AADH0bz/1IRica7MBQAAeCLovf+kLKytdwYGGYsJAADg6QiEpmjefwrSmYzU
7KR+p7sgAAAAqJ69oyOa9xue+hKHQXgAAACeIJr3G9tJPt8ZGEyup3QXBAAA
ABrQvN/ALi4ue4dHGG8TAADgKQuEpmj7bTxqvM1QLK67IAAAANBp7+iow9/P
wIwNZnA6PDA5zdsKAAAAmvcbTCgW94yME/UBAABwTfN+Y4kvLXcPDF9cXOou
CAAAAGoFzfuNYWXjtVTcTvJ53QUBAABADUlnMjTv17vNnd02r/8wl9NdEAAA
ANQcz8g4zfv1K3Nw2Orx7ewf6C4IAAAAahHN+/XrMJdr8/o3tnd0FwQAAAC1
i+b9eqQmzF3ZeK27IAAAAKhpNO/XnYuLy+6B4fjSsu6CAAAAoA54RsYX1tZ1
lwJlkXqZvF9MmAsAAIAyqYs9L6+udBcEDxuYnB6cDusuBQAAAOqJBMjI3ILu
UuABoVjcOzZBtysAAAA8SvbNcYu7L392prsguFcsudQzFGTCXAAAAFRgIhqT
RXcpcLel1EZnYJAJcwEAAFCZs/Pzdl+AqZpq0Mb2TpvXn31zrLsgAAAAqGOp
re3OwCCX69aU7b39Vo9v7+hId0EAAABQ94LhmalXCd2lwO+oCXPTmYzuggAA
AKAR0J+ndpzk8/JerG6mdRcEAAAAjSO1td3h72d8Hr0k6ncGBpkwFwAAALab
epVgXHeNcscnEvWZAQEAAABOkJzvGw+FYnHdBXmKDrLZNq8/sbyquyAAAABo
WBcXl52BweR6SndBnpbtvf0Wdx999QEAAOC0w1yu1eNbT2/pLshTEUsuyQsu
gV93QQAAAPAkSPJsdnlpanbaxcVlIDTVMxTMHZ/oLgsAAACeEAK/0w6y2Q5/
fygW57JoAAAAVN/O/kGb11+1wD8zN//ex580dXWrux+2tMpd+aX1lQ0dnr7b
t4NT0+ZdObFtEYn3kbkFeW3pLgUAAACNDnO5FnffdHyuCu3PKjNLfpbFPRRM
3STh+4L0o1YWsoLEciOly5pyV91Wv5SaguzH9m1v297b7wwM+sZD9N4BAACA
dif5vHdswhUcPT49rcLDSZZOmVq8jQAvNyRRS7o2t7GXv7IEclnTfLeoaqAq
Dndu/qhtS8ifnY3NRNu8/pWN1w+uDAAAAFSH6nnS6vGltrYdfSCVsY128g9b
Ws1h3vynx658fdNEX1RTMG5LVjf/6fbmj9r2NqkxhWLxpl63/Dw7Py+9MgAA
AFB9mzu7Hf5+/8TkYS7nxP7NLfPy872PPzGn95m5eQnV8ifViv6olZX7Eruq
NZhLcnvz8rctonJ+s8s7GpnNvjku64UAAAAAdLi8uoovLbe4+8ZmopJj7d25
xGYJ7epiW+O20UPeaGlXCfxRKyt3JnbVJ18txla3Ny9/W4NUjoZfRiTnS9q3
/bUCAAAAHHJ2fj4dn5McGwhNrae3pAqgu0R3OMhmtYxsuXd0FJlbaPcFeoaC
ieXV/NlZ9csAAAAAWHRxcZlcT3lGxlvcfRPRWGpru6aS7WEu19U/NBqZ3dzZ
dTr2S81ifnVtcDosL0X3wLBUheQ3jj4iAAAAUB2545PoYtI/Mdns8nb4+wcm
pyNzC2pJLK9KjcC8rGy8Tmcy1VmSqVSLy/vJ1y++cHmleLHk0ubursV9rm6m
5VlItp96lQiEpjoDg59298qzHpuJylOjxw4AAAAaWPbN8VJqw0j7E9FYMDxj
XqQu4BkZr9ryVV9A0r5aPut2yV23tR1K+eVZjEZmpYIjyX/v6Oji4lL3qw4A
AAA8OfGlZQn5Le6+6vTnAQAAAFAdS6kNQj4AAADQkAj5AAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADex/AhEPGTY=

    "], {{0, 765.}, {763.5, 0}}, {0, 255},
    ColorFunction->RGBColor,
    ImageResolution->{96., 96.},
    RasterInterpolation->"High"],
   BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSize->Automatic,
  ImageSizeRaw->{763.5, 765.},
  PlotRange->{{0, 763.5}, {0, 765.}}]], "Output",
 CellLabel->
  "Out[101]=",ExpressionUUID->"2de4d7eb-c0cb-a94e-9295-9ecce91e3b3b"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Show all configurations - takes a while", "Subsubsection",ExpressionUUID->"738100ec-888c-8e43-9656-20e0469eb6c9"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"dat", "=", 
    RowBox[{"Table", "[", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{"net", "=", 
        RowBox[{"MakeUnet", "[", 
         RowBox[{"1", ",", "21", ",", 
          RowBox[{"{", 
           RowBox[{"32", ",", "112", ",", "112"}], "}"}], ",", 
          RowBox[{"DownsampleSchedule", " ", "->", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"1", ",", "2", ",", "2"}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{"2", ",", "2", ",", "2"}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{"1", ",", "2", ",", "2"}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{"2", ",", "2", ",", "2"}], "}"}], ",", "1"}], "}"}]}], 
          ",", "\[IndentingNewLine]", 
          RowBox[{"NetworkArchitecture", "->", 
           RowBox[{"set", "[", 
            RowBox[{"[", "1", "]"}], "]"}]}], ",", 
          RowBox[{"RescaleMethod", "->", "\"\<Conv\>\""}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"BlockType", "->", 
           RowBox[{"set", "[", 
            RowBox[{"[", "2", "]"}], "]"}]}], ",", 
          RowBox[{"FeatureSchedule", "->", 
           RowBox[{"set", "[", 
            RowBox[{"[", "3", "]"}], "]"}]}], ",", 
          RowBox[{"MonitorCalc", "->", "False"}], ",", 
          RowBox[{"SettingSchedule", "->", 
           RowBox[{"set", "[", 
            RowBox[{"[", "4", "]"}], "]"}]}]}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{
          RowBox[{"set", "[", 
           RowBox[{"[", "1", "]"}], "]"}], "<>", "\"\< - \>\"", "<>", 
          RowBox[{"set", "[", 
           RowBox[{"[", "2", "]"}], "]"}]}], ",", 
         RowBox[{"{", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"NetSummary", "[", "net", "]"}], ",", 
           RowBox[{"makeNetIm", "@", "net"}], ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"n", "=", 
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"set", "[", 
                 RowBox[{"[", "1", "]"}], "]"}], "===", "\"\<UNet\>\""}], 
               ",", "\"\<enc_1\>\"", ",", "\"\<node_1_1\>\""}], "]"}]}], ";", 
            RowBox[{"netIm", "[", 
             RowBox[{
              RowBox[{"NetTake", "[", 
               RowBox[{"net", ",", 
                RowBox[{"{", 
                 RowBox[{"n", ",", "n"}], "}"}]}], "]"}], "[", 
              RowBox[{"[", "1", "]"}], "]"}], "]"}]}]}], 
          "\[IndentingNewLine]", "}"}]}], "}"}]}], "\[IndentingNewLine]", ",",
       "\[IndentingNewLine]", 
      RowBox[{"{", 
       RowBox[{"set", ",", 
        RowBox[{"{", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
           "\"\<UNet\>\"", ",", "\"\<UNet\>\"", ",", "32", ",", "Automatic"}],
            "}"}], ",", "\[IndentingNewLine]", 
          RowBox[{"{", 
           RowBox[{
           "\"\<UNet\>\"", ",", "\"\<ResNet\>\"", ",", "32", ",", 
            "Automatic"}], "}"}], ",", "\[IndentingNewLine]", 
          RowBox[{"{", 
           RowBox[{
           "\"\<UNet\>\"", ",", "\"\<DenseNet\>\"", ",", "16", ",", 
            "Automatic"}], "}"}], ",", "\[IndentingNewLine]", 
          RowBox[{"{", 
           RowBox[{
           "\"\<UNet\>\"", ",", "\"\<Inception\>\"", ",", "16", ",", 
            "Automatic"}], "}"}], ",", "\[IndentingNewLine]", 
          RowBox[{"{", 
           RowBox[{"\"\<UNet\>\"", ",", "\"\<U2Net\>\"", ",", 
            RowBox[{"{", 
             RowBox[{"64", ",", "16"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{"5", ",", "True"}], "}"}], ",", 
              RowBox[{"{", 
               RowBox[{"4", ",", "True"}], "}"}], ",", 
              RowBox[{"{", 
               RowBox[{"3", ",", "True"}], "}"}], ",", 
              RowBox[{"{", 
               RowBox[{"4", ",", "False"}], "}"}], ",", 
              RowBox[{"{", 
               RowBox[{"3", ",", "False"}], "}"}]}], "}"}]}], "}"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"{", 
           RowBox[{
           "\"\<UNet+\>\"", ",", "\"\<UNet\>\"", ",", "24", ",", 
            "Automatic"}], "}"}], ",", "\[IndentingNewLine]", 
          RowBox[{"{", 
           RowBox[{
           "\"\<UNet+\>\"", ",", "\"\<ResNet\>\"", ",", "24", ",", 
            "Automatic"}], "}"}], ",", "\[IndentingNewLine]", 
          RowBox[{"{", 
           RowBox[{
           "\"\<UNet+\>\"", ",", "\"\<DenseNet\>\"", ",", "12", ",", 
            "Automatic"}], "}"}], ",", "\[IndentingNewLine]", 
          RowBox[{"{", 
           RowBox[{
           "\"\<UNet+\>\"", ",", "\"\<Inception\>\"", ",", "12", ",", 
            "Automatic"}], "}"}], ",", "\[IndentingNewLine]", 
          RowBox[{"{", 
           RowBox[{"\"\<UNet+\>\"", ",", "\"\<U2Net\>\"", ",", 
            RowBox[{"{", 
             RowBox[{"32", ",", "8"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{"5", ",", "True"}], "}"}], ",", 
              RowBox[{"{", 
               RowBox[{"4", ",", "True"}], "}"}], ",", 
              RowBox[{"{", 
               RowBox[{"3", ",", "True"}], "}"}], ",", 
              RowBox[{"{", 
               RowBox[{"4", ",", "False"}], "}"}], ",", 
              RowBox[{"{", 
               RowBox[{"3", ",", "False"}], "}"}]}], "}"}]}], "}"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"{", 
           RowBox[{
           "\"\<UNet++\>\"", ",", "\"\<UNet\>\"", ",", "24", ",", 
            "Automatic"}], "}"}], ",", "\[IndentingNewLine]", 
          RowBox[{"{", 
           RowBox[{
           "\"\<UNet++\>\"", ",", "\"\<ResNet\>\"", ",", "24", ",", 
            "Automatic"}], "}"}], ",", "\[IndentingNewLine]", 
          RowBox[{"{", 
           RowBox[{
           "\"\<UNet++\>\"", ",", "\"\<DenseNet\>\"", ",", "8", ",", 
            "Automatic"}], "}"}], ",", "\[IndentingNewLine]", 
          RowBox[{"{", 
           RowBox[{
           "\"\<UNet++\>\"", ",", "\"\<Inception\>\"", ",", "8", ",", 
            "Automatic"}], "}"}], ",", "\[IndentingNewLine]", 
          RowBox[{"{", 
           RowBox[{"\"\<UNet++\>\"", ",", "\"\<U2Net\>\"", ",", 
            RowBox[{"{", 
             RowBox[{"24", ",", "6"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{"5", ",", "True"}], "}"}], ",", 
              RowBox[{"{", 
               RowBox[{"4", ",", "True"}], "}"}], ",", 
              RowBox[{"{", 
               RowBox[{"3", ",", "True"}], "}"}], ",", 
              RowBox[{"{", 
               RowBox[{"4", ",", "False"}], "}"}], ",", 
              RowBox[{"{", 
               RowBox[{"3", ",", "False"}], "}"}]}], "}"}]}], "}"}]}], 
         "\[IndentingNewLine]", "}"}]}], "}"}]}], "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{"Manipulate", "[", 
  RowBox[{
   RowBox[{"dat", "[", 
    RowBox[{"[", 
     RowBox[{"j", ",", "2", ",", "i"}], "]"}], "]"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"j", ",", "1", ",", "\"\<Architecture\>\""}], "}"}], ",", 
     RowBox[{"Thread", "[", 
      RowBox[{
       RowBox[{"Range", "@", 
        RowBox[{"Length", "@", "dat"}]}], "->", 
       RowBox[{"dat", "[", 
        RowBox[{"[", 
         RowBox[{"All", ",", "1"}], "]"}], "]"}]}], "]"}]}], "}"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"i", ",", "1", ",", "\"\<Display\>\""}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"1", "->", "\"\<Summary\>\""}], ",", 
       RowBox[{"2", "->", "\"\<Architecture\>\""}], ",", 
       RowBox[{"3", "->", "\"\<Block\>\""}]}], "}"}]}], "}"}]}], 
  "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]"}], "Input",ExpressionUUID->"9adfae3d-88f4-6845-9d09-05eda033e45b"],

Cell[BoxData[""], "Input",ExpressionUUID->"50d1764a-cacb-8746-9c2e-702106a768d2"]
}, Open  ]]
}, Open  ]]
},
WindowSize->{1440, 837.75},
WindowMargins->{{-6, Automatic}, {Automatic, -6}},
FrontEndVersion->"14.1 for Microsoft Windows (64-bit) (July 16, 2024)",
StyleDefinitions->"Default.nb",
ExpressionUUID->"5fd1d5da-1b7e-b943-ab6c-126883022192"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[554, 20, 1270, 38, 78, "Input",ExpressionUUID->"44cc6656-9017-924b-8f9c-96d457b68db2"],
Cell[CellGroupData[{
Cell[1849, 62, 94, 0, 39, "Subsection",ExpressionUUID->"01e9f8f5-d481-9c42-848d-a9c83d2e5e8f"],
Cell[CellGroupData[{
Cell[1968, 66, 1113, 31, 49, "Input",ExpressionUUID->"31a694be-fb85-7842-bf1b-bcf772921799"],
Cell[CellGroupData[{
Cell[3106, 101, 934, 28, 119, "Echo",ExpressionUUID->"86286d76-b593-c44f-9c5d-2857f39c9368"],
Cell[4043, 131, 11513, 253, 249, "Echo",ExpressionUUID->"7604b2a5-e435-bc42-ba41-4ff14493b66e"],
Cell[15559, 386, 413, 11, 18, "Echo",ExpressionUUID->"737a3962-b046-2346-b7ee-0dcd5fe5a30c"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[16033, 404, 108, 0, 39, "Subsection",ExpressionUUID->"f546921e-67fd-8344-93df-03e1c9ae057f"],
Cell[CellGroupData[{
Cell[16166, 408, 102, 0, 32, "Subsubsection",ExpressionUUID->"71ecf511-d365-8645-843d-ecda7c304f9a"],
Cell[16271, 410, 1143, 36, 49, "Input",ExpressionUUID->"b656f018-13fc-8240-a769-918c5e196f44"],
Cell[CellGroupData[{
Cell[17439, 450, 464, 10, 35, "Input",ExpressionUUID->"8b019094-cd8b-b84c-9464-c55558279efe"],
Cell[17906, 462, 9852, 166, 92, "Output",ExpressionUUID->"2bafef5f-a808-854b-9038-a6445b2018a4"],
Cell[27761, 630, 9505, 161, 92, "Output",ExpressionUUID->"7c8e4921-4709-9741-b84f-a1b82674e9bb"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[37315, 797, 100, 0, 32, "Subsubsection",ExpressionUUID->"e47652d1-d9a1-6a4a-bca0-83e8154e7169"],
Cell[CellGroupData[{
Cell[37440, 801, 628, 19, 35, "Input",ExpressionUUID->"ab20fa92-fdd3-284e-8bbe-939756d05964"],
Cell[38071, 822, 22811, 380, 92, "Output",ExpressionUUID->"63606ceb-e20a-3e4f-bb94-751adc7db8d7"]
}, Open  ]],
Cell[CellGroupData[{
Cell[60919, 1207, 813, 23, 35, "Input",ExpressionUUID->"86b2de4e-cab3-df46-ba34-1f1cb2b38195"],
Cell[61735, 1232, 44788, 740, 277, "Output",ExpressionUUID->"6db2ea6f-5c70-a544-a9e4-a333b28748bc"]
}, Open  ]],
Cell[CellGroupData[{
Cell[106560, 1977, 1134, 33, 35, "Input",ExpressionUUID->"bd28354a-3ab2-d944-ac9b-6d7c195ecb13"],
Cell[107697, 2012, 162030, 2662, 750, "Output",ExpressionUUID->"c01ecef0-8dac-504a-9c84-b8c94b9d8f9a"]
}, Open  ]],
Cell[CellGroupData[{
Cell[269764, 4679, 2984, 88, 106, "Input",ExpressionUUID->"7f65be1f-22c1-8145-a433-9e4906067218"],
Cell[272751, 4769, 10014, 170, 92, "Output",ExpressionUUID->"6a8a9dd5-caba-3144-8941-285a94689a5e"],
Cell[282768, 4941, 11280, 191, 92, "Output",ExpressionUUID->"4f8f8619-3141-9046-933c-ce0ab1795fb5"],
Cell[294051, 5134, 32839, 544, 182, "Output",ExpressionUUID->"dedbb9dd-1d28-e54c-8764-7afe9c9bc887"],
Cell[326893, 5680, 41604, 688, 227, "Output",ExpressionUUID->"80498989-86fe-3240-8f9d-9a3f7b1a7c35"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[368546, 6374, 98, 0, 32, "Subsubsection",ExpressionUUID->"f23a400c-9778-1040-bdd5-4e23d945dd2a"],
Cell[CellGroupData[{
Cell[368669, 6378, 884, 26, 49, "Input",ExpressionUUID->"95ee7afd-0268-2748-b151-ecedb94e7541"],
Cell[CellGroupData[{
Cell[369578, 6408, 2191, 43, 38, "Print",ExpressionUUID->"b13d19bd-7a33-fd4e-a310-ccccf11daab7"],
Cell[371772, 6453, 3632, 66, 31, "Print",ExpressionUUID->"e6d204e7-2d90-714b-a293-0452b148f279"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[375477, 6527, 91, 0, 39, "Subsection",ExpressionUUID->"b7d9ef9c-b9cd-be44-a5c4-2cfa97e18675"],
Cell[CellGroupData[{
Cell[375593, 6531, 91, 0, 32, "Subsubsection",ExpressionUUID->"1772b886-564d-db45-b4de-1df343a1afa5"],
Cell[CellGroupData[{
Cell[375709, 6535, 503, 13, 63, "Input",ExpressionUUID->"026f59d9-747b-8048-b0fb-1ada69b3a1f2"],
Cell[376215, 6550, 625853, 12590, 47, "Output",ExpressionUUID->"ee07d783-e110-2443-9caf-942a7bca1807"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[1002117, 19146, 96, 0, 32, "Subsubsection",ExpressionUUID->"24c9b318-cf54-9a4d-a1e9-bca028fe8b56"],
Cell[CellGroupData[{
Cell[1002238, 19150, 177, 3, 21, "Input",ExpressionUUID->"46ca1167-0534-1b47-bd35-f7ae4029c003"],
Cell[1002418, 19155, 511, 15, 34, "Output",ExpressionUUID->"97f4fba9-de75-294b-914a-78b98232f290"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1002966, 19175, 144, 2, 21, "Input",ExpressionUUID->"64685413-e627-2f48-8f78-917e48317452"],
Cell[1003113, 19179, 2808, 86, 262, "Output",ExpressionUUID->"a66531a4-f7b8-8f4e-9a7f-faba7c57363b"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1005958, 19270, 178, 3, 21, "Input",ExpressionUUID->"e2e64890-0f15-9440-abd9-7d7ce92f87c8"],
Cell[1006139, 19275, 22288, 370, 296, "Output",ExpressionUUID->"c7cfe487-a875-5a45-afbc-9f7fbee641ec"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[1028476, 19651, 104, 0, 32, "Subsubsection",ExpressionUUID->"337973c5-99be-b949-a53e-0cd4b92a5f12"],
Cell[CellGroupData[{
Cell[1028605, 19655, 806, 21, 49, "Input",ExpressionUUID->"e33d48b0-7975-2747-9aa5-4c9d7d97e767"],
Cell[1029414, 19678, 82190, 1352, 269, "Output",ExpressionUUID->"c7b7c3dc-0d03-364b-8cd3-9352e891c015"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[1111653, 21036, 89, 0, 32, "Subsubsection",ExpressionUUID->"bf7ca46a-5830-ef47-b38f-a97d5a83dc51"],
Cell[CellGroupData[{
Cell[1111767, 21040, 284, 6, 21, "Input",ExpressionUUID->"7b6e5902-4562-934c-816e-f2b01388d67d"],
Cell[CellGroupData[{
Cell[1112076, 21050, 254, 6, 18, "Echo",ExpressionUUID->"9e9a7496-c0e3-1d49-b709-38c30727366b"],
Cell[1112333, 21058, 280, 8, 18, "Echo",ExpressionUUID->"d9aea0c5-d5cd-b84a-ab97-cccb5c2b9a15"],
Cell[1112616, 21068, 242, 6, 18, "Echo",ExpressionUUID->"b7da5b1c-bee7-6341-bffd-0ccca27802d6"],
Cell[1112861, 21076, 242, 6, 18, "Echo",ExpressionUUID->"7bddc067-0e0a-5245-a24d-56b49fda2553"],
Cell[1113106, 21084, 512, 16, 18, "Echo",ExpressionUUID->"6fc6f7d1-d595-dd4e-9a83-839748525f0d"],
Cell[1113621, 21102, 2956, 89, 236, "Echo",ExpressionUUID->"7f278104-11e3-b046-921a-04a99dd822d3"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[1116626, 21197, 485, 12, 49, "Input",ExpressionUUID->"887f8edf-29ea-044a-aad0-c2ff16e09888"],
Cell[CellGroupData[{
Cell[1117136, 21213, 820, 20, 18, "Print",ExpressionUUID->"e54d83a6-bd1f-8348-881c-578786cc9550"],
Cell[1117959, 21235, 2336, 45, 38, "Print",ExpressionUUID->"77ed42ba-5d5b-cd4c-aad2-3db3fbede25a"],
Cell[1120298, 21282, 4077, 73, 31, "Print",ExpressionUUID->"5aa1a796-a2cd-b243-82a1-06303054dc2e"],
Cell[1124378, 21357, 824, 20, 18, "Print",ExpressionUUID->"deae6f11-ea12-8a4c-bb0a-9b14f6870d4a"],
Cell[1125205, 21379, 2348, 45, 38, "Print",ExpressionUUID->"d49e4e6f-3a66-cb42-bd55-b6af3f23b322"],
Cell[1127556, 21426, 4077, 73, 31, "Print",ExpressionUUID->"a4167942-0a4b-334b-9eb4-4da55915056c"],
Cell[1131636, 21501, 824, 20, 18, "Print",ExpressionUUID->"4841c4d8-1120-2b45-a974-a91ffd37a96e"],
Cell[1132463, 21523, 2427, 46, 38, "Print",ExpressionUUID->"dc2dc83a-6ea9-ee46-8e7c-125b1f03c654"],
Cell[1134893, 21571, 4077, 73, 31, "Print",ExpressionUUID->"23049bbd-4846-6d4d-bc73-541e3ccd86e5"],
Cell[1138973, 21646, 836, 20, 18, "Print",ExpressionUUID->"8e6da780-deca-8448-abf7-4d9925dfde8d"],
Cell[1139812, 21668, 2432, 46, 38, "Print",ExpressionUUID->"07ff2b73-a76b-d64c-adb1-1ac0c9aa59e8"],
Cell[1142247, 21716, 4077, 73, 31, "Print",ExpressionUUID->"bafab487-456c-3c47-a813-adb23e67e61b"],
Cell[1146327, 21791, 832, 20, 18, "Print",ExpressionUUID->"b9b527f1-0c9a-1c46-a588-714db47f33fc"],
Cell[1147162, 21813, 2404, 46, 38, "Print",ExpressionUUID->"c1f0b7fb-24dd-c848-9004-6fefae39a19a"],
Cell[1149569, 21861, 4142, 74, 31, "Print",ExpressionUUID->"a33ab862-2d2d-da4e-91cc-210bb3e38972"],
Cell[1153714, 21937, 820, 20, 18, "Print",ExpressionUUID->"5c793345-4615-3d4e-a447-c505db9fc476"],
Cell[1154537, 21959, 2401, 46, 38, "Print",ExpressionUUID->"6255242b-95ce-814a-885b-f6cc87b8e0a0"],
Cell[1156941, 22007, 4138, 74, 31, "Print",ExpressionUUID->"4f2c97fa-fd9f-b545-b188-f44a70ca87b4"],
Cell[1161082, 22083, 832, 20, 18, "Print",ExpressionUUID->"0cd7bec7-328e-2a4a-a70d-3fad82ee0439"],
Cell[1161917, 22105, 2409, 46, 38, "Print",ExpressionUUID->"1739b975-e2db-ef42-826d-a868a513a0e6"],
Cell[1164329, 22153, 4134, 74, 31, "Print",ExpressionUUID->"337d8d44-ed30-1c41-a4a0-3a7a06aa8f27"],
Cell[1168466, 22229, 836, 20, 18, "Print",ExpressionUUID->"a0042f4f-fa53-5142-8d7d-96420330b958"],
Cell[1169305, 22251, 2496, 47, 38, "Print",ExpressionUUID->"f482a42f-2a5d-b744-bba1-4c9ff774acad"],
Cell[1171804, 22300, 4201, 75, 31, "Print",ExpressionUUID->"22205a0a-0d6c-6249-a371-6297bc8cc7d6"],
Cell[1176008, 22377, 840, 20, 18, "Print",ExpressionUUID->"ce98e952-31e2-3943-a466-6c2ece08f93f"],
Cell[1176851, 22399, 2481, 47, 38, "Print",ExpressionUUID->"4f63f7e6-518d-e544-91f8-e2d0fe5f69f8"],
Cell[1179335, 22448, 4197, 75, 31, "Print",ExpressionUUID->"bb08805a-8111-2e4e-a5d9-515e74d4f0cf"],
Cell[1183535, 22525, 1294, 28, 18, "Print",ExpressionUUID->"2add9ea8-e4a0-dc4e-80ca-63db6d46698f"],
Cell[1184832, 22555, 6125, 107, 24, "Print",ExpressionUUID->"5b7b1a22-ac29-8143-853c-1925cfa44280"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[1191030, 22670, 95, 0, 39, "Subsection",ExpressionUUID->"94dd54c7-341f-7148-b9e2-eaf1a6a7570d"],
Cell[CellGroupData[{
Cell[1191150, 22674, 102, 0, 32, "Subsubsection",ExpressionUUID->"06d43d8d-b912-a34c-b781-4fd0e03e1253"],
Cell[CellGroupData[{
Cell[1191277, 22678, 620, 14, 21, "Input",ExpressionUUID->"c7e77745-9573-ea44-9711-9abbe3498a02"],
Cell[1191900, 22694, 38375, 634, 227, "Output",ExpressionUUID->"1ec9b7c4-19dc-9f49-952b-1c2656f9887b"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1230312, 23333, 427, 9, 21, "Input",ExpressionUUID->"07199056-03f0-3941-b05a-7c0bd3acc991"],
Cell[1230742, 23344, 37863, 626, 227, "Output",ExpressionUUID->"cfb90937-3921-1548-8d2a-fa969155485c"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1268642, 23975, 774, 19, 21, "Input",ExpressionUUID->"f9958e78-5c28-1f44-941d-fcc5b1f51b37"],
Cell[1269419, 23996, 37749, 624, 227, "Output",ExpressionUUID->"9cced53d-d7a6-f146-a538-6bf38a0c53c4"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1307205, 24625, 342, 8, 21, "Input",ExpressionUUID->"cda8ee00-ccf9-1b43-b49e-ad4a77a47252"],
Cell[1307550, 24635, 41343, 684, 227, "Output",ExpressionUUID->"7fa2c5f5-0861-ff44-a391-5b6c8a9173e2"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1348930, 25324, 294, 7, 21, "Input",ExpressionUUID->"c08844c6-dc4a-b54b-b225-bd8a2cb82961"],
Cell[1349227, 25333, 125636, 2066, 586, "Output",ExpressionUUID->"2de4d7eb-c0cb-a94e-9295-9ecce91e3b3b"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[1474912, 27405, 119, 0, 32, "Subsubsection",ExpressionUUID->"738100ec-888c-8e43-9656-20e0469eb6c9"],
Cell[1475034, 27407, 8074, 199, 463, "Input",ExpressionUUID->"9adfae3d-88f4-6845-9d09-05eda033e45b"],
Cell[1483111, 27608, 81, 0, 21, "Input",ExpressionUUID->"50d1764a-cacb-8746-9c2e-702106a768d2"]
}, Open  ]]
}, Open  ]]
}
]
*)

